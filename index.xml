<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Dylan Castillo</title>
<link>https://dylancastillo.co/</link>
<atom:link href="https://dylancastillo.co/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<image>
<url>https://dylancastillo.co/images/social_media_card.webp</url>
<title>Dylan Castillo</title>
<link>https://dylancastillo.co/</link>
</image>
<generator>quarto-1.6.39</generator>
<lastBuildDate>Sun, 08 Dec 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Structured outputs can hurt the performance of LLMs</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/say-what-you-mean-sometimes.html</link>
  <description><![CDATA[ 




<p>When I read <a href="https://arxiv.org/abs/2408.02442">Let Me Speak Freely?</a> by Tam et al.&nbsp;I thought they raised an interesting question: does constraining LLM outputs to structured formats impact the quality of their responses?</p>
<p>In both the original study and their recent update, Tam et al.&nbsp;concluded that is the case. They found that “structured generation constraints significantly impact LLM performance across various tasks”.</p>
<p>But the study had major flaws. The <a href="https://dottxt.co/">.txt</a> team wrote a very compelling <a href="https://dottxt.co/blog/let-me-speak-freely">rebuttal</a> to the paper. For <em>Llama-3-8B-Instruct</em>, they demonstrate that Tam, et al.&nbsp;results were mostly due to poor prompting, unfair comparisons and the improper use of an “AI parser” rather than the use of structured outputs.</p>
<p>I liked the rebuttal but it still left me wondering how well their results generalize. They focused on a single model<sup>1</sup>, which represents a small fraction of the LLMs powering applications in production today. Open-weight models offer more flexibility on how to <em>structure</em> your output, such as letting users specify <a href="https://dottxt-ai.github.io/outlines/latest/reference/generation/regex/">regex expressions</a> to constrain the output. Proprietary models lack this. Right now, JSON is the only structured output format guaranteed to work across most popular providers.</p>
<p>Given this constraint, would the .txt team’s results still hold?</p>
<p>Plus, both the original study and the rebuttal focused on tasks that might not be a good proxy for the full range of tasks people use LLMs for. Would the rebuttal results be different in settings outside of simple reasoning tasks?</p>
<p>So I decided to:</p>
<ol type="1">
<li>Replicate the results from .txt’s rebuttal using <em>LLaMA3-8B-Instruct</em>.</li>
<li>Replicate the same tasks using a proprietary model <em>GPT-4o-mini</em>.</li>
<li>Test results on a broader set of tasks such as <a href="https://livebench.ai/">LiveBench</a>.</li>
</ol>
<p>This article presents the results of the first two steps. All the code is available on <a href="https://github.com/dylanjcastillo/blog/tree/main/_extras/say-what-you-mean-sometimes">Github</a>.</p>
<section id="results" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<p>If you’re short on time, here are the key findings:</p>
<ol type="1">
<li>Tam et al.’s conclusions about structured outputs might still hold, even if they did not properly test for it. There are tasks where structured outputs perform worse than unstructured ones.</li>
<li>.txt’s rebuttal is accurate. It shows that structured outputs are as good or better than unstructured outputs for <em>LLaMA3-8B-Instruct</em> in the tasks considered. But a similar approach did not hold for <em>GPT-4o-mini</em> (and possibly other models).</li>
</ol>
<p>The figure below shows the results for <em>GPT-4o-mini</em> using .txt’s prompt fixes, along with additional improvements I made.</p>
<div id="cell-fig-gpt-4o-mini-best" class="cell page-columns page-full" data-execution_count="1">
<div id="fig-gpt-4o-mini-best" class="cell-output cell-output-display quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-gpt-4o-mini-best-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div>                            <div id="f57c9335-f6b7-416b-ba77-e8f2b57ff706" class="plotly-graph-div" style="height:400px; width:100%;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("f57c9335-f6b7-416b-ba77-e8f2b57ff706")) {                    Plotly.newPlot(                        "f57c9335-f6b7-416b-ba77-e8f2b57ff706",                        [{"hoverinfo":"skip","name":"Structured","text":["93.86","94.67","89.84"],"textposition":"outside","texttemplate":"%{text:.2f}%","x":["GSM8k","Last Letter","Shuffled Objects"],"y":[93.86,94.67,89.84],"type":"bar"},{"hoverinfo":"skip","name":"Unstructured","text":["94.31","92.0","95.12"],"textposition":"outside","texttemplate":"%{text:.2f}%","x":["GSM8k","Last Letter","Shuffled Objects"],"y":[94.31,92.0,95.12],"type":"bar"}],                        {"template":{"data":{"barpolar":[{"marker":{"line":{"color":"rgb(17,17,17)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"bar":[{"error_x":{"color":"#f2f5fa"},"error_y":{"color":"#f2f5fa"},"marker":{"line":{"color":"rgb(17,17,17)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"carpet":[{"aaxis":{"endlinecolor":"#A2B1C6","gridcolor":"#506784","linecolor":"#506784","minorgridcolor":"#506784","startlinecolor":"#A2B1C6"},"baxis":{"endlinecolor":"#A2B1C6","gridcolor":"#506784","linecolor":"#506784","minorgridcolor":"#506784","startlinecolor":"#A2B1C6"},"type":"carpet"}],"choropleth":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"choropleth"}],"contourcarpet":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"contourcarpet"}],"contour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"contour"}],"heatmapgl":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmapgl"}],"heatmap":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmap"}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2dcontour"}],"histogram2d":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2d"}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"mesh3d":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"mesh3d"}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"parcoords"}],"pie":[{"automargin":true,"type":"pie"}],"scatter3d":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatter3d"}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattercarpet"}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergeo"}],"scattergl":[{"marker":{"line":{"color":"#283442"}},"type":"scattergl"}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattermapbox"}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolargl"}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolar"}],"scatter":[{"marker":{"line":{"color":"#283442"}},"type":"scatter"}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterternary"}],"surface":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"surface"}],"table":[{"cells":{"fill":{"color":"#506784"},"line":{"color":"rgb(17,17,17)"}},"header":{"fill":{"color":"#2a3f5f"},"line":{"color":"rgb(17,17,17)"}},"type":"table"}]},"layout":{"annotationdefaults":{"arrowcolor":"#f2f5fa","arrowhead":0,"arrowwidth":1},"autotypenumbers":"strict","coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#f2f5fa"},"geo":{"bgcolor":"rgb(17,17,17)","lakecolor":"rgb(17,17,17)","landcolor":"rgb(17,17,17)","showlakes":true,"showland":true,"subunitcolor":"#506784"},"hoverlabel":{"align":"left"},"hovermode":"closest","mapbox":{"style":"dark"},"margin":{"b":0,"l":0,"r":0,"t":30},"paper_bgcolor":"rgb(17,17,17)","plot_bgcolor":"rgb(17,17,17)","polar":{"angularaxis":{"gridcolor":"#506784","linecolor":"#506784","ticks":""},"bgcolor":"rgb(17,17,17)","radialaxis":{"gridcolor":"#506784","linecolor":"#506784","ticks":""}},"scene":{"xaxis":{"backgroundcolor":"rgb(17,17,17)","gridcolor":"#506784","gridwidth":2,"linecolor":"#506784","showbackground":true,"ticks":"","zerolinecolor":"#C8D4E3"},"yaxis":{"backgroundcolor":"rgb(17,17,17)","gridcolor":"#506784","gridwidth":2,"linecolor":"#506784","showbackground":true,"ticks":"","zerolinecolor":"#C8D4E3"},"zaxis":{"backgroundcolor":"rgb(17,17,17)","gridcolor":"#506784","gridwidth":2,"linecolor":"#506784","showbackground":true,"ticks":"","zerolinecolor":"#C8D4E3"}},"shapedefaults":{"line":{"color":"#f2f5fa"}},"sliderdefaults":{"bgcolor":"#C8D4E3","bordercolor":"rgb(17,17,17)","borderwidth":1,"tickwidth":0},"ternary":{"aaxis":{"gridcolor":"#506784","linecolor":"#506784","ticks":""},"baxis":{"gridcolor":"#506784","linecolor":"#506784","ticks":""},"bgcolor":"rgb(17,17,17)","caxis":{"gridcolor":"#506784","linecolor":"#506784","ticks":""}},"title":{"x":0.05},"updatemenudefaults":{"bgcolor":"#506784","borderwidth":0},"xaxis":{"automargin":true,"gridcolor":"#283442","linecolor":"#506784","ticks":"","title":{"standoff":15},"zerolinecolor":"#283442","zerolinewidth":2},"yaxis":{"automargin":true,"gridcolor":"#283442","linecolor":"#506784","ticks":"","title":{"standoff":15},"zerolinecolor":"#283442","zerolinewidth":2}}},"margin":{"l":50,"r":50,"t":50,"b":50,"pad":10},"yaxis":{"title":{"text":"Score (%)"},"range":[0,105],"fixedrange":true},"xaxis":{"title":{"text":"Task"},"fixedrange":true},"legend":{"orientation":"h","yanchor":"bottom","y":1.05,"xanchor":"center","x":0.5},"modebar":{"remove":["autoScale2d","autoscale","editInChartStudio","editinchartstudio","hoverCompareCartesian","hovercompare","lasso","lasso2d","orbitRotation","orbitrotation","pan","pan2d","pan3d","reset","resetCameraDefault3d","resetCameraLastSave3d","resetGeo","resetSankeyGroup","resetScale2d","resetViewMap","resetViewMapbox","resetViews","resetcameradefault","resetcameralastsave","resetsankeygroup","resetscale","resetview","resetviews","select","select2d","sendDataToCloud","senddatatocloud","tableRotation","tablerotation","toImage","toggleHover","toggleSpikelines","togglehover","togglespikelines","toimage","zoom","zoom2d","zoom3d","zoomIn2d","zoomInGeo","zoomInMap","zoomInMapbox","zoomOut2d","zoomOutGeo","zoomOutMap","zoomOutMapbox","zoomin","zoomout"]},"barmode":"group","height":400,"showlegend":true},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('f57c9335-f6b7-416b-ba77-e8f2b57ff706');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
<figcaption class="quarto-float-caption-margin quarto-float-caption quarto-float-fig margin-caption" id="fig-gpt-4o-mini-best-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Overall results for GPT-4o-mini.
</figcaption>
</figure>
</div>
</div>
<p>For <strong>GSM8K</strong> and <strong>Last Letter</strong>, structured and unstructured methods scored similarly. But for <strong>Shuffled Objects</strong>, unstructured outputs clearly surpassed a structured format.</p>
<p>The rest of the article will explain the approach I took to get these results.</p>
</section>
<section id="study-design" class="level2">
<h2 class="anchored" data-anchor-id="study-design">Study design</h2>
<p>Tam et al.&nbsp;evaluated structured and unstructured outputs across three reasoning tasks and six classification tasks. They used exact match to evaluate the reasoning tasks and accuracy to evaluate the classification tasks. They ran the experiments using the following models:</p>
<ol type="1">
<li><strong>Proprietary models</strong>: <em>gpt-3.5-turbo-0125</em>, <em>claude-3-haiku-20240307</em>, <em>gemini-1.5-flash</em>, and <em>gpt-4o-mini-2024-07-18</em>.</li>
<li><strong>Open-weight models</strong>: <em>LLaMA3-8B-Instruct</em>, and <em>Gemma-2-9B-Instruct</em>.</li>
</ol>
<p>.txt used a similar setup, but only focused on the reasoning tasks using <em>LLaMA3-8B-Instruct</em>. They did not include classification tasks because Tam et al.&nbsp;observed that structured outputs resulted in better performance in these tasks, so there was no need to test for it.</p>
<p>I also believe that structured outputs are better for classification tasks. So, I excluded them from my analysis as well.</p>
<p>The reasoning tasks were:</p>
<ol type="1">
<li><a href="https://huggingface.co/datasets/openai/gsm8k">GSM8K</a>: A dataset from of grade school math word problems.</li>
<li><a href="https://huggingface.co/datasets/ChilleD/LastLetterConcat">Last Letter</a>: A dataset of simple word puzzles that require concatening the last letters of a list of names.</li>
<li><a href="https://github.com/google/BIG-bench/tree/main/bigbench/benchmark_tasks/tracking_shuffled_objects">Shuffled Objects</a>: A dataset that requires reasoning about the state of a system after a sequence of shuffling operations.</li>
</ol>
<p>The rest of the article details the process of replicating .txt’s rebuttal on these tasks and evaluating the same tasks using <em>GPT-4o-mini</em>.</p>
</section>
<section id="replicating-.txts-rebuttal" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="replicating-.txts-rebuttal">Replicating .txt’s rebuttal</h2>
<p>.txt made it very easy to reproduce their results by sharing their <a href="https://github.com/dottxt-ai/demos/tree/main/say-what-you-mean">code on Github</a>. I just set up a machine at <a href="https://modal.com/">Modal</a> and ran the code.</p>
<p>While going through the code, I noticed some small issues with the prompts. So I decided to tweak them a bit.</p>
<p>Below are .txt’s original results compared to mine, after the prompt adjustments:</p>
<div class="cell page-columns page-full" data-execution_count="2">
<div id="tbl-llama-3-8b-instruct" class="cell quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-execution_count="2">
<figure class="quarto-float quarto-float-tbl figure page-columns page-full">
<div aria-describedby="tbl-llama-3-8b-instruct-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output cell-output-display" data-execution_count="35">
<style type="text/css">
</style>

<table id="T_83ac5" class="do-not-create-environment cell table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th id="T_83ac5_level0_col0" class="col_heading level0 col0" data-quarto-table-cell-role="th">Task</th>
<th colspan="2" id="T_83ac5_level0_col1" class="col_heading level0 col1" data-quarto-table-cell-role="th">.txt</th>
<th colspan="2" id="T_83ac5_level0_col3" class="col_heading level0 col3" data-quarto-table-cell-role="th">me, 3-shot</th>
</tr>
<tr class="even">
<th id="T_83ac5_level1_col0" class="col_heading level1 col0" data-quarto-table-cell-role="th"></th>
<th id="T_83ac5_level1_col1" class="col_heading level1 col1" data-quarto-table-cell-role="th">Unstructured</th>
<th id="T_83ac5_level1_col2" class="col_heading level1 col2" data-quarto-table-cell-role="th">Structured</th>
<th id="T_83ac5_level1_col3" class="col_heading level1 col3" data-quarto-table-cell-role="th">Unstructured</th>
<th id="T_83ac5_level1_col4" class="col_heading level1 col4" data-quarto-table-cell-role="th">Structured</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td id="T_83ac5_row0_col0" class="data row0 col0">GSM8K</td>
<td id="T_83ac5_row0_col1" class="data row0 col1">77.18</td>
<td id="T_83ac5_row0_col2" class="data row0 col2">77.79</td>
<td id="T_83ac5_row0_col3" class="data row0 col3">79.98</td>
<td id="T_83ac5_row0_col4" class="data row0 col4">79.45</td>
</tr>
<tr class="even">
<td id="T_83ac5_row1_col0" class="data row1 col0">Last Letter</td>
<td id="T_83ac5_row1_col1" class="data row1 col1">73.33</td>
<td id="T_83ac5_row1_col2" class="data row1 col2">77.33</td>
<td id="T_83ac5_row1_col3" class="data row1 col3">74.00</td>
<td id="T_83ac5_row1_col4" class="data row1 col4">78.00</td>
</tr>
<tr class="odd">
<td id="T_83ac5_row2_col0" class="data row2 col0">Shuffled Objects</td>
<td id="T_83ac5_row2_col1" class="data row2 col1">40.72</td>
<td id="T_83ac5_row2_col2" class="data row2 col2">44.35</td>
<td id="T_83ac5_row2_col3" class="data row2 col3">42.68</td>
<td id="T_83ac5_row2_col4" class="data row2 col4">43.90</td>
</tr>
</tbody>
</table>
</div>
</div>
<figcaption class="quarto-float-caption-margin quarto-float-caption quarto-float-tbl margin-caption" id="tbl-llama-3-8b-instruct-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;1: Results for LLaMA3-8B-Instruct.
</figcaption>
</figure>
</div>
</div>
<p>Except for <strong>Structured</strong> in the <strong>Shuffled Objects</strong> task, I was able to improve all the metrics. In <strong>GSM8K’s</strong> case, even reversing .txt’s result, with <strong>Unstructured</strong> outperforming <strong>Structured</strong> by a small margin.</p>
<p>But I don’t think this matters much.</p>
<p>Their conclusion still holds: structured outputs are either as good as or better than unstructured outputs, in the tasks considered.</p>
<p>I’ll explain the prompt changes I made below, so that you can judge for yourself if they make sense.</p>
<section id="formatting-few-shot-examples" class="level3">
<h3 class="anchored" data-anchor-id="formatting-few-shot-examples">Formatting few-shot examples</h3>
<p>In the <strong>GSM8K</strong> and <strong>Last Letter</strong> tasks, the few-shot prompt for both unstructured and structured used examples formatted as JSON objects and asked the LLM to produce the output in the same format, from which the answer was extracted.</p>
<p>That felt unfair. Even though you’re not formally constraining the LLM to produce a JSON object, you’re still asking it to format its response in somewhat unnatural way.</p>
<p>I adjusted the prompts to be as similar as possible for both unstructured and structured outputs while still trying to get the most out of each approach.</p>
<p>For example, in <strong>GSM8K</strong>, the unstructured prompt is:</p>
<blockquote class="blockquote">
<p>You are an expert in solving grade school math tasks. You will be presented with a grade-school math word problem and be asked to solve it. You will always respond in the following format:</p>
<p>&lt;str, reasoning about the answer&gt;</p>
<p>ANSWER: &lt;int, final answer&gt;</p>
<p>First, provide your step by step reasoning. Then, in ANSWER, provide an integer that corresponds to the correct answer to the question. Don’t include any other text in ANSWER.</p>
</blockquote>
<p>And the structured prompt is:</p>
<blockquote class="blockquote">
<p>You are an expert in solving grade school math tasks. You will be presented with a grade-school math word problem and be asked to solve it. You will always respond in the following format:</p>
<p>{“reasoning”: &lt;str, reasoning about the answer&gt;, “answer”: &lt;int, final answer&gt;}</p>
<p>First, provide your step by step reasoning in the “reasoning” field. Then, in the “answer” field, provide an integer that corresponds to the correct answer to the question. Don’t include any other text in the “answer” field.</p>
</blockquote>
<p>Finally, for all the tasks, I used a 3-shot prompt.</p>
</section>
<section id="clarifying-the-task" class="level3">
<h3 class="anchored" data-anchor-id="clarifying-the-task">Clarifying the task</h3>
<p>I also tried to make the prompts clearer. The description of the task in the original <strong>Last Letter</strong> prompt was:</p>
<blockquote class="blockquote">
<p>You are an expert in solving simple word puzzles using reasoning steps. Your specific task is going to be to take a list of 4 names and reason about the last letter of each ., then you will concatenate those letters into a word.</p>
</blockquote>
<p>I changed it to:</p>
<blockquote class="blockquote">
<p>You are an expert in solving word puzzles. Your specific task is going to be to take a list of 4 names, get the last letter of each and concatenate these letters into a word.</p>
</blockquote>
<p>The original prompt was reasonable, but I thought the new version was clearer. Through trial and error, I’ve learned that when working with LLMs, it’s best to be as clear and direct as possible.</p>
</section>
</section>
<section id="evaluating-gpt-4o-mini" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="evaluating-gpt-4o-mini">Evaluating GPT-4o-mini</h2>
<p>Using the same setup as before, I ran the same tasks with <code>gpt-4o-mini-2024-07-18</code>.</p>
<p>In the table below, you can see the results, including the original results from Tam et al.&nbsp;for comparison:</p>
<div class="cell page-columns page-full" data-execution_count="3">
<div id="tbl-gpt-4o-mini" class="cell quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-execution_count="3">
<figure class="quarto-float quarto-float-tbl figure page-columns page-full">
<div aria-describedby="tbl-gpt-4o-mini-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output cell-output-display" data-execution_count="36">
<style type="text/css">
</style>

<table id="T_769d4" class="do-not-create-environment cell table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="blank" data-quarto-table-cell-role="th">&nbsp;</th>
<th class="blank level0" data-quarto-table-cell-role="th">&nbsp;</th>
<th id="T_769d4_level0_col0" class="col_heading level0 col0" data-quarto-table-cell-role="th">NL</th>
<th id="T_769d4_level0_col1" class="col_heading level0 col1" data-quarto-table-cell-role="th">FRI</th>
<th id="T_769d4_level0_col2" class="col_heading level0 col2" data-quarto-table-cell-role="th">JSON-Mode</th>
<th id="T_769d4_level0_col3" class="col_heading level0 col3" data-quarto-table-cell-role="th">JSON-Schema</th>
</tr>
<tr class="even">
<th class="index_name level0" data-quarto-table-cell-role="th">Task</th>
<th class="index_name level1" data-quarto-table-cell-role="th">Method</th>
<th class="blank col0" data-quarto-table-cell-role="th">&nbsp;</th>
<th class="blank col1" data-quarto-table-cell-role="th">&nbsp;</th>
<th class="blank col2" data-quarto-table-cell-role="th">&nbsp;</th>
<th class="blank col3" data-quarto-table-cell-role="th">&nbsp;</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td rowspan="3" id="T_769d4_level0_row0" class="row_heading level0 row0" data-quarto-table-cell-role="th">GSM8K</td>
<td id="T_769d4_level1_row0" class="row_heading level1 row0" data-quarto-table-cell-role="th">Tam et al.</td>
<td id="T_769d4_row0_col0" class="data row0 col0">94.57</td>
<td id="T_769d4_row0_col1" class="data row0 col1">87.17</td>
<td id="T_769d4_row0_col2" class="data row0 col2">86.95</td>
<td id="T_769d4_row0_col3" class="data row0 col3">91.71</td>
</tr>
<tr class="even">
<td id="T_769d4_level1_row1" class="row_heading level1 row1" data-quarto-table-cell-role="th">Me, 0-shot</td>
<td id="T_769d4_row1_col0" class="data row1 col0">94.31</td>
<td id="T_769d4_row1_col1" class="data row1 col1">92.12</td>
<td id="T_769d4_row1_col2" class="data row1 col2">93.33</td>
<td id="T_769d4_row1_col3" class="data row1 col3">93.48</td>
</tr>
<tr class="odd">
<td id="T_769d4_level1_row2" class="row_heading level1 row2" data-quarto-table-cell-role="th">Me, 3-shot</td>
<td id="T_769d4_row2_col0" class="data row2 col0">93.86</td>
<td id="T_769d4_row2_col1" class="data row2 col1">92.72</td>
<td id="T_769d4_row2_col2" class="data row2 col2">93.25</td>
<td id="T_769d4_row2_col3" class="data row2 col3">92.95</td>
</tr>
<tr class="even">
<td rowspan="3" id="T_769d4_level0_row3" class="row_heading level0 row3" data-quarto-table-cell-role="th">Last Letter</td>
<td id="T_769d4_level1_row3" class="row_heading level1 row3" data-quarto-table-cell-role="th">Tam et al.</td>
<td id="T_769d4_row3_col0" class="data row3 col0">83.11</td>
<td id="T_769d4_row3_col1" class="data row3 col1">84.73</td>
<td id="T_769d4_row3_col2" class="data row3 col2">76.00</td>
<td id="T_769d4_row3_col3" class="data row3 col3">86.07</td>
</tr>
<tr class="odd">
<td id="T_769d4_level1_row4" class="row_heading level1 row4" data-quarto-table-cell-role="th">Me, 0-shot</td>
<td id="T_769d4_row4_col0" class="data row4 col0">87.33</td>
<td id="T_769d4_row4_col1" class="data row4 col1">88.00</td>
<td id="T_769d4_row4_col2" class="data row4 col2">90.00</td>
<td id="T_769d4_row4_col3" class="data row4 col3">87.33</td>
</tr>
<tr class="even">
<td id="T_769d4_level1_row5" class="row_heading level1 row5" data-quarto-table-cell-role="th">Me, 3-shot</td>
<td id="T_769d4_row5_col0" class="data row5 col0">92.00</td>
<td id="T_769d4_row5_col1" class="data row5 col1">94.67</td>
<td id="T_769d4_row5_col2" class="data row5 col2">90.00</td>
<td id="T_769d4_row5_col3" class="data row5 col3">93.33</td>
</tr>
<tr class="odd">
<td rowspan="3" id="T_769d4_level0_row6" class="row_heading level0 row6" data-quarto-table-cell-role="th">Shuffled Obj.</td>
<td id="T_769d4_level1_row6" class="row_heading level1 row6" data-quarto-table-cell-role="th">Tam et al.</td>
<td id="T_769d4_row6_col0" class="data row6 col0">82.85</td>
<td id="T_769d4_row6_col1" class="data row6 col1">81.46</td>
<td id="T_769d4_row6_col2" class="data row6 col2">76.43</td>
<td id="T_769d4_row6_col3" class="data row6 col3">81.77</td>
</tr>
<tr class="even">
<td id="T_769d4_level1_row7" class="row_heading level1 row7" data-quarto-table-cell-role="th">Me, 0-shot</td>
<td id="T_769d4_row7_col0" class="data row7 col0">95.12</td>
<td id="T_769d4_row7_col1" class="data row7 col1">79.67</td>
<td id="T_769d4_row7_col2" class="data row7 col2">81.71</td>
<td id="T_769d4_row7_col3" class="data row7 col3">89.84</td>
</tr>
<tr class="odd">
<td id="T_769d4_level1_row8" class="row_heading level1 row8" data-quarto-table-cell-role="th">Me, 3-shot</td>
<td id="T_769d4_row8_col0" class="data row8 col0">92.68</td>
<td id="T_769d4_row8_col1" class="data row8 col1">69.51</td>
<td id="T_769d4_row8_col2" class="data row8 col2">62.60</td>
<td id="T_769d4_row8_col3" class="data row8 col3">65.85</td>
</tr>
</tbody>
</table>
</div>
</div>
<figcaption class="quarto-float-caption-margin quarto-float-caption quarto-float-tbl margin-caption" id="tbl-gpt-4o-mini-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;2: Results for GPT-4o-mini.
</figcaption>
</figure>
</div>
</div>
<p><em>NL</em> stands for “Natural Language”, which would correspond to the <em>Unstructured</em> method in the previous table.</p>
<p><em>FRI</em> stands for “Format Restricting Instructions”, which is a JSON generated through the OpenAI’s <a href="https://platform.openai.com/docs/guides/function-calling">function calling</a>. <em>JSON-Mode</em> is a JSON generated through the OpenAI’s <a href="https://platform.openai.com/docs/guides/structured-outputs#json-mode">JSON mode</a>. <em>JSON-Schema</em> is a JSON generated using <a href="https://openai.com/index/introducing-structured-outputs-in-the-api/">constrained decoding</a>.</p>
<p><em>JSON-Schema</em> is the closest equivalent to <strong>Structured</strong> as referenced in the previous table. But, in real-life applications, you don’t really care about how the output was generated. You just want to get the output in the format you want. So, for the sake of comparison, I will consider the three other methods equivalent to <strong>Structured</strong> as well.</p>
<section id="adjusting-for-proprietary-models" class="level3">
<h3 class="anchored" data-anchor-id="adjusting-for-proprietary-models">Adjusting for proprietary models</h3>
<p>In this case, I allowed for 3 retries in the case of parsing errors. I allowed for this because function calling had high error rates in the zero-shot prompting scenario.</p>
<p>These retries primarily affected <strong>FRI</strong> results. This might make the comparisons in <strong>Last Letter</strong> biased in favor of structured outputs (<strong>FRI</strong> was the best method in this case). But since <strong>JSON-Schema</strong> also outperformed <strong>NL</strong> in this case, this adjustment does not alter the overall conclusions. The other methods maintained error rates of &lt;0.5% in <strong>GSM8K</strong> and 0% in <strong>Last Letter</strong> and <strong>Shuffled Objects</strong>.</p>
<p>I used slightly different parsing functions for <strong>Unstructured</strong> and <strong>Structured</strong> outputs. The <strong>Unstructured</strong> parser was more lenient, removing commas and periods at the end of responses. But I believe this remains a fair comparison given that in the <strong>Structured</strong> cases you provide a JSON schema which is more informative.</p>
</section>
<section id="analyzing-the-results" class="level3">
<h3 class="anchored" data-anchor-id="analyzing-the-results">Analyzing the results</h3>
<p>Similar to what the .txt team found, after adjusting the prompts, the performance of structured outputs increases substantially compared to Tam et al.</p>
<p>Except for <em>NL</em> in <strong>GSM8k</strong> and <em>FRI</em> in <strong>Last Letter</strong>, I was able to improve all the metrics for both unstructured and structured outputs using a 0-shot prompt. For 3-shot prompts, I improved <strong>GSM8k</strong> and <strong>Last Letter</strong> across all methods, and <em>NL</em> in <strong>Shuffled Objects</strong>.</p>
<p>For <strong>GSM8k</strong> and <strong>Last Letter</strong>, the results were very similar between unstructured and structured outputs. There was a slight edge for unstructured outputs in <strong>GSM8k</strong> and for structured outputs in <strong>Last Letter</strong>. In these cases, it’s not clear that one approach definitively outperforms the other.</p>
<p>On the other hand, <strong>Shuffled Objects</strong> shows a clear advantage for unstructured outputs over structured outputs. This was unexpected, and even after tweaking the prompts, I couldn’t fully close the gap.</p>
<p>Despite the issues in Tam et al.’s study, their conclusion appears to hold. In this particular scenario, using a fairly popular model with reasonable prompts, there is a significant difference in performance between structured and unstructured outputs.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>In <strong>GSM8k</strong> and <strong>Last Letter</strong>, few-shot prompting generally decreased performance. This is in line with <a href="https://python.useinstructor.com/blog/2024/09/26/bad-schemas-could-break-your-llm-structured-outputs/?h=bad+sc#modes-and-models">other analyses</a>.</p>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>You’re here because you want to know whether to use structured or unstructured outputs. As a developer, I’m glad to say the answer is: <a href="https://www.reddit.com/r/orlybooks/comments/50meb5/it_depends/">it depends</a>.</p>
<p>I love using structured outputs in my daily work, because it makes it much easier to work with the output of LLMs. I always encourage <a href="https://iwanalabs.com/">clients</a> who aren’t using them yet to give them a try.</p>
<p>That said, until there’s stronger evidence showing that both approaches are equivalent, the best course of action is to test things for yourself. Run your own <a href="https://hamel.dev/blog/posts/evals/">evals</a> and make a decision based on data.</p>
<p>I expect that in most cases, structured outputs will have similar performance to unstructured outputs. But, if you blindly assume that structured outputs are always equal to or better than unstructured ones, you might be missing out on easy performance gains.</p>
<p>Take the example of <strong>Shuffled Objects</strong> with <em>GPT-4o-mini</em>. You could potentially reduce the gap between the two methods by continuing improving the prompts or by switching to a more powerful model. But the costs, in terms of time and effort, might be more than simply switching to unstructured outputs.</p>
<p>And this cuts both ways. Unstructured outputs aren’t inherently better or worse than structured ones. Again, the right choice depends on your task, the model, and your prompt engineering skills. Test both approaches, identify if there are differences, and choose what works best.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Although, they’ve also <a href="https://blog.dottxt.co/performance-gsm8k.html">shared results</a> of other open-weight models using a different setup.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Structured Outputs Can Hurt the Performance of {LLMs}},
  date = {2024-12-08},
  url = {https://dylancastillo.co/posts/say-what-you-mean-sometimes.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Structured Outputs Can Hurt the
Performance of LLMs.”</span> December 8, 2024. <a href="https://dylancastillo.co/posts/say-what-you-mean-sometimes.html">https://dylancastillo.co/posts/say-what-you-mean-sometimes.html</a>.
</div></div></section></div> ]]></description>
  <category>llm</category>
  <category>openai</category>
  <category>pydantic</category>
  <category>python</category>
  <guid>https://dylancastillo.co/posts/say-what-you-mean-sometimes.html</guid>
  <pubDate>Sun, 08 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Transform any image to WebP from the terminal</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/til/transforming-images-to-webp.html</link>
  <description><![CDATA[ 




<p>I was annoyed by the file size of my photo in the <a href="https://dylanjcastillo.com/about/">About page</a>, because it was slowing down the page load.</p>
<p>Is it important? No.</p>
<p>Don’t I have better things to do on a Saturday afternoon? Yes.</p>
<p>But it’s like going to bed with the closet door open—you know there’s nothing in there, but you just can’t shake the feeling that the devil (or <a href="https://es.wikipedia.org/wiki/Diosdado_Cabello">Diosdado Cabello</a>) might jump out and kill you in your sleep unless you get up and shut it.</p>
<p>So I got o1-mini to write a simple script for me, and thought others might find it useful.</p>
<p>Here it is:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> img2webp()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the input file is provided or if help is requested</span></span>
<span id="cb1-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$#</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-lt</span> 1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--help"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-h"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb1-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Usage: img2webp input_image [quality]"</span></span>
<span id="cb1-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  input_image: Path to the input image file"</span></span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  quality: Quality of the output WebP image (0-100, default is 80)"</span></span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb1-10"></span>
<span id="cb1-11">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">input</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-12">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">quality</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:-</span>80<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default quality is 80 if not specified</span></span>
<span id="cb1-13">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">output</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${input</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>.<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.webp"</span></span>
<span id="cb1-14"></span>
<span id="cb1-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to WebP using ffmpeg</span></span>
<span id="cb1-16">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ffmpeg</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$input</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-qscale:v</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$quality</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$output</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-17"></span>
<span id="cb1-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the conversion was successful</span></span>
<span id="cb1-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$?</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-eq</span> 0 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb1-20">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Successfully converted '</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$input</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' to '</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$output</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' with quality </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$quality</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span></span>
<span id="cb1-21">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb1-22">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to convert '</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$input</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' to WebP."</span></span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb1-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span></code></pre></div>
<p>If you’re using MacOS, you first need to install <code>ffmpeg</code> using Homebrew:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install ffmpeg</span></code></pre></div>
<p>Then you can add it to your <code>.zshrc</code> and use it by running <code>img2webp &lt;path_to_image&gt; [quality]</code>.</p>
<p>Just as reference, keeping the same quality, I decreased my profile picture from 234KB to 36KB by just changing from PNG to WebP.</p>
<p>Hope you found this useful.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Transform Any Image to {WebP} from the Terminal},
  date = {2024-11-23},
  url = {https://dylancastillo.co/til/transforming-images-to-webp.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Transform Any Image to WebP from the
Terminal.”</span> November 23, 2024. <a href="https://dylancastillo.co/til/transforming-images-to-webp.html">https://dylancastillo.co/til/transforming-images-to-webp.html</a>.
</div></div></section></div> ]]></description>
  <category>til</category>
  <category>webp</category>
  <category>bash</category>
  <category>ffmpeg</category>
  <guid>https://dylancastillo.co/til/transforming-images-to-webp.html</guid>
  <pubDate>Sat, 23 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Structured outputs: don’t put the cart before the horse</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/llm-pydantic-order-matters.html</link>
  <description><![CDATA[ 




<p>Not long ago, you couldn’t reliably ask an LLM to provide you with a response using a specific format. Building tools that used LLM outputs was painful.</p>
<p>Then, through <a href="https://platform.openai.com/docs/guides/function-calling">function calling</a> and <a href="https://platform.openai.com/docs/guides/structured-outputs">structured outputs</a>, we could instruct LLMs to respond in specific formats<sup>1</sup>. So, extracting information from LLM outputs stopped being a problem.</p>
<p>But then I started noticing that structured outputs also had their <a href="https://arxiv.org/abs/2408.02442">own set</a> <a href="https://arxiv.org/abs/2403.06988">of problems</a>. Most importantly, the apparent rigidity of a Pydantic model can make you forget that underneath, you’re still dealing with an LLM. Setting up a response model for your API calls is not the same as setting up a response model for your LLM outputs.</p>
<p>For example, take the following question from the <a href="https://huggingface.co/datasets/livebench/reasoning">LiveBench</a> dataset:</p>
<blockquote class="blockquote">
<p>Suppose I have a physical, solid, equilateral triangle, and I make two cuts. The two cuts are from two parallel lines, and both cuts pass through the interior of the triangle. How many pieces are there after the cuts? Think step by step, and then put your answer in <strong>bold</strong> as a single integer (for example, <strong>0</strong>). If you don’t know, guess.</p>
</blockquote>
<p>Let’s say I write a simple system prompt and two Pydantic models to format the responses:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">system_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb1-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You're a helpful assistant. You will help me answer a question."</span></span>
<span id="cb1-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You will use this JSON schema for your response:"</span></span>
<span id="cb1-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{response_format}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-5">)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ResponseFormatA(BaseModel):</span>
<span id="cb1-8">    reasoning: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb1-9">    answer: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ResponseFormatB(BaseModel):</span>
<span id="cb1-12">    answer: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb1-13">    reasoning: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span></code></pre></div>
<p>Do you think that there will be a difference in performance between <code>ResponseFormatA</code> and <code>ResponseFormatB</code>? If so, which one do you think will perform better?</p>
<p>Not sure? Well, you’re in luck! Let’s run some experiments to find out.</p>
<section id="set-up-the-environment" class="level2">
<h2 class="anchored" data-anchor-id="set-up-the-environment">Set up the environment</h2>
<p>First, start by importing the necessary libraries:</p>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> asyncio <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Semaphore</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb2-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langsmith <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> traceable</span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langsmith.wrappers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wrap_openai</span>
<span id="cb2-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AsyncOpenAI</span>
<span id="cb2-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel</span>
<span id="cb2-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb2-15"></span>
<span id="cb2-16">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb2-17"></span>
<span id="cb2-18">load_dotenv()</span>
<span id="cb2-19"></span>
<span id="cb2-20">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrap_openai(AsyncOpenAI())</span></code></pre></div>
</div>
<p>This will set up all the necessary infrastructure to run the experiments. I like using <a href="https://www.langchain.com/langsmith">LangSmith</a> to track <a href="https://smith.langchain.com/public/11545ceb-70d3-4213-9f05-89891586b809/r?runtab=0">runs</a>.</p>
<p>To run the experiment, you need some data. I ended up using a subset of the <a href="https://huggingface.co/datasets/livebench/reasoning">reasoning questions</a> from LiveBench. You can download it and save it in the <code>data</code> directory.</p>
<p>Then, you can read it into a pandas <code>DataFrame</code>:</p>
<div id="cell-7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">data_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path().absolute().parent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"live_bench"</span></span>
<span id="cb3-2">reasoning_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reasoning"</span></span>
<span id="cb3-3">live_bench_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reasoning_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question.jsonl"</span></span>
<span id="cb3-4"></span>
<span id="cb3-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb3-6">    pd.read_json(live_bench_json, lines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-7">    .query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"livebench_release_date == '2024-07-26'"</span>)</span>
<span id="cb3-8">    .assign(</span>
<span id="cb3-9">        turns_str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.turns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], </span>
<span id="cb3-10">        expects_integer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.turns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer"</span>, case<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb3-11">    )</span>
<span id="cb3-12">    .reset_index()</span>
<span id="cb3-13">    .rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data_point_id"</span>})</span>
<span id="cb3-14">)</span></code></pre></div>
</div>
<p>Next, define the system prompt and the Pydantic models you’ll use to format the responses:</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">system_prompt_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb4-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You're a helpful assistant. You will help me answer a question."</span></span>
<span id="cb4-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You will use this JSON schema for your response:"</span></span>
<span id="cb4-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{response_format}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-5">)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ResponseFormatA(BaseModel):</span>
<span id="cb4-8">    reasoning: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb4-9">    answer: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> </span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ResponseFormatB(BaseModel):</span>
<span id="cb4-12">    answer: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> </span>
<span id="cb4-13">    reasoning: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span></code></pre></div>
</div>
<p>In the system prompt you send to the LLM, you’ll replace <code>{response_format}</code> with the JSON schema of the response format you want to use.</p>
<p>Then, let’s define a few helper functions to run the experiment:</p>
<div id="cell-11" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> validate_response(response_json, response_format):</span>
<span id="cb5-2">    response_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response_json)</span>
<span id="cb5-3">    expected_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(response_format.model_json_schema()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>].keys())</span>
<span id="cb5-4">    actual_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(response_dict.keys())</span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> actual_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> expected_keys:</span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Response keys </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>actual_keys<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> do not match expected keys </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>expected_keys<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response_format.model_validate_json(response_json)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@traceable</span></span>
<span id="cb5-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> process_row(</span>
<span id="cb5-11">    row: pd.Series, </span>
<span id="cb5-12">    response_format: ResponseFormatA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> ResponseFormatB, </span>
<span id="cb5-13">    semaphore: Semaphore</span>
<span id="cb5-14">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> ResponseFormatA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> ResponseFormatB:</span>
<span id="cb5-15">    system_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> system_prompt_template.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(</span>
<span id="cb5-16">        response_format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>response_format.model_json_schema()</span>
<span id="cb5-17">    )</span>
<span id="cb5-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> semaphore:</span>
<span id="cb5-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb5-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb5-21">                response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> client.chat.completions.create(</span>
<span id="cb5-22">                    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4o"</span>, </span>
<span id="cb5-23">                    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb5-24">                        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: system_prompt},</span>
<span id="cb5-25">                        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Question:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>turns_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>}</span>
<span id="cb5-26">                    ],</span>
<span id="cb5-27">                    response_format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"json_object"</span>}</span>
<span id="cb5-28">                )</span>
<span id="cb5-29">                response_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content</span>
<span id="cb5-30">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> validate_response(response_json, response_format)</span>
<span id="cb5-31">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>:</span>
<span id="cb5-32">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb5-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to generate a valid response"</span>)</span>
<span id="cb5-34"></span>
<span id="cb5-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@traceable</span></span>
<span id="cb5-36"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main(df, response_format, concurrency: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>):</span>
<span id="cb5-37">    semaphore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Semaphore(concurrency)</span>
<span id="cb5-38">    tasks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [process_row(row, response_format, semaphore) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.iterrows()]</span>
<span id="cb5-39">    responses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> asyncio.gather(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tasks)</span>
<span id="cb5-40"></span>
<span id="cb5-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> responses</span>
<span id="cb5-42"></span>
<span id="cb5-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> extract_answer(answer):</span>
<span id="cb5-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(answer).replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>).strip()</span></code></pre></div>
</div>
<p>In this code, <code>validate_response</code> is used to check if the response is valid (i.e.&nbsp;it matches the JSON schema in the same order). If it is, it returns the response. Otherwise, it raises an exception.</p>
<p><code>extract_answer</code> is used to remove ** from the answer if it exists in the response. Some of the questions in the LiveBench dataset included instructions to put the answer in bold, which is why we need to remove it.</p>
<p><code>process_row</code> is used to process a single row of the DataFrame. It sends the system prompt to the LLM and validates the response. It includes a simple retry mechanism in case the validation fails. Each run is tracked in LangSmith.</p>
<p>Finally, <code>main</code> is used to run the experiment. It runs the <code>process_row</code> function concurrently for each row in the DataFrame.</p>
</section>
<section id="running-the-experiment" class="level2">
<h2 class="anchored" data-anchor-id="running-the-experiment">Running the experiment</h2>
<p>Now, you can run the experiment using the two response formats:</p>
<div id="cell-14" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">n_runs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb6-2">df_runs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> run <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_runs):</span>
<span id="cb6-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Run </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-6">    df_copy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.copy()</span>
<span id="cb6-7">    </span>
<span id="cb6-8">    responses_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> asyncio.run(main(df_copy, ResponseFormatA))</span>
<span id="cb6-9">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_answer_A"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [r.answer <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> responses_A]</span>
<span id="cb6-10">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response_A"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_answer_A"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(extract_answer)</span>
<span id="cb6-11">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_correct_A"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response_A"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ground_truth"</span>]).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb6-12">    </span>
<span id="cb6-13">    responses_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> asyncio.run(main(df_copy, ResponseFormatB))</span>
<span id="cb6-14">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_answer_B"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [r.answer <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> responses_B]</span>
<span id="cb6-15">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response_B"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_answer_B"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(extract_answer)</span>
<span id="cb6-16">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_correct_B"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response_B"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ground_truth"</span>]).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb6-17">    </span>
<span id="cb6-18">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"run"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run</span>
<span id="cb6-19">    df_run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data_point_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ground_truth"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_correct_A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_correct_B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"run"</span>]]</span>
<span id="cb6-20">    </span>
<span id="cb6-21">    df_runs.append(df_run)</span></code></pre></div>
</div>
<p>We run the experiment multiple times with the same inputs to account for the randomness in the LLM’s responses. Ideally, we should run it more than three times, but I’m poor. So, we’ll just do it 3 times.</p>
<div id="cell-16" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">df_all_runs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(df_runs, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3">n_bootstraps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb7-4">bootstrap_accuracies_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-5">bootstrap_accuracies_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-6"></span>
<span id="cb7-7">data_point_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_all_runs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data_point_id'</span>].unique()</span>
<span id="cb7-8">n_data_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_point_ids)</span>
<span id="cb7-9"></span>
<span id="cb7-10">grouped_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_all_runs.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data_point_id'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_correct_A'</span>]</span>
<span id="cb7-11">grouped_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_all_runs.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data_point_id'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_correct_B'</span>]</span>
<span id="cb7-12"></span>
<span id="cb7-13">df_correct_counts_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grouped_A.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-14">df_total_counts_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grouped_A.count()</span>
<span id="cb7-15">df_correct_counts_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grouped_B.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-16">df_total_counts_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grouped_B.count()</span>
<span id="cb7-17"></span>
<span id="cb7-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_bootstraps):</span>
<span id="cb7-19">    sampled_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(data_point_ids, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_data_points, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-20">    sampled_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(sampled_ids).value_counts()</span>
<span id="cb7-21">    counts_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sampled_counts.index</span>
<span id="cb7-22">    </span>
<span id="cb7-23">    total_correct_counts_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_correct_counts_A.loc[counts_index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sampled_counts).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-24">    total_observations_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_total_counts_A.loc[counts_index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sampled_counts).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-25">    mean_accuracy_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_correct_counts_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_observations_A</span>
<span id="cb7-26">    bootstrap_accuracies_A.append(mean_accuracy_A)</span>
<span id="cb7-27">    </span>
<span id="cb7-28">    total_correct_counts_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_correct_counts_B.loc[counts_index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sampled_counts).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-29">    total_observations_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_total_counts_B.loc[counts_index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sampled_counts).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-30">    mean_accuracy_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_correct_counts_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_observations_B</span>
<span id="cb7-31">    bootstrap_accuracies_B.append(mean_accuracy_B)</span>
<span id="cb7-32"></span>
<span id="cb7-33">ci_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.percentile(bootstrap_accuracies_A, [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">97.5</span>])</span>
<span id="cb7-34">ci_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.percentile(bootstrap_accuracies_B, [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">97.5</span>])</span>
<span id="cb7-35"></span>
<span id="cb7-36">mean_accuracy_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_all_runs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_correct_A'</span>].mean()</span>
<span id="cb7-37">mean_accuracy_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_all_runs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_correct_B'</span>].mean()</span>
<span id="cb7-38"></span>
<span id="cb7-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb7-40">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Response format A - Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_accuracy_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">% CI: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ci_A[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">% - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ci_A[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span>
<span id="cb7-41">)</span>
<span id="cb7-42"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb7-43">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Response format B - Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_accuracy_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">% CI: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ci_B[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">% - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ci_B[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span>
<span id="cb7-44">)</span></code></pre></div>
</div>
<p>Then, you can build bootstrap confidence intervals for the accuracies of the two response formats. Given that I’m asking the LLM the same question multiple times, I went with an approach called <a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC5965657/">cluster bootstrapping</a>, which accounts for the fact that the data points are not independent.</p>
<p>It should take a few seconds to run. Once it’s done, you should see output like the following:</p>
<table class="table">
<thead>
<tr class="header">
<th>Response Format</th>
<th>Accuracy (95% CI)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A</td>
<td>46.67% (35.33% – 58.00%)</td>
</tr>
<tr class="even">
<td>B</td>
<td>33.33% (22.67% – 44.67%)</td>
</tr>
</tbody>
</table>
<p>These results suggest that the order of the fields in the JSON schema does matter.</p>
<p>But if you’re still unsure, you can perform a t-test to see if the two response formats are statistically different:</p>
<div id="cell-18" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">accuracies_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_all_runs.pivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data_point_id'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'run'</span>, values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_correct_A'</span>)</span>
<span id="cb8-2">accuracies_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_all_runs.pivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data_point_id'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'run'</span>, values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_correct_B'</span>)</span>
<span id="cb8-3"></span>
<span id="cb8-4">mean_accuracies_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracies_A.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-5">mean_accuracies_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracies_B.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-6"></span>
<span id="cb8-7">t_stat, p_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.ttest_rel(mean_accuracies_A, mean_accuracies_B, alternative<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'greater'</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"t-statistic: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t_stat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, p-value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p_value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<p>I got a p-value &lt;0.01, meaning I can reject the null hypothesis that the two response formats are the same.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Based on the results of the experiment, we can safely say that <code>ResponseFormatA</code> is better than <code>ResponseFormatB</code>.</p>
<p>But why?</p>
<p>In this case, it’s simple.</p>
<p>These response formats are meant to help the LLM reason step by step to arrive at the answer. This is known as <a href="https://en.wikipedia.org/wiki/Chain_of_thought_reasoning">chain of thought reasoning</a>. However, for it to work, we need the LLM to first provide us with the reasoning of how it arrived at the answer and then the answer.</p>
<p>In <code>ResponseFormatA</code>, we defined our Pydantic model with the reasoning first and the answer second. This means that the LLM will give us the reasoning first, and then provide the answer. Which is exactly what we want.</p>
<p><code>ResponseFormatB</code> works in the opposite way. This means that the LLM will give us the answer first, and then provide the reasoning. So our chain of thought reasoning becomes a <a href="https://www.promptingguide.ai/techniques/zeroshot">zero-shot prompt</a>. In this case, the reasoning is a byproduct of the answer.</p>
<p>So, to summarize, when using structured outputs, don’t put the cart before the horse.</p>
<p>That’s all! Let me know if you have any questions in the comments.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I’m referring to OpenAI models here. Open weight models allowed this using <a href="https://github.com/ggerganov/llama.cpp/blob/master/grammars/README.md">grammars</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Structured Outputs: Don’t Put the Cart Before the Horse},
  date = {2024-11-09},
  url = {https://dylancastillo.co/posts/llm-pydantic-order-matters.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Structured Outputs: Don’t Put the Cart
Before the Horse.”</span> November 9, 2024. <a href="https://dylancastillo.co/posts/llm-pydantic-order-matters.html">https://dylancastillo.co/posts/llm-pydantic-order-matters.html</a>.
</div></div></section></div> ]]></description>
  <category>llm</category>
  <category>openai</category>
  <category>pydantic</category>
  <category>python</category>
  <guid>https://dylancastillo.co/posts/llm-pydantic-order-matters.html</guid>
  <pubDate>Sat, 09 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Deploying a FastAPI app with Kamal, AWS ECR, and Github Actions</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/deploy-a-fastapi-app-with-kamal-aws-ecr-and-github-actions.html</link>
  <description><![CDATA[ 




<p>These days I use Kamal to deploy my FastAPI (or Django) projects. Kamal is a simpler alternative to <a href="https://kubernetes.io/">Kubernetes</a> that you can use to deploy containerized apps to a <a href="https://en.wikipedia.org/wiki/Virtual_private_server">VPS</a>.</p>
<p>Once you get the hang of it, it’ll only take you a few minutes to set up a CI/CD pipeline that automatically deploys your app to production with each push to the <em>main</em> branch.</p>
<p>In this tutorial, I’ll walk you through the process of deploying a FastAPI app with Kamal, AWS ECR, and Github Actions.</p>
<p>You can find the code for this tutorial in <a href="https://github.com/dylanjcastillo/fastapi-kamal-aws-gha-example">this repository</a>.</p>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>To make the most of this tutorial, you should:</p>
<ul>
<li>Have a <a href="https://fastapi.tiangolo.com/">FastAPI</a> app ready to deploy.</li>
<li>Have an <a href="https://aws.amazon.com/">AWS</a> account and its <a href="https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html">CLI</a> installed.</li>
<li>Be comfortable with <a href="https://www.docker.com/">Docker</a>.</li>
<li>Have a basic understanding of <a href="https://kamal-deploy.org/">Kamal</a>. You’ll need to install version <code>1.9.0</code> for this tutorial.</li>
<li>Have a basic understanding of <a href="https://docs.github.com/en/actions">Github Actions</a>.</li>
<li>Have a VPS with Ubuntu ready to host your app.</li>
</ul>
</section>
<section id="prepare-your-vps" class="level2">
<h2 class="anchored" data-anchor-id="prepare-your-vps">Prepare your VPS</h2>
<p>You’ll need to install docker, curl, git, and snapd on your VPS, and create a non-root user called <code>kamal</code> that can sudo. You should also set the <code>UID</code> and <code>GID</code> of the user to 1000.</p>
<p>If you’re using Hetzner, you can use my <a href="https://dylancastillo.co/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.html">terraform script</a> to prepare the VPS.</p>
<p>Otherwise, you can run these commands on your VPS’s terminal:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install docker, curl, and git, and snapd</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> update</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> docker.io curl git snapd</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start and enable the docker service</span></span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> start docker</span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> enable docker</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a non-root user called kamal</span></span>
<span id="cb1-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">useradd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /bin/bash <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> 1000 kamal</span>
<span id="cb1-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">usermod</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-aG</span> sudo kamal</span>
<span id="cb1-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kamal ALL=(ALL) NOPASSWD:ALL"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> /etc/sudoers.d/kamal</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add SSH key to login as kamal user</span></span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /home/kamal/.ssh</span>
<span id="cb1-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;YOUR_PUBLIC_SSH_KEY&gt;"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> /home/kamal/.ssh/authorized_keys <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># you need a public key to login as the kamal user</span></span>
<span id="cb1-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 700 /home/kamal/.ssh</span>
<span id="cb1-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /home/kamal/.ssh/authorized_keys</span>
<span id="cb1-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> kamal:kamal /home/kamal/.ssh</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Disable root login</span></span>
<span id="cb1-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sed</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/PermitRootLogin/d'</span> /etc/ssh/sshd_config</span>
<span id="cb1-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PermitRootLogin no"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> /etc/ssh/sshd_config</span>
<span id="cb1-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> restart sshd</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the kamal user to the docker group</span></span>
<span id="cb1-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">usermod</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-aG</span> docker kamal</span>
<span id="cb1-28"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> network create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--driver</span> bridge kamal_network</span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a folder for the Let's Encrypt ACME JSON</span></span>
<span id="cb1-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /letsencrypt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> /letsencrypt/acme.json <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /letsencrypt/acme.json</span>
<span id="cb1-32"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> kamal:kamal /letsencrypt</span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">reboot</span></span></code></pre></div>
<p>To run these commands, you need to login as root. This assumes that there isn’t already a non-root user with <code>UID</code> 1000. Otherwise, you’ll have to adjust the commands accordingly.</p>
<p>Also, if you don’t have a public SSH key for the “Add SSH key” step, you can generate one with the following command:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh-keygen</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> ed25519 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-C</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your-email@example.com"</span></span></code></pre></div>
<p>These commands will:</p>
<ol type="1">
<li>Install docker, curl, and git</li>
<li>Start and enable the docker service</li>
<li>Create a non-root user called kamal</li>
<li>Disable root login</li>
<li>Add the kamal user to the docker group (this allows the user to run docker without needing to use <code>sudo</code>)</li>
<li>Create a Docker bridge network for Traefik</li>
<li>Create a folder for the Let’s Encrypt ACME JSON file</li>
<li>Make the Let’s Encrypt ACME JSON folder writable by the kamal user</li>
<li>Restart the server</li>
</ol>
<p>Finally, configure the SSH key in your local <code>.ssh/config</code> file so you can login as the kamal user without using the root account.</p>
<pre><code>Host kamal
  HostName &lt;YOUR_VPS_IP&gt;
  User kamal
  IdentityFile ~/.ssh/&lt;YOUR_PRIVATE_SSH_KEY&gt;</code></pre>
</section>
<section id="create-a-dockerfile-for-your-fastapi-app" class="level2">
<h2 class="anchored" data-anchor-id="create-a-dockerfile-for-your-fastapi-app">Create a Dockerfile for your FastAPI app</h2>
<p>Kamal works with containerized apps, so you’ll need to have a Dockerfile. I also recommend using an <code>entrypoint.sh</code> script to run the application, because that also allows you to run commands in the container.</p>
<section id="dockerfile" class="level3">
<h3 class="anchored" data-anchor-id="dockerfile">Dockerfile</h3>
<p>Here’s the Dockerfile I’m using for my projects. You can use this as a template and adjust it to your needs.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Dockerfile</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="Dockerfile" style="background: #f1f3f5;"><pre class="sourceCode numberSource dockerfile number-lines code-with-copy"><code class="sourceCode dockerfile"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> python:3.10-slim <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> base</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> POETRY_HOME=/opt/poetry</span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> POETRY_VERSION=1.8.3</span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> PATH=${POETRY_HOME}/bin:${PATH}</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> update <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-install-recommends</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-9">    curl <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> clean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> /var/lib/apt/lists/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-sSL</span> https://install.python-poetry.org <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span></span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> builder</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> poetry.lock pyproject.toml ./</span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> config virtualenvs.in-project true <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-22">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--only</span> main <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-interaction</span></span>
<span id="cb4-23"></span>
<span id="cb4-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> runner</span>
<span id="cb4-25"></span>
<span id="cb4-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb4-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--from=builder</span> /app/.venv/ /app/.venv/</span>
<span id="cb4-28"></span>
<span id="cb4-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> . /app</span>
<span id="cb4-30"></span>
<span id="cb4-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> +x /app/entrypoint.sh</span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> runner <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> production</span>
<span id="cb4-34"></span>
<span id="cb4-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">EXPOSE</span> 8000</span>
<span id="cb4-36"></span>
<span id="cb4-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> user=kamal</span>
<span id="cb4-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> group=kamal</span>
<span id="cb4-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> uid=1000</span>
<span id="cb4-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> gid=1000</span>
<span id="cb4-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">groupadd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${gid}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${group}</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-42">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">useradd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${uid}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${group}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /bin/sh <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${user}</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-43">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${uid}</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${gid}</span> /app</span>
<span id="cb4-44"></span>
<span id="cb4-45"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">USER</span> ${uid}:${gid}</span>
<span id="cb4-46"></span>
<span id="cb4-47"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb4-48"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CMD</span> [ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/app/entrypoint.sh"</span> , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app"</span>]</span></code></pre></div>
</div>
<p>This multi-stage Dockerfile does the following:</p>
<ol type="1">
<li>Installs poetry and sets up the virtual environment</li>
<li>Creates the user <code>kamal</code> with the <code>UID</code> and <code>GID</code> 1000 and runs the application with that user.</li>
<li>Exposes port 8000 and runs the application by executing the <code>entrypoint.sh</code> script. Kamal automatically detects that is the port the app runs on and <a href="https://github.com/basecamp/kamal/issues/58">will use that to set up the reverse proxy</a>.</li>
</ol>
<p>Feel free to adjust this Dockerfile to your needs.</p>
</section>
<section id="entrypoint.sh-script" class="level3">
<h3 class="anchored" data-anchor-id="entrypoint.sh-script"><code>entrypoint.sh</code> script</h3>
<p>I use an <code>entrypoint.sh</code> script to run the application because that makes it easier to collect static files, run migrations when the container starts, and also running commands in the container.</p>
<p>Here’s an example of a simple <code>entrypoint.sh</code> script:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>entrypoint.sh</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="entrypoint.sh" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/sh</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb5-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Collecting static files"</span></span>
<span id="cb5-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> poetry run gunicorn <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> gunicorn.conf.py</span>
<span id="cb5-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb5-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$@</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
</div>
<p>This script starts the <code>gunicorn</code> server with <code>uvicorn</code> workers and some sensible defaults. It also allows you to pass other arguments to the script, which is useful if you want to run other commands in the container. You can add or remove commands to the script as needed.</p>
</section>
</section>
<section id="configure-an-ecr-registry-in-aws" class="level2">
<h2 class="anchored" data-anchor-id="configure-an-ecr-registry-in-aws">Configure an ECR registry in AWS</h2>
<p>Next, you’ll need a place to push and pull your Docker images. I use <a href="https://aws.amazon.com/ecr/">AWS ECR</a>, so that’s what I’ll show you how to do here. Kamal also supports <a href="https://kamal-deploy.org/docs/configuration/docker-registry/">other registries</a>.</p>
<p>Log in to the <a href="https://aws.amazon.com/console/">AWS Management Console</a> and go to Amazon ECR. Click on <code>Create repository</code> and set a name for your repository.</p>
<p>Then, create a new IAM user in your AWS account by going to Services &gt; IAM &gt; Users &gt; Add user.</p>
<p>During the process you’ll have to assign a permissions to the user. You can create a new policy with the following content and attach it to the user:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2012-10-17"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Statement"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-5">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Sid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ListImagesInRepository"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Effect"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Allow"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-7">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:ListImages"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-8">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Resource"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arn:aws:ecr:&lt;REGION&gt;:&lt;ACCOUNT_ID&gt;:repository/&lt;REPOSITORY_NAME&gt;"</span></span>
<span id="cb6-10">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-13">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Sid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GetAuthorizationToken"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-14">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Effect"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Allow"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-15">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:GetAuthorizationToken"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-16">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Resource"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span></span>
<span id="cb6-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-19">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Sid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ManageRepositoryContents"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-20">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Effect"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Allow"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-21">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-22">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:BatchCheckLayerAvailability"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-23">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:GetDownloadUrlForLayer"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-24">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:GetRepositoryPolicy"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-25">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:DescribeRepositories"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:ListImages"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-27">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:DescribeImages"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-28">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:BatchGetImage"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-29">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:InitiateLayerUpload"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-30">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:UploadLayerPart"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-31">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:CompleteLayerUpload"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-32">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:PutImage"</span></span>
<span id="cb6-33">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-34">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Resource"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-35">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arn:aws:ecr:&lt;REGION&gt;:&lt;ACCOUNT_ID&gt;:repository/&lt;REPOSITORY_NAME&gt;"</span></span>
<span id="cb6-36">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-37">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-38">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-39"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This policy enables users to list, access, and manage the ECR repository they have previously created, as well as obtain an authorization token necessary for pushing and pulling images. You must replace <code>&lt;REGION&gt;</code>, <code>&lt;ACCOUNT_ID&gt;</code>, and <code>&lt;REPOSITORY_NAME&gt;</code> with the specific details of your own repository.</p>
<p>Then, select the user you created and navigate to Security credentials &gt; Access keys &gt; Create access key. Download the generated CSV file and store it in a secure location.</p>
<p>The GitHub Actions workflow will use these credentials for pushing and pulling images from the ECR registry.</p>
</section>
<section id="set-up-kamal-in-your-project" class="level2">
<h2 class="anchored" data-anchor-id="set-up-kamal-in-your-project">Set up Kamal in your project</h2>
<p>Open your FastAPI project in your favorite code editor. Create a folder called <code>deploy</code> in the root directory. Then go into the folder and initialize Kamal:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kamal</span> init</span></code></pre></div>
<p>This will create two folders (<code>.kamal/</code> and <code>config/</code>) and an <code>.env</code> file. Inside <code>config/</code>, you’ll find a <code>deploy.yml</code> file. This is where you’ll provide the instructions for Kamal to build and deploy your app.</p>
<p>You can use the following <code>deploy.yml</code> file as a template for your FastAPI app:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deploy.yml</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename="deploy.yml" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> example</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> example</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">user</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kamal</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">secret</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> FASTAPI_ENV</span></span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traefik</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">publish</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"443:443"</span></span>
<span id="cb8-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volume</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/letsencrypt/:/letsencrypt/"</span></span>
<span id="cb8-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">memory</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 500m</span></span>
<span id="cb8-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">network</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> private_network</span></span>
<span id="cb8-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">entryPoints.web.address</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":80"</span></span>
<span id="cb8-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">entryPoints.websecure.address</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":443"</span></span>
<span id="cb8-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">entryPoints.web.http.redirections.entryPoint.to</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> websecure</span></span>
<span id="cb8-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">entryPoints.web.http.redirections.entryPoint.scheme</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https</span></span>
<span id="cb8-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">entryPoints.web.http.redirections.entrypoint.permanent</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">certificatesResolvers.letsencrypt.acme.email</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;YOUR_EMAIL&gt;"</span></span>
<span id="cb8-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">certificatesResolvers.letsencrypt.acme.storage</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/letsencrypt/acme.json"</span></span>
<span id="cb8-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">certificatesResolvers.letsencrypt.acme.httpchallenge</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> web</span></span>
<span id="cb8-30"></span>
<span id="cb8-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">servers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">web</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hosts</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">128.140.0.209</span></span>
<span id="cb8-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">healthcheck</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">port</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8000</span></span>
<span id="cb8-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interval</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 5s</span></span>
<span id="cb8-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">network</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> private_network</span></span>
<span id="cb8-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traefik.http.routers.app.tls</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traefik.http.routers.app.entrypoints</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> websecure</span></span>
<span id="cb8-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traefik.http.routers.app.rule</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Host(`&lt;YOUR_DOMAIN&gt;`)</span></span>
<span id="cb8-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traefik.http.routers.app.tls.certresolver</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> letsencrypt</span></span>
<span id="cb8-45"></span>
<span id="cb8-46"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registry</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com</span></span>
<span id="cb8-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">username</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> AWS</span></span>
<span id="cb8-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">password</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> KAMAL_REGISTRY_PASSWORD</span></span>
<span id="cb8-51"></span>
<span id="cb8-52"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">builder</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-53"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dockerfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../Dockerfile"</span></span>
<span id="cb8-54"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../"</span></span>
<span id="cb8-55"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">multiarch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb8-56"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cache</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-57"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gha</span></span></code></pre></div>
</div>
<p>This will set up your app and a reverse proxy using Traefik (with automatic SSL certificates using Let’s Encrypt). Remember to replace the placeholders with your own values. It will also do a healthcheck on <code>/up</code> on port 8000.</p>
<section id="test-the-configuration-locally" class="level3">
<h3 class="anchored" data-anchor-id="test-the-configuration-locally">Test the configuration locally</h3>
<p>To test it locally, first, you must define the required environment variables in <code>.env</code>, such as keys for AI services, email providers, etc.</p>
<p>You’ll also need to get a temporary password to authenticate into the ECR registry. You can get this password by running the following command from your terminal:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">aws</span> ecr get-login-password <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--region</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>YOUR_REGION<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>You should copy the output of this command and paste it in the <code>KAMAL_REGISTRY_PASSWORD</code> field in the <code>.env</code> file.</p>
<p>Then, run the following command to deploy your application to your VPS:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kamal</span> env push</span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kamal</span> deploy</span></code></pre></div>
<p>The first command will push the environment variables to the VPS. The second command will build the Docker image, push it to the ECR registry, and deploy it to your VPS.</p>
<p>After a few minutes, your app should be live at <code>https://&lt;YOUR_DOMAIN&gt;</code>.</p>
<p>If you see any errors, you can:</p>
<ol type="1">
<li>Run <code>kamal app logs</code> to see the logs of the app.</li>
<li>Open a terminal in the container by running <code>kamal app exec -it bash</code>.</li>
</ol>
<p>This is how I usually debug the app.</p>
</section>
</section>
<section id="automate-the-deployment-with-github-actions" class="level2">
<h2 class="anchored" data-anchor-id="automate-the-deployment-with-github-actions">Automate the deployment with Github Actions</h2>
<p>Now that you have a working deployment process in your local environment, you can set up your CI/CD pipeline using GitHub Actions.</p>
<p>Create a new file in the <code>.github/workflows</code> folder called <code>deploy.yml</code> and add the following code:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deploy FastAPI app to VPS</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">concurrency</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ github.workflow }}-${{ github.ref }}</span></span>
<span id="cb11-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cancel-in-progress</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb11-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">workflow_dispatch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-10"></span>
<span id="cb11-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deploy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Checkout</span></span>
<span id="cb11-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> webfactory/ssh-agent@v0.7.0</span></span>
<span id="cb11-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh-private-key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.VPS_SSH_PRIVATE_KEY }}</span></span>
<span id="cb11-22"></span>
<span id="cb11-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Set up Ruby and install kamal</span></span>
<span id="cb11-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ruby/setup-ruby@v1</span></span>
<span id="cb11-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ruby-version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2.2</span></span>
<span id="cb11-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gem install kamal -v 1.9.0</span></span>
<span id="cb11-28"></span>
<span id="cb11-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Configure AWS credentials</span></span>
<span id="cb11-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> aws-actions/configure-aws-credentials@v4</span></span>
<span id="cb11-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-access-key-id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_ACCESS_KEY_ID_ECR }}</span></span>
<span id="cb11-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-secret-access-key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_SECRET_ACCESS_KEY_ECR }}</span></span>
<span id="cb11-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-region</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> us-east-1</span></span>
<span id="cb11-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mask-aws-account-id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # otherwise the mask will hide your account ID and cause errors in the deployment</span></span>
<span id="cb11-36"></span>
<span id="cb11-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Login to AWS ECR</span></span>
<span id="cb11-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> login-ecr</span></span>
<span id="cb11-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> aws-actions/amazon-ecr-login@v2</span></span>
<span id="cb11-40"></span>
<span id="cb11-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Set up Docker Buildx for cache</span></span>
<span id="cb11-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker/setup-buildx-action@v3</span></span>
<span id="cb11-43"></span>
<span id="cb11-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Expose GitHub Runtime for cache</span></span>
<span id="cb11-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> crazy-max/ghaction-github-runtime@v3</span></span>
<span id="cb11-46"></span>
<span id="cb11-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create .env file</span></span>
<span id="cb11-48"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb11-49">          cd &lt;YOUR_PROJECT_ROOT&gt;/deploy</span>
<span id="cb11-50">          touch .env</span>
<span id="cb11-51">          echo KAMAL_REGISTRY_PASSWORD="${{ steps.login-ecr.outputs.docker_password_&lt;YOUR_ACCOUNT_ID&gt;_dkr_ecr_&lt;YOUR_REGION&gt;_amazonaws_com }}" &gt;&gt; .env</span>
<span id="cb11-52">          # if you have other secrets, add them here</span>
<span id="cb11-53">          cat .env</span>
<span id="cb11-54"></span>
<span id="cb11-55"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Kamal Deploy</span></span>
<span id="cb11-56"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kamal-deploy</span></span>
<span id="cb11-57"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb11-58">          cd &lt;YOUR_PROJECT_ROOT&gt;/deploy</span>
<span id="cb11-59">          kamal lock release</span>
<span id="cb11-60">          kamal env push</span>
<span id="cb11-61">          kamal deploy</span></code></pre></div>
<p>This workflow will:</p>
<ol type="1">
<li>Checkout the code</li>
<li>Set up the Ruby environment and install Kamal</li>
<li>Configure the AWS credentials</li>
<li>Login to the AWS ECR registry</li>
<li>Set up Docker Buildx for cache</li>
<li>Expose GitHub Runtime for cache</li>
<li>Create the <code>.env</code> file</li>
<li>Run Kamal deploy</li>
</ol>
<p>It will run everytime you make a push to the main branch or by manually triggering the workflow. It’ll cancel any in-progress runs to avoid conflicts.</p>
<p>Also, before you push your code to the repository, you’ll need to add the following secrets to the repository:</p>
<ul>
<li><code>VPS_SSH_PRIVATE_KEY</code>: The private key to connect to your VPS</li>
<li><code>AWS_ACCESS_KEY_ID_ECR</code>: The access key ID for the AWS ECR registry</li>
<li><code>AWS_SECRET_ACCESS_KEY_ECR</code>: The secret access key for the AWS ECR registry</li>
</ul>
<p>Finally, to speed up the deployment, add these options to the <code>builder</code> section of the <code>deploy.yml</code> file:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">builder</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb12-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dockerfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../Dockerfile"</span></span>
<span id="cb12-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../"</span></span>
<span id="cb12-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">multiarch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # new</span></span>
<span id="cb12-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cache</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # new</span></span>
<span id="cb12-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gha</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # new</span></span></code></pre></div>
<p>This will enable the Docker Buildx cache for the build process in Github Actions. You can set <code>multiarch</code> to <code>false</code> if your CI pipeline shares the same architecture as your VPS, which was the case for me.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>You now have a fully automated deployment pipeline for your FastAPI app. A push to the <code>main</code> branch will trigger the workflow, that will build the Docker image, push it to the ECR registry, and deploy it to your VPS.</p>
<p>Break free from the tyranny of manual deployments and expensive cloud services. Sleep like a baby and let Kamal handle your deployments.</p>
<p>If you have any questions or feedback, please feel free to leave a comment below.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Deploying a {FastAPI} App with {Kamal,} {AWS} {ECR,} and
    {Github} {Actions}},
  date = {2024-09-21},
  url = {https://dylancastillo.co/posts/deploy-a-fastapi-app-with-kamal-aws-ecr-and-github-actions.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Deploying a FastAPI App with Kamal, AWS
ECR, and Github Actions.”</span> September 21, 2024. <a href="https://dylancastillo.co/posts/deploy-a-fastapi-app-with-kamal-aws-ecr-and-github-actions.html">https://dylancastillo.co/posts/deploy-a-fastapi-app-with-kamal-aws-ecr-and-github-actions.html</a>.
</div></div></section></div> ]]></description>
  <category>fastapi</category>
  <category>kamal</category>
  <category>aws</category>
  <guid>https://dylancastillo.co/posts/deploy-a-fastapi-app-with-kamal-aws-ecr-and-github-actions.html</guid>
  <pubDate>Sat, 21 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Deploying a Django app with Kamal, AWS ECR, and Github Actions</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/deploy-a-django-app-with-kamal-aws-ecr-and-github-actions.html</link>
  <description><![CDATA[ 




<p>Every other night, my wife wakes me up to tell me I’m muttering unintelligible phrases in my sleep: “restart nginx,” “the SSL certificate failed to validate,” or “how do I exit vim?”</p>
<p>I still suffer from PTSD from the days of manually deploying web apps. But since switching to Kamal, I’ve been sleeping like a baby<sup>1</sup>.</p>
<p>Kamal is sort of a lightweight version of <a href="https://kubernetes.io/">Kubernetes</a> that you can use to deploy containerized apps to a <a href="https://en.wikipedia.org/wiki/Virtual_private_server">VPS</a>. It has a bit of a learning curve, but once you get the hang of it, it’ll take you less than 5 minutes to get an app in production with a CI/CD pipeline.</p>
<p>A single push to main, and that green GitHub Actions checkmark confirms that your 2-pixel padding change is live for the world to admire.</p>
<p>In this tutorial, I’ll walk you through the process of deploying a Django app with Kamal, AWS ECR, and Github Actions.</p>
<p>You can find the code for this tutorial in <a href="https://github.com/dylanjcastillo/django-kamal-aws-gha-example">this repository</a>.</p>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>To make the most of this tutorial, you should:</p>
<ul>
<li>Have an <a href="https://aws.amazon.com/">AWS</a> account and its <a href="https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html">CLI</a> installed.</li>
<li>Be comfortable with <a href="https://www.docker.com/">Docker</a>.</li>
<li>Have a basic understanding of <a href="https://kamal-deploy.org/">Kamal</a>. You’ll need to install version <code>1.9.0</code> for this tutorial.</li>
<li>Have a basic understanding of <a href="https://docs.github.com/en/actions">Github Actions</a>.</li>
<li>Have a VPS with Ubuntu ready to host your app.</li>
</ul>
<p>Ideally, you should also have a Django project ready to deploy. But if you don’t have one, you can use this sample <a href="https://github.com/dylanjcastillo/django-kamal-aws-gha-example">Django project</a> for the tutorial.</p>
</section>
<section id="prepare-the-vps-for-kamal" class="level2">
<h2 class="anchored" data-anchor-id="prepare-the-vps-for-kamal">Prepare the VPS for Kamal</h2>
<p>At a minimum, you’ll need to install docker, curl, git, and snapd on your VPS, and create a non-root user called <code>kamal</code> that can sudo. That user should have a 1000 <code>UID</code> and <code>GID</code>.</p>
<p>I have a <a href="https://dylancastillo.co/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.html">terraform script</a> that will take care of this for you if you’re using Hetzner.</p>
<p>But if you’d like to do it manually, you can run these commands on your VPS’s terminal:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install docker, curl, and git, and snapd</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> update</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> docker.io curl git snapd</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start and enable the docker service</span></span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> start docker</span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> enable docker</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a non-root user called kamal</span></span>
<span id="cb1-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">useradd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /bin/bash <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> 1000 kamal</span>
<span id="cb1-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">usermod</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-aG</span> sudo kamal</span>
<span id="cb1-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kamal ALL=(ALL) NOPASSWD:ALL"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> /etc/sudoers.d/kamal</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SSH key to login as kamal user</span></span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /home/kamal/.ssh</span>
<span id="cb1-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;YOUR_PUBLIC_SSH_KEY&gt;"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> /home/kamal/.ssh/authorized_keys</span>
<span id="cb1-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 700 /home/kamal/.ssh</span>
<span id="cb1-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /home/kamal/.ssh/authorized_keys</span>
<span id="cb1-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> kamal:kamal /home/kamal/.ssh</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Disable root login</span></span>
<span id="cb1-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sed</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/PermitRootLogin/d'</span> /etc/ssh/sshd_config</span>
<span id="cb1-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PermitRootLogin no"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> /etc/ssh/sshd_config</span>
<span id="cb1-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> restart sshd</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the kamal user to the docker group</span></span>
<span id="cb1-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">usermod</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-aG</span> docker kamal</span>
<span id="cb1-28"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> network create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--driver</span> bridge kamal_network</span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a folder for the Let's Encrypt ACME JSON</span></span>
<span id="cb1-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /letsencrypt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> /letsencrypt/acme.json <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /letsencrypt/acme.json</span>
<span id="cb1-32"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> kamal:kamal /letsencrypt</span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a folder for the SQLite database (skip this if you're using a different database)</span></span>
<span id="cb1-35"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /db</span>
<span id="cb1-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> 1000:1000 /db</span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a folder for the redis data (skip this if you're not using redis)</span></span>
<span id="cb1-39"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /data</span>
<span id="cb1-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> 1000:1000 /data</span>
<span id="cb1-41"></span>
<span id="cb1-42"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">reboot</span></span></code></pre></div>
<p>This assumes that you’re using a root user to connect to your server and that there isn’t a non-root user with <code>UID</code> 1000 already. Otherwise, adjust the commands accordingly.</p>
<p>Also, if you don’t have a public SSH key for the “Add SSH key” step, you can generate one with the following command:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh-keygen</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> ed25519 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-C</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your-email@example.com"</span></span></code></pre></div>
<p>These commands will:</p>
<ol type="1">
<li>Install docker, curl, git, and snapd</li>
<li>Start and enable the docker service</li>
<li>Create a non-root user called kamal</li>
<li>Remove the root login</li>
<li>Add the kamal user to the docker group</li>
<li>Create a bridge network for Traefik, SQLite, and redis</li>
<li>Create a folder for the Let’s Encrypt ACME JSON</li>
<li>Make the Let’s Encrypt ACME JSON folder writable by the kamal user</li>
<li>Create a folder for the SQLite database and redis data</li>
<li>Make the SQLite database and redis data folders writable by the kamal user</li>
<li>Restart the server</li>
</ol>
<p>If you’re not using SQLite or redis, you can skip the database and redis data folder steps.</p>
<p>Finally, configure the SSH key in your local <code>.ssh/config</code> file so you can login as the kamal user without using the root account.</p>
<pre><code>Host kamal
  HostName &lt;YOUR_VPS_IP&gt;
  User kamal
  IdentityFile ~/.ssh/&lt;YOUR_PRIVATE_SSH_KEY&gt;</code></pre>
</section>
<section id="create-a-dockerfile-for-your-app" class="level2">
<h2 class="anchored" data-anchor-id="create-a-dockerfile-for-your-app">Create a Dockerfile for your app</h2>
<p>Kamal is meant to deploy containerized apps, so you’ll need to have a Dockerfile for your app. I also recommend using an <code>entrypoint.sh</code> script to run the application.</p>
<section id="dockerfile" class="level3">
<h3 class="anchored" data-anchor-id="dockerfile">Dockerfile</h3>
<p>Here’s the Dockerfile I’m using for my projects. You can use this as a template and adjust it to your needs.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Dockerfile</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="Dockerfile" style="background: #f1f3f5;"><pre class="sourceCode numberSource dockerfile number-lines code-with-copy"><code class="sourceCode dockerfile"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> python:3.10-slim <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> base</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> POETRY_HOME=/opt/poetry</span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> POETRY_VERSION=1.8.3</span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> PATH=${POETRY_HOME}/bin:${PATH}</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> update <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-install-recommends</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-9">    curl <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> clean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> /var/lib/apt/lists/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-sSL</span> https://install.python-poetry.org <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span></span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> builder</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> poetry.lock pyproject.toml ./</span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> config virtualenvs.in-project true <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-22">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--only</span> main <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-interaction</span></span>
<span id="cb4-23"></span>
<span id="cb4-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> runner</span>
<span id="cb4-25"></span>
<span id="cb4-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb4-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--from=builder</span> /app/.venv/ /app/.venv/</span>
<span id="cb4-28"></span>
<span id="cb4-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> . /app</span>
<span id="cb4-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /data /db</span>
<span id="cb4-31"></span>
<span id="cb4-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> +x /app/src/entrypoint.sh</span>
<span id="cb4-33"></span>
<span id="cb4-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> runner <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> production</span>
<span id="cb4-35"></span>
<span id="cb4-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">EXPOSE</span> 8000</span>
<span id="cb4-37"></span>
<span id="cb4-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> user=django</span>
<span id="cb4-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> group=django</span>
<span id="cb4-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> uid=1000</span>
<span id="cb4-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> gid=1000</span>
<span id="cb4-42"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">groupadd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${gid}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${group}</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-43">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">useradd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${uid}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${group}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /bin/sh <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${user}</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-44">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${uid}</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${gid}</span> /app /data /db</span>
<span id="cb4-45"></span>
<span id="cb4-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">USER</span> ${uid}:${gid}</span>
<span id="cb4-47"></span>
<span id="cb4-48"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app/src</span>
<span id="cb4-49"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CMD</span> [ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/app/src/entrypoint.sh"</span> , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app"</span>]</span></code></pre></div>
</div>
<p>This is a multi-stage Dockerfile that:</p>
<ol type="1">
<li>Installs poetry and sets up the virtual environment</li>
<li>Creates the user <code>django</code> with the <code>UID</code> and <code>GID</code> 1000 and runs the application with that user. It’s important that this user has the same <code>UID</code> and <code>GID</code> as the owner of the folders outside the container. Otherwise, you’ll have issues with <a href="https://medium.com/@nielssj/docker-volumes-and-file-system-permissions-772c1aee23ca">file permissions</a> and the app won’t persist data.</li>
<li>Exposes port 8000 and runs the application by executing the <code>entrypoint.sh</code> script. By exposing the port, Kamal will automatically detect that is the port the app runs on and <a href="https://github.com/basecamp/kamal/issues/58">will use that to set up the reverse proxy</a>.</li>
</ol>
<p>Feel free to adjust this Dockerfile to your needs. If you are not planning on using redis or a SQLite database in your same VPS, you can remove those parts from the Dockerfile.</p>
</section>
<section id="entrypoint.sh-script" class="level3">
<h3 class="anchored" data-anchor-id="entrypoint.sh-script"><code>entrypoint.sh</code> script</h3>
<p>I use an <code>entrypoint.sh</code> script to run the application because that makes it easier to collect static files, run migrations when the container starts, and also running commands in the container.</p>
<p>Here’s an example of a simple <code>entrypoint.sh</code> script:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>entrypoint.sh</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="entrypoint.sh" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/sh</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb5-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Collecting static files"</span></span>
<span id="cb5-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> run python manage.py collectstatic <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--clear</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--noinput</span></span>
<span id="cb5-8"></span>
<span id="cb5-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running migrations"</span></span>
<span id="cb5-10">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> run python manage.py migrate</span>
<span id="cb5-11"></span>
<span id="cb5-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running in production mode"</span></span>
<span id="cb5-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> poetry run gunicorn <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> gunicorn.conf.py</span>
<span id="cb5-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb5-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$@</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
</div>
<p>This script just collects static files, runs migrations, and starts the Gunicorn server with the configuration in the <code>gunicorn.conf.py</code> file. You can add or remove commands to the script as needed.</p>
</section>
</section>
<section id="configure-an-ecr-registry-in-aws" class="level2">
<h2 class="anchored" data-anchor-id="configure-an-ecr-registry-in-aws">Configure an ECR registry in AWS</h2>
<p>Next, you’ll need a place to push and pull your Docker images. I like using AWS, so that’s what I’ll show you how to do. If you prefer other services, take a look at the instructions for other registries in the <a href="https://kamal-deploy.org/docs/configuration/docker-registry/">Kamal documentation</a>.</p>
<p>Log in to the <a href="https://aws.amazon.com/console/">AWS Management Console</a> and go to Amazon ECR. Click on <code>Create repository</code> and set a name for your repository.</p>
<p>Then, create a new IAM user in your AWS account by going to Services &gt; IAM &gt; Users &gt; Add user.</p>
<p>Instead of using a predefined policy, create a new one with the following JSON and attach it to the user:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2012-10-17"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Statement"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-5">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Sid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ListImagesInRepository"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Effect"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Allow"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-7">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:ListImages"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-8">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Resource"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arn:aws:ecr:&lt;REGION&gt;:&lt;ACCOUNT_ID&gt;:repository/&lt;REPOSITORY_NAME&gt;"</span></span>
<span id="cb6-10">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-13">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Sid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GetAuthorizationToken"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-14">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Effect"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Allow"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-15">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:GetAuthorizationToken"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-16">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Resource"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span></span>
<span id="cb6-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-19">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Sid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ManageRepositoryContents"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-20">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Effect"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Allow"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-21">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-22">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:BatchCheckLayerAvailability"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-23">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:GetDownloadUrlForLayer"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-24">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:GetRepositoryPolicy"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-25">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:DescribeRepositories"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:ListImages"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-27">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:DescribeImages"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-28">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:BatchGetImage"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-29">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:InitiateLayerUpload"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-30">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:UploadLayerPart"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-31">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:CompleteLayerUpload"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-32">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:PutImage"</span></span>
<span id="cb6-33">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-34">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Resource"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-35">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arn:aws:ecr:&lt;REGION&gt;:&lt;ACCOUNT_ID&gt;:repository/&lt;REPOSITORY_NAME&gt;"</span></span>
<span id="cb6-36">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-37">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-38">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-39"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This policy allows the user to list, get, and manage the ECR repository you created earlier and get the authorization token to push and pull the image. You will need to replace the <code>&lt;REGION&gt;</code>, <code>&lt;ACCOUNT_ID&gt;</code>, and <code>&lt;REPOSITORY_NAME&gt;</code> with the values for your repository.</p>
<p>Next, select the user you created and go to Security credentials &gt; Access keys &gt; Create access key. Download the CSV file and keep it in a secure location.</p>
<p>You will use those credentials in your Github Actions pipeline to push and pull the image from the ECR registry.</p>
</section>
<section id="set-up-kamal-in-your-project" class="level2">
<h2 class="anchored" data-anchor-id="set-up-kamal-in-your-project">Set up Kamal in your project</h2>
<p>Open your Django project in your favorite code editor. Create a folder called <code>deploy</code> in the root directory. Then go into the folder and initialize Kamal:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kamal</span> init</span></code></pre></div>
<p>This will create two folders (<code>.kamal/</code> and <code>config/</code>) and an <code>.env</code> file. Inside <code>config/</code>, you’ll find a <code>deploy.yml</code> file. This is where you’ll provide the instructions for Kamal to build and deploy your app.</p>
<p>You can use the following <code>deploy.yml</code> file as a template for your Django app:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deploy.yml</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename="deploy.yml" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;YOUR_SERVICE_NAME&gt;</span></span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;YOUR_IMAGE_NAME&gt;</span></span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">user</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kamal</span></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">secret</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_SECRET_KEY</span></span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traefik</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">publish</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"443:443"</span></span>
<span id="cb8-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volume</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/letsencrypt/:/letsencrypt/"</span></span>
<span id="cb8-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">memory</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 500m</span></span>
<span id="cb8-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">network</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kamal_network</span></span>
<span id="cb8-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">entryPoints.web.address</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":80"</span></span>
<span id="cb8-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">entryPoints.websecure.address</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":443"</span></span>
<span id="cb8-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">entryPoints.web.http.redirections.entryPoint.to</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> websecure</span></span>
<span id="cb8-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">entryPoints.web.http.redirections.entryPoint.scheme</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https</span></span>
<span id="cb8-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">entryPoints.web.http.redirections.entrypoint.permanent</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">certificatesResolvers.letsencrypt.acme.email</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;YOUR_EMAIL&gt;"</span></span>
<span id="cb8-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">certificatesResolvers.letsencrypt.acme.storage</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/letsencrypt/acme.json"</span></span>
<span id="cb8-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">certificatesResolvers.letsencrypt.acme.httpchallenge</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> web</span></span>
<span id="cb8-31"></span>
<span id="cb8-32"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">servers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">web</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hosts</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;YOUR_VPS_IP&gt;</span></span>
<span id="cb8-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">healthcheck</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">port</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8000</span></span>
<span id="cb8-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interval</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 5s</span></span>
<span id="cb8-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">network</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kamal_network</span></span>
<span id="cb8-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traefik.http.routers.app.tls</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traefik.http.routers.app.entrypoints</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> websecure</span></span>
<span id="cb8-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traefik.http.routers.app.rule</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Host(`&lt;YOUR_DOMAIN&gt;`)</span></span>
<span id="cb8-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traefik.http.routers.app.tls.certresolver</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> letsencrypt</span></span>
<span id="cb8-46"></span>
<span id="cb8-47"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accessories</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">redis</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> redis:7.0</span></span>
<span id="cb8-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">roles</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-51"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> web</span></span>
<span id="cb8-52"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> --maxmemory 200m --maxmemory-policy allkeys-lru</span></span>
<span id="cb8-53"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-54"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /var/redis/data:/data/redis</span></span>
<span id="cb8-55"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-56"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">memory</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 250m</span></span>
<span id="cb8-57"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">network</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kamal_network</span></span>
<span id="cb8-58"></span>
<span id="cb8-59"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-60"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/db/:/app/db/"</span></span>
<span id="cb8-61"></span>
<span id="cb8-62"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registry</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-63"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;YOUR_AWS_ECR_URL&gt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # e.g. 123456789012.dkr.ecr.us-east-1.amazonaws.com</span></span>
<span id="cb8-64"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">username</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> AWS</span></span>
<span id="cb8-65"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">password</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-66"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> KAMAL_REGISTRY_PASSWORD</span></span>
<span id="cb8-67"></span>
<span id="cb8-68"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">builder</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-69"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dockerfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../Dockerfile"</span></span>
<span id="cb8-70"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../"</span></span></code></pre></div>
</div>
<p>This will set up your app and a reverse proxy using Traefik (with automatic SSL certificates using Let’s Encrypt), a Redis database, and a volume to persist the SQLite database. It will also do a healthcheck on <code>/up</code> on port <code>8000</code>.</p>
<p>Remember to replace the placeholders with your own values.</p>
<section id="test-the-configuration-locally" class="level3">
<h3 class="anchored" data-anchor-id="test-the-configuration-locally">Test the configuration locally</h3>
<p>To test it locally, first, you’ll have to define the required environment variables in the <code>.env</code> file, such as the Django secret key, OpenAI API key, and any other secrets you need.</p>
<p>You’ll also need to get a temporary password for the ECR registry. You can get this password by running the following command:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">aws</span> ecr get-login-password <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--region</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>YOUR_REGION<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>You should copy the output of this command and paste it in the <code>KAMAL_REGISTRY_PASSWORD</code> field in the <code>.env</code> file.</p>
<p>Then, run the following command to deploy your application to your VPS:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kamal</span> env push</span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kamal</span> deploy</span></code></pre></div>
<p>The first command will push the environment variables to the VPS. The second command will build the Docker image, push it to the ECR registry, and deploy it to your VPS.</p>
<p>After a few minutes, your app should be live at <code>https://&lt;YOUR_DOMAIN&gt;</code>.</p>
<p>If you see any errors, there are two things you can do:</p>
<ol type="1">
<li>Run <code>kamal app logs</code> to see the logs of the app.</li>
<li>Open a terminal in the container by running <code>kamal app exec -it bash</code>.</li>
</ol>
<p>This is how I usually debug the app.</p>
</section>
</section>
<section id="automate-the-deployment-with-github-actions" class="level2">
<h2 class="anchored" data-anchor-id="automate-the-deployment-with-github-actions">Automate the deployment with Github Actions</h2>
<p>Now that you have a working deployment process in your local environment, you can automate the deployment with Github Actions.</p>
<p>Create a new file in the <code>.github/workflows</code> folder called <code>deploy.yml</code> and add the following code:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deploy webapp to VPS</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">concurrency</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ github.workflow }}-${{ github.ref }}</span></span>
<span id="cb11-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cancel-in-progress</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb11-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">workflow_dispatch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-10"></span>
<span id="cb11-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deploy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Checkout</span></span>
<span id="cb11-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> webfactory/ssh-agent@v0.7.0</span></span>
<span id="cb11-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh-private-key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.VPS_SSH_PRIVATE_KEY }}</span></span>
<span id="cb11-22"></span>
<span id="cb11-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Set up Ruby and install kamal</span></span>
<span id="cb11-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ruby/setup-ruby@v1</span></span>
<span id="cb11-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ruby-version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2.2</span></span>
<span id="cb11-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gem install kamal -v 1.9.0</span></span>
<span id="cb11-28"></span>
<span id="cb11-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Configure AWS credentials</span></span>
<span id="cb11-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> aws-actions/configure-aws-credentials@v4</span></span>
<span id="cb11-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-access-key-id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_ACCESS_KEY_ID_ECR }}</span></span>
<span id="cb11-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-secret-access-key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_SECRET_ACCESS_KEY_ECR }}</span></span>
<span id="cb11-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-region</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> us-east-1</span></span>
<span id="cb11-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mask-aws-account-id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # otherwise the mask will hide your account ID and cause errors in the deployment</span></span>
<span id="cb11-36"></span>
<span id="cb11-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Login to AWS ECR</span></span>
<span id="cb11-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> login-ecr</span></span>
<span id="cb11-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> aws-actions/amazon-ecr-login@v2</span></span>
<span id="cb11-40"></span>
<span id="cb11-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Set up Docker Buildx for cache</span></span>
<span id="cb11-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker/setup-buildx-action@v3</span></span>
<span id="cb11-43"></span>
<span id="cb11-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Expose GitHub Runtime for cache</span></span>
<span id="cb11-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> crazy-max/ghaction-github-runtime@v3</span></span>
<span id="cb11-46"></span>
<span id="cb11-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create .env file</span></span>
<span id="cb11-48"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb11-49">          cd &lt;YOUR_PROJECT_ROOT&gt;/deploy</span>
<span id="cb11-50">          touch .env</span>
<span id="cb11-51">          echo KAMAL_REGISTRY_PASSWORD="${{ steps.login-ecr.outputs.docker_password_&lt;YOUR_ACCOUNT_ID&gt;_dkr_ecr_&lt;YOUR_REGION&gt;_amazonaws_com }}" &gt;&gt; .env</span>
<span id="cb11-52">          echo DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" &gt;&gt; .env</span>
<span id="cb11-53">          # if you have other secrets, add them here</span>
<span id="cb11-54">          cat .env</span>
<span id="cb11-55"></span>
<span id="cb11-56"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Kamal Deploy</span></span>
<span id="cb11-57"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kamal-deploy</span></span>
<span id="cb11-58"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb11-59">          cd &lt;YOUR_PROJECT_ROOT&gt;/deploy</span>
<span id="cb11-60">          kamal lock release</span>
<span id="cb11-61">          kamal env push</span>
<span id="cb11-62">          kamal deploy</span></code></pre></div>
<p>This workflow will:</p>
<ol type="1">
<li>Checkout the code</li>
<li>Set up the Ruby environment and install Kamal</li>
<li>Configure the AWS credentials</li>
<li>Login to the AWS ECR registry</li>
<li>Set up Docker Buildx for cache</li>
<li>Expose GitHub Runtime for cache</li>
<li>Create the <code>.env</code> file</li>
<li>Run Kamal deploy</li>
</ol>
<p>It will run everytime you make a push to the main branch or by manually triggering the workflow. It’ll cancel any in-progress runs to avoid conflicts.</p>
<p>Also, before you push your code to the repository, you’ll need to add the following secrets to the repository:</p>
<ul>
<li><code>VPS_SSH_PRIVATE_KEY</code>: The private key to connect to your VPS</li>
<li><code>AWS_ACCESS_KEY_ID_ECR</code>: The access key ID for the AWS ECR registry</li>
<li><code>AWS_SECRET_ACCESS_KEY_ECR</code>: The secret access key for the AWS ECR registry</li>
<li><code>DJANGO_SECRET_KEY</code>: The Django secret key</li>
</ul>
<p>Finally, to speed up the deployment, add these options to the <code>builder</code> section of the <code>deploy.yml</code> file:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">builder</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb12-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dockerfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../Dockerfile"</span></span>
<span id="cb12-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../"</span></span>
<span id="cb12-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">multiarch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # new</span></span>
<span id="cb12-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cache</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # new</span></span>
<span id="cb12-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gha</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # new</span></span></code></pre></div>
<p>This will enable the Docker Buildx cache for the build process in Github Actions. You can set <code>multiarch</code> to <code>false</code> if your CI pipeline shares the same architecture as your VPS, which was the case for me.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>You now have a fully automated deployment pipeline for your Django app. A push to the <code>main</code> branch will trigger the workflow, which will build the Docker image, push it to the ECR registry, and deploy it to your VPS.</p>
<p>Break free from the tyranny of manual deployments and expensive cloud services. Sleep like a baby and let Kamal handle your deployments.</p>
<p>If you have any questions or feedback, please feel free to leave a comment below.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>crying and sh*tting my diapers?↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Deploying a {Django} App with {Kamal,} {AWS} {ECR,} and
    {Github} {Actions}},
  date = {2024-09-15},
  url = {https://dylancastillo.co/posts/deploy-a-django-app-with-kamal-aws-ecr-and-github-actions.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Deploying a Django App with Kamal, AWS
ECR, and Github Actions.”</span> September 15, 2024. <a href="https://dylancastillo.co/posts/deploy-a-django-app-with-kamal-aws-ecr-and-github-actions.html">https://dylancastillo.co/posts/deploy-a-django-app-with-kamal-aws-ecr-and-github-actions.html</a>.
</div></div></section></div> ]]></description>
  <category>django</category>
  <category>kamal</category>
  <category>aws</category>
  <guid>https://dylancastillo.co/posts/deploy-a-django-app-with-kamal-aws-ecr-and-github-actions.html</guid>
  <pubDate>Sun, 15 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Classifying images with Gemini Flash 1.5</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/classify-images-with-gemini-flash-1.5.html</link>
  <description><![CDATA[ 




<p>Most people think of <a href="https://arxiv.org/abs/2301.00234">In-Context Learning (ICL)</a> — the ability of LLMs to learn from examples provided in the context — only as a component of RAG applications.</p>
<p>I used to think of it that way too. Until I recently found out that Multimodal Large Language Models (MLLMs) with ICL can be used to perform more traditional ML tasks such as image classification.</p>
<p>I was skeptical at first, but was surprised to see that it worked pretty well both in the literature (see <a href="https://arxiv.org/abs/2405.09798">here</a> and <a href="https://arxiv.org/abs/2403.07407">here</a>) and in my own experiments.</p>
<p>You shouldn’t expect state-of-the-art results with it, but it can often give you pretty good results with very little effort and data.</p>
<p>In this tutorial, I’ll show you how to use ICL to classify images using Gemini Flash 1.5.</p>
<section id="why-gemini-flash-1.5" class="level2">
<h2 class="anchored" data-anchor-id="why-gemini-flash-1.5">Why Gemini Flash 1.5?</h2>
<p>You can use any MLLM for this task, but I chose Gemini Flash 1.5 because:</p>
<ol type="1">
<li>It’s cheaper than <a href="https://ai.google.dev/pricing">Gemini Pro 1.5</a>, <a href="https://platform.openai.com/pricing">GPT-4o</a>, and <a href="https://docs.anthropic.com/en/docs/build-with-claude/vision#calculate-image-costs">Sonnet 3.5</a>. For an image of <em>512x512</em> pixels, Gemini Flash 1.5 is 50x cheaper than Gemini Pro 1.5, 5x to 16x cheaper than GPT-4o, and 26x cheaper than Sonnet 3.5<sup>1</sup>.</li>
<li>It lets you use up to 3,000 images per request. By trial and error, I found that GPT-4o seems to have a hard limit at 250 images per request and Sonnet 3.5’s documentation mentions a limit of 20 images per request.</li>
<li>It works well. If you really want to squeeze the last bit of performance out of your model, you can use a bigger model, but for the purposes of this tutorial, Gemini Flash 1.5 will do just fine.</li>
</ol>
<p>Regardless of the model you choose, this tutorial will be a good starting point for you to classify images using ICL.</p>
</section>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>To follow this tutorial you’ll need to:</p>
<ol type="1">
<li>Sign up and generate an API key in <a href="https://aistudio.google.com/app/apikey">Google AI Studio</a>.</li>
<li>Set the API key as an environment variable called <code>GEMINI_API_KEY</code>.</li>
<li>Download <a href="https://www.kaggle.com/datasets/gpiosenka/butterfly-images40-species?resource=download">this dataset</a> and save it to <code>data/</code>.</li>
<li>Create a virtual environment and install the requirements:</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv venv</span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> venv/bin/activate</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install pandas numpy scikit-learn google-generativeai pillow</span></code></pre></div>
</section>
<section id="set-up" class="level2">
<h2 class="anchored" data-anchor-id="set-up">Set up</h2>
<p>As usual, you start by importing the necessary libraries:</p>
<div id="cell-7" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> google.generativeai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> genai</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, f1_score</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb2-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb2-11"></span>
<span id="cb2-12">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>)</span>
<span id="cb2-13"></span>
<span id="cb2-14">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</div>
<p>In addition to the usual popular libraries (e.g.&nbsp;<code>pandas</code>, <code>sklearn</code>), you’ll need:</p>
<ul>
<li><code>google.generativeai</code> for interacting with the Gemini API</li>
<li><code>PIL</code> for handling images</li>
<li><code>sklearn</code> for calculating performance metrics</li>
</ul>
<p>Then, you’ll need to configure the Gemini API client with your API key:</p>
<div id="cell-9" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">genai.configure(api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GEMINI_API_KEY"</span>])</span></code></pre></div>
</div>
<p>This will take the <code>GEMINI_API_KEY</code> environment variable and use it to authenticate your requests to the Gemini API.</p>
</section>
<section id="read-data" class="level2">
<h2 class="anchored" data-anchor-id="read-data">Read data</h2>
<p>To make a fair evaluation of the model’s performance, you should split the dataset into separate training and testing sets. The training set is used to provide context or examples to the model during inference. The testing set, comprised of unseen images, is then used to measure the model’s performance.</p>
<p>This process is different from the traditional “training” process, where you update the model’s weights or parameters. Here, you’re only providing the model with a set of images and asking it to learn from them at inference time.</p>
<p>This function will help you create the datasets:</p>
<div id="cell-13" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_datasets(train_dir, test_dir, selected_classes, n_images_icl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb4-2">    train_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-3">    test_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-4"></span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> class_id, class_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(selected_classes):</span>
<span id="cb4-6">        train_class_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> class_name</span>
<span id="cb4-7">        test_class_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> class_name</span>
<span id="cb4-8"></span>
<span id="cb4-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> train_class_dir.is_dir() <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> test_class_dir.is_dir():</span>
<span id="cb4-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb4-11"></span>
<span id="cb4-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train dataset</span></span>
<span id="cb4-13">        train_image_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(train_class_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.jpg"</span>))</span>
<span id="cb4-14">        selected_train_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(</span>
<span id="cb4-15">            train_image_files,</span>
<span id="cb4-16">            size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(n_images_icl, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_image_files)),</span>
<span id="cb4-17">            replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb4-18">        )</span>
<span id="cb4-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> img_path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> selected_train_images:</span>
<span id="cb4-20">            train_data.append(</span>
<span id="cb4-21">                {</span>
<span id="cb4-22">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_path"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(img_path),</span>
<span id="cb4-23">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class_id"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"class_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb4-24">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class_name"</span>: class_name,</span>
<span id="cb4-25">                }</span>
<span id="cb4-26">            )</span>
<span id="cb4-27"></span>
<span id="cb4-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test dataset</span></span>
<span id="cb4-29">        test_image_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(test_class_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.jpg"</span>))</span>
<span id="cb4-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> img_path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_image_files:</span>
<span id="cb4-31">            test_data.append(</span>
<span id="cb4-32">                {</span>
<span id="cb4-33">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_path"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(img_path),</span>
<span id="cb4-34">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class_id"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"class_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb4-35">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class_name"</span>: class_name,</span>
<span id="cb4-36">                }</span>
<span id="cb4-37">            )</span>
<span id="cb4-38"></span>
<span id="cb4-39">    df_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(train_data)</span>
<span id="cb4-40">    df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(test_data).sample(frac<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-41"></span>
<span id="cb4-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df_train, df_test</span></code></pre></div>
</div>
<p>This function will get a random selection of <code>n_images_icl</code> images per class from the <code>train</code> folder (that you’ll later use in the model’s context). For the testing set, which you’ll use to measure the model’s performance, you’ll use all the available images in the <code>test</code> folder from those classes.</p>
<p>To keep things simple, you’ll start by selecting 15 different classes and 1 image per class for the context (i.e., <code>n_images_icl=1</code>)</p>
<div id="cell-15" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">DATA_DIR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../data/"</span></span>
<span id="cb5-2">TRAIN_DIR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(DATA_DIR) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span></span>
<span id="cb5-3">TEST_DIR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(DATA_DIR) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">all_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(os.listdir(TRAIN_DIR))</span>
<span id="cb5-6">selected_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(all_classes, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8">df_train, df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_datasets(TRAIN_DIR, TEST_DIR, selected_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>selected_classes, n_images_icl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>There will be 15 classes with 1 image in the training set and 15 classes with 5 images in the testing set.</p>
</section>
<section id="gemini-flash-1.5" class="level2">
<h2 class="anchored" data-anchor-id="gemini-flash-1.5">Gemini Flash 1.5</h2>
<p>Next, you’ll need to define a system prompt and configure the model to use it.</p>
<section id="define-prompt" class="level3">
<h3 class="anchored" data-anchor-id="define-prompt">Define prompt</h3>
<p>You’ll use a system prompt that will tell the model how to classify the images and the format you want the output to be in:</p>
<div id="cell-21" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">CLASSIFIER_SYSTEM_PROMPT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are an expert lepidopterist.</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Your task is to classify images of butterflies into one of the provided labels.</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Provide your output as a JSON object using this format:</span></span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "number_of_labeled_images": &lt;integer&gt;,</span></span>
<span id="cb6-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "output": [</span></span>
<span id="cb6-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        {</span></span>
<span id="cb6-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "image_id": &lt;image id, integer, starts at 0&gt;,</span></span>
<span id="cb6-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "confidence": &lt;number between 0 and 10, the higher the more confident, integer&gt;,</span></span>
<span id="cb6-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "label": &lt;label of the correct butterfly species, string&gt;</span></span>
<span id="cb6-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        }, </span></span>
<span id="cb6-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ...</span></span>
<span id="cb6-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ]</span></span>
<span id="cb6-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-18"></span>
<span id="cb6-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">## Guidelines</span></span>
<span id="cb6-20"></span>
<span id="cb6-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- ALWAYS produce valid JSON.</span></span>
<span id="cb6-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Generate ONLY a single prediction per input image.</span></span>
<span id="cb6-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- The `number_of_labeled_images` MUST be the same as the number of input images.</span></span>
<span id="cb6-24"></span>
<span id="cb6-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">This is an example of a valid output:</span></span>
<span id="cb6-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">```</span></span>
<span id="cb6-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "number_of_labeled_images": 5,</span></span>
<span id="cb6-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "output": [</span></span>
<span id="cb6-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      {</span></span>
<span id="cb6-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "image_id": 0,</span></span>
<span id="cb6-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "confidence": 10,</span></span>
<span id="cb6-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "correct_label": "class_B"</span></span>
<span id="cb6-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      },</span></span>
<span id="cb6-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      {</span></span>
<span id="cb6-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "image_id": 1,</span></span>
<span id="cb6-37"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "confidence": 9,</span></span>
<span id="cb6-38"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "correct_label": "class_C"</span></span>
<span id="cb6-39"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      },</span></span>
<span id="cb6-40"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      {</span></span>
<span id="cb6-41"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "image_id": 2,</span></span>
<span id="cb6-42"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "confidence": 4,</span></span>
<span id="cb6-43"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "correct_label": "class_A"</span></span>
<span id="cb6-44"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      },</span></span>
<span id="cb6-45"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      {</span></span>
<span id="cb6-46"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "image_id": 3,</span></span>
<span id="cb6-47"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "confidence": 2,</span></span>
<span id="cb6-48"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "correct_label": "class_B"</span></span>
<span id="cb6-49"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      },</span></span>
<span id="cb6-50"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      {</span></span>
<span id="cb6-51"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "image_id": 4,</span></span>
<span id="cb6-52"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "confidence": 10,</span></span>
<span id="cb6-53"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "correct_label": "class_C"</span></span>
<span id="cb6-54"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      }</span></span>
<span id="cb6-55"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ]</span></span>
<span id="cb6-56"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-57"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">```</span></span>
<span id="cb6-58"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>.strip()</span></code></pre></div>
</div>
<p>This prompt explains the task to the model. You’re providing it with a set of labels with corresponding images, and a set of images that should be classified into one of those labels. The model needs to output a single label for each image.</p>
<p>I included an additional field called <code>number_of_labeled_images</code> because I noticed that the model would often “forget” to include all the labels in the output, and this was a simple way to ensure that it did so.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Fun fact: I didn’t know that <em>lepidopterist</em> was a word until I wrote this prompt.</p>
</div>
</div>
</section>
<section id="configure-model" class="level3">
<h3 class="anchored" data-anchor-id="configure-model">Configure model</h3>
<p>Then, you can define and configure the model:</p>
<div id="cell-25" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">generation_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb7-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temperature"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb7-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_output_tokens"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8192</span>,</span>
<span id="cb7-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response_mime_type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"application/json"</span>,</span>
<span id="cb7-5">}</span>
<span id="cb7-6">classification_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> genai.GenerativeModel(</span>
<span id="cb7-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gemini-1.5-flash"</span>, </span>
<span id="cb7-8">    system_instruction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CLASSIFIER_SYSTEM_PROMPT, </span>
<span id="cb7-9">    generation_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generation_config</span>
<span id="cb7-10">)</span></code></pre></div>
</div>
<p>This sets up the model with the following configuration:</p>
<ul>
<li><code>temperature=1</code>: Controls the randomness of the model’s output.</li>
<li><code>max_output_tokens=8192</code>: The maximum number of tokens the model can generate.</li>
<li><code>response_mime_type="application/json"</code>: Tells the model to produce JSON.</li>
</ul>
<p>It also sets the <code>system_instruction</code> using the prompt you defined earlier and uses <code>gemini-1.5-flash</code> as the model.</p>
</section>
<section id="building-the-context" class="level3">
<h3 class="anchored" data-anchor-id="building-the-context">Building the context</h3>
<p>Gemini has a slightly different way of building the messages (context) used by the model.</p>
<p>Most providers have adjusted their API to match OpenAI’s <code>messages</code> format. Gemini, however, uses a list of strings and media files (if you’re including images).</p>
<p>You can use these functions for that:</p>
<div id="cell-29" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_context_images_message(df):</span>
<span id="cb8-2">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Possible labels:"</span>]</span>
<span id="cb8-3">    grouped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class_id'</span>)</span>
<span id="cb8-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> class_id, group <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> grouped:</span>
<span id="cb8-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> group.iterrows():</span>
<span id="cb8-6">            base64_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_path"</span>])</span>
<span id="cb8-7">            messages.append(base64_img)</span>
<span id="cb8-8">        messages.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"label: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> messages</span>
<span id="cb8-10">    </span>
<span id="cb8-11">context_images_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_context_images_message(df_train)</span></code></pre></div>
</div>
<p>First, you’ll create a message with the context images and their corresponding labels. This is the “training” part of ICL.</p>
<p>In <code>create_context_images_message</code>, you’re iterating over the training dataset, grouping the images by class and appending the images and labels to the messages list.</p>
<p>The resulting message will look something like this:</p>
<div id="cell-31" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">context_images_message[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>['Possible labels:',
 &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=224x224&gt;,
 'label: class_0',
 &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=224x224&gt;,
 'label: class_1']</code></pre>
</div>
</div>
<p>You might have noticed that instead of the actual names of the classes, you’re using <code>class_0</code>, <code>class_1</code>, etc. This is because I want to make the model prediction as “fair” as possible, see the baseline performance section for more details.</p>
<p>Then, you’ll create a message with the input images. This are the images for which the model will generate predictions.</p>
<p>Simlar to the context images message, you’re iterating over the test dataset and appending the images to the messages list.</p>
<div id="cell-33" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_input_images_message(df):</span>
<span id="cb11-2">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input images:"</span>]</span>
<span id="cb11-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, image_path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(df.image_path):</span>
<span id="cb11-4">        base64_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(image_path)</span>
<span id="cb11-5">        image_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb11-6">            base64_img,</span>
<span id="cb11-7">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"input_image_id: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb11-8">        ]</span>
<span id="cb11-9">        messages.extend(image_message)</span>
<span id="cb11-10">    messages.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Please correctly classify all </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> images."</span>)</span>
<span id="cb11-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> messages</span>
<span id="cb11-12"></span>
<span id="cb11-13">input_images_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_input_images_message(df_test)</span></code></pre></div>
</div>
<p>The resulting message will look something like this:</p>
<div id="cell-35" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">input_images_message[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>['Input images:',
 &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=224x224&gt;,
 'input_image_id: 0',
 &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=224x224&gt;,
 'input_image_id: 1']</code></pre>
</div>
</div>
</section>
<section id="results" class="level3">
<h3 class="anchored" data-anchor-id="results">Results</h3>
<p>Now, you can combine the context images message and the input images message to create the contents you’ll pass to the model:</p>
<div id="cell-38" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">contents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context_images_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> input_images_message</span>
<span id="cb14-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classification_model.generate_content(</span>
<span id="cb14-3">    contents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>contents</span>
<span id="cb14-4">)</span>
<span id="cb14-5">response_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response.text)</span></code></pre></div>
</div>
<p>It’ll take a few seconds to run. But after that you’ll have a JSON response with the model’s predictions:</p>
<div id="cell-40" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">response_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>[{'image_id': 0, 'confidence': 10, 'label': 'class_7'},
 {'image_id': 1, 'confidence': 10, 'label': 'class_2'},
 {'image_id': 2, 'confidence': 10, 'label': 'class_4'}]</code></pre>
</div>
</div>
<p>Then, you can calculate the accuracy and F1-score to evaluate the model’s performance:</p>
<div id="cell-42" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_metrics(df_test, response_json):</span>
<span id="cb17-2">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> response_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output'</span>]]</span>
<span id="cb17-3">    accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(df_test.class_id, predictions)</span>
<span id="cb17-4">    f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f1_score(df_test.class_id, predictions, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weighted'</span>)</span>
<span id="cb17-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> accuracy, f1</span>
<span id="cb17-6"></span>
<span id="cb17-7">accuracy, f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_metrics(df_test, response_json)</span>
<span id="cb17-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"F1-score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy: 0.7333
F1-score: 0.7229</code></pre>
</div>
</div>
<p>Using a single image in the context per class, you should get an accuracy around 73% and F1-score around 72%.</p>
<p>Not bad, but you can probably do better.</p>
<section id="using-5-images-per-class-in-the-context" class="level4">
<h4 class="anchored" data-anchor-id="using-5-images-per-class-in-the-context">Using 5 images per class in the context</h4>
<p>One quick way to improve the performance of the model is to use more images per class in the context. Try with 5 images per class:</p>
<div id="cell-46" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">df_train, df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_datasets(TRAIN_DIR, TEST_DIR, selected_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>selected_classes, n_images_icl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the context and input messages</span></span>
<span id="cb19-4">context_images_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_context_images_message(df_train)</span>
<span id="cb19-5">input_images_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_input_images_message(df_test)</span>
<span id="cb19-6">contents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context_images_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> input_images_message</span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate the response</span></span>
<span id="cb19-9">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classification_model.generate_content(</span>
<span id="cb19-10">    contents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>contents</span>
<span id="cb19-11">)</span>
<span id="cb19-12">response_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response.text)</span>
<span id="cb19-13"></span>
<span id="cb19-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the metrics</span></span>
<span id="cb19-15">accuracy, f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_metrics(df_test, response_json)</span>
<span id="cb19-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"F1-score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy: 0.9067
F1-score: 0.9013</code></pre>
</div>
</div>
<p>With this change, you should get an accuracy and F1-score around 90%.</p>
<p>Nice gains in performance for such a small change!</p>
</section>
</section>
<section id="data-leakage-and-baseline-performance" class="level3">
<h3 class="anchored" data-anchor-id="data-leakage-and-baseline-performance">Data leakage and baseline performance</h3>
<p>You might be thinking, “MLLMs have been trained on a lot of data, so they already know a lot of the images in the dataset, which means that these results are inflated”.</p>
<p>Which is a good point, and for that purpose I’ve done two things:</p>
<ol type="1">
<li>Anonymize the names of the classes (e.g., <code>class_0</code> instead of <code>Sleepy Orange</code>), so that the model doesn’t have any information about the actual labels.</li>
<li>Run a quick experiment using a zero-shot<sup>2</sup> model without anonymizing the labels to see the model’s performance.</li>
</ol>
<p>Here’s the code for the zero-shot baseline and the results:</p>
<div id="cell-49" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">possible_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Possible labels: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>.join(df_train.class_name.unique().tolist())</span>
<span id="cb21-2">class_name_to_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(df_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class_name'</span>], df_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class_id'</span>]))</span>
<span id="cb21-3"></span>
<span id="cb21-4">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classification_model.generate_content(</span>
<span id="cb21-5">    contents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[possible_labels] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> input_images_message</span>
<span id="cb21-6">)</span>
<span id="cb21-7">response_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response.text)</span>
<span id="cb21-8"></span>
<span id="cb21-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> response_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>]:</span>
<span id="cb21-10">    item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_name_to_id.get(item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>], item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>])</span>
<span id="cb21-11"></span>
<span id="cb21-12">accuracy, f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_metrics(df_test, response_json)</span>
<span id="cb21-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"F1-score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy: 0.4800
F1-score: 0.4619</code></pre>
</div>
</div>
<p>You should get a 48% accuracy and a 46% F1-score. Both significantly higher than the ~7% you’d expect from random guessing, but still far from the 90%+ accuracy you obtained earlier.</p>
<p>This demonstrates that ICL can indeed enhance the model’s performance.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>That’s all!</p>
<p>I still find it amazing that without any “real” training and just a few minutes of work, you can achieve pretty good results in a non-trivial image classification task using ICL with Gemini Flash 1.5 (or most other MLLMs).</p>
<p>This is a mostly unexplored area. There’s a lot of room for trying out different ideas and seeing what works best. This tutorial is just a starting point.</p>
<p>Hope you found it useful! Let me know if you have any questions in the comments below.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Estimated costs as of September 8, 2024:</p>
<table class="table">
<thead>
<tr class="header">
<th>Model</th>
<th>Cost (512x512 image)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Gemini Flash 1.5</td>
<td>$0.000039</td>
</tr>
<tr class="even">
<td>Gemini Pro 1.5</td>
<td>$0.0018</td>
</tr>
<tr class="odd">
<td>GPT-4o</td>
<td>$0.000213 - $0.000638</td>
</tr>
<tr class="even">
<td>Sonnet 3.5</td>
<td>$0.001047</td>
</tr>
</tbody>
</table>
↩︎</li>
<li id="fn2"><p>That is, without providing any context images.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan and Castillo, Dylan},
  title = {Classifying Images with {Gemini} {Flash} 1.5},
  date = {2024-09-08},
  url = {https://dylancastillo.co/posts/classify-images-with-gemini-flash-1.5.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan, and Dylan Castillo. 2024. <span>“Classifying Images
with Gemini Flash 1.5.”</span> September 8, 2024. <a href="https://dylancastillo.co/posts/classify-images-with-gemini-flash-1.5.html">https://dylancastillo.co/posts/classify-images-with-gemini-flash-1.5.html</a>.
</div></div></section></div> ]]></description>
  <category>llm</category>
  <category>gemini</category>
  <guid>https://dylancastillo.co/posts/classify-images-with-gemini-flash-1.5.html</guid>
  <pubDate>Sun, 08 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Fixing missing ‘python’ error in macOS</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/til/fixing-python-not-found-error-in-macos.html</link>
  <description><![CDATA[ 




<p>After the last macOS update, I started getting the following error when trying to run <code>poetry install</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">[Errno 2] No such file or directory: 'python'</span></code></pre></div>
<p>I went through GitHub issues, StackOverflow questions, and blog posts, but none of the suggested solutions worked.</p>
<p>Finally, I found the solution somewhat hidden in this <a href="https://mac.install.guide/python/brew">blog post</a>.</p>
<p>So, what’s the fix?</p>
<p>🥁 🥁 🥁</p>
<p>Just add the following line to your <code>.zshrc</code> file:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PATH</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--prefix</span> python<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/libexec/bin:</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PATH</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>This gets the installation prefix for <code>python</code> installed via Homebrew (e.g.&nbsp;<code>/opt/homebrew/opt/python@3.12</code>), gets the <code>libexec/bin</code> directory, and adds it to the PATH.</p>
<p>In that <code>libexec/bin</code>, there’s a <code>python</code> executable that gets called when you run <code>python</code> in the terminal.</p>
<p>That’s all. Hope that helps!</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Fixing Missing “Python” Error in {macOS}},
  date = {2024-08-12},
  url = {https://dylancastillo.co/til/fixing-python-not-found-error-in-macos.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Fixing Missing <span>‘Python’</span> Error
in macOS.”</span> August 12, 2024. <a href="https://dylancastillo.co/til/fixing-python-not-found-error-in-macos.html">https://dylancastillo.co/til/fixing-python-not-found-error-in-macos.html</a>.
</div></div></section></div> ]]></description>
  <category>til</category>
  <category>python</category>
  <category>poetry</category>
  <guid>https://dylancastillo.co/til/fixing-python-not-found-error-in-macos.html</guid>
  <pubDate>Mon, 12 Aug 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Create a Kamal-ready VPS on Hetzner using Terraform</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.html</link>
  <description><![CDATA[ 




<p>These days, I deploy all my side projects using Kamal and GitHub Actions on Hetzner. Once you get the hang of it, it’s easy to maintain, fast, and cheap.</p>
<p>You can run your app with a database (SQLite), caching (Redis), background jobs (Celery), and SSL certificates (Let’s Encrypt) for roughly €5/month. Plus, if you feel the need, you can easily scale up to a more powerful Virtual Private Server (VPS).</p>
<p>But setting up a VPS with the right configuration takes a bit of time. You have to:</p>
<ol type="1">
<li>Manually create the VPS using the UI.</li>
<li>Create the necessary SSH keys.</li>
<li>Create and apply the firewall rules.</li>
<li>Create a new non-root user.</li>
<li>Install Docker and other necessary software.</li>
<li>Configure unattended-upgrades.</li>
<li>Create a directory and set permissions for Let’s Encrypt SSL certificates.</li>
<li>Reboot the system to apply all changes.</li>
</ol>
<p>I already had a small script to do most of these steps, but I wanted to automate it to a single command. So I created a Terraform script to do it for me.</p>
<p>I took <a href="https://github.com/luizkowalski/terraform-hetzner">terraform-hetzner</a> and modified it to work with a single VPS instance. My updated version is available <a href="https://github.com/dylanjcastillo/terraform-kamal-single-vps">here</a>.</p>
<section id="set-up" class="level2">
<h2 class="anchored" data-anchor-id="set-up">Set up</h2>
<p>First, set up an <a href="https://docs.hetzner.com/cloud/api/getting-started/generating-api-token/">API key</a> with <strong>read and write</strong> permissions in Hetzner Cloud.</p>
<p>Second, install <a href="https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli">terraform</a>.</p>
<p>Third, clone the repo:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/dylanjcastillo/terraform-kamal-single-vps</span></code></pre></div>
<p>Fourth, create a <code>terraform.tfvars</code> file with the following variables:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource hcl number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">hetzner_api_key = "your-api-key"</span>
<span id="cb2-2">ssh_vps_root_key = "&lt;your-ssh-root-public-key&gt;"</span>
<span id="cb2-3">ssh_vps_kamal_key = "&lt;your-ssh-kamal-public-key&gt;"</span></code></pre></div>
<p>The <code>ssh_vps_root_key</code> and <code>ssh_vps_kamal_key</code> are the public keys for the root and kamal users, respectively. You can generate them with the <code>make generate-ssh-key USER_NAME=root</code> or <code>make generate-ssh-key USER_NAME=kamal</code> commands I added to the repo.</p>
<p>Store your SSH keys in a secure location. You’ll need them to access the VPS.</p>
</section>
<section id="run-the-script" class="level2">
<h2 class="anchored" data-anchor-id="run-the-script">Run the script</h2>
<p>Once the <code>terraform.tfvars</code> file is set up, you can see what changes will be applied with the following command:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">terraform</span> plan</span></code></pre></div>
<p>This will show in detail what changes will be applied to create a Kamal-ready VPS. If you’re happy with it, you can apply the changes with the following command:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">terraform</span> apply</span></code></pre></div>
<p>This will create a VPS with the following configuration:</p>
<ul>
<li>Ubuntu 22.04 LTS</li>
<li>2 VCPU</li>
<li>2 GB RAM</li>
<li>40 GB SSD</li>
</ul>
<p>It’ll cost you roughly €5/month and will be located in Nuremberg (Germany).</p>
<p>In addition, after the VPS is created, it will automatically:</p>
<ul>
<li>Create a non-root user (kamal) with sudo privileges.</li>
<li>Install the required software (Git, Docker, curl, etc.)</li>
<li>Create a directory for Let’s Encrypt SSL certificates.</li>
<li>Create a firewall rule to allow HTTP, HTTPS, and SSH traffic.</li>
<li>Create a directory for the database (SQLite) and the cache (Redis) (<code>db/</code> and <code>data/</code>)</li>
</ul>
</section>
<section id="customizing-the-script" class="level2">
<h2 class="anchored" data-anchor-id="customizing-the-script">Customizing the script</h2>
<p>You can customize the script to fit your needs. Here are a couple of things you can change:</p>
<section id="change-the-software-to-install" class="level3">
<h3 class="anchored" data-anchor-id="change-the-software-to-install">Change the software to install</h3>
<p>If you want to change the software to install, you can modify the <code>packages</code> section in <code>cloudinit/vps.yml</code>.</p>
</section>
<section id="run-other-commands-after-the-vps-is-created" class="level3">
<h3 class="anchored" data-anchor-id="run-other-commands-after-the-vps-is-created">Run other commands after the VPS is created</h3>
<p>If you want to run other commands after the VPS is created, you can add them to the <code>runcmd</code> section in the <code>cloudinit/vps.yml</code> file.</p>
</section>
<section id="use-already-existing-firewall-rules" class="level3">
<h3 class="anchored" data-anchor-id="use-already-existing-firewall-rules">Use already existing firewall rules</h3>
<p>If you want to use already existing firewall rules, you can modify how the firewalls are attached in <code>cloud.tf</code>. Take a look at <a href="https://github.com/dylanjcastillo/terraform-kamal-single-vps/blob/4a1a6edafc1c9e927f20906298ccd083718bc97e/cloud.tf#L72C1-L91C4">this section</a> of <code>cloud.tf</code>.</p>
</section>
<section id="use-a-different-server-type-operating-system-or-region" class="level3">
<h3 class="anchored" data-anchor-id="use-a-different-server-type-operating-system-or-region">Use a different server type, operating system, or region</h3>
<p>If you want to use a different server type, operating system, or region, you can modify the <code>server_type</code>, <code>region</code>, <code>operating_system</code> variables in <code>variables.tf</code>.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This script is a great way to create a Kamal-ready VPS on Hetzner using Terraform. It’s easy to maintain, fast, and cheap.</p>
<p>All the code is available in the <a href="https://github.com/dylanjcastillo/terraform-kamal-single-vps">repo</a>.</p>
<p>Hope you find this useful!</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan and Castillo, Dylan},
  title = {Create a {Kamal-ready} {VPS} on {Hetzner} Using {Terraform}},
  date = {2024-08-11},
  url = {https://dylancastillo.co/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan, and Dylan Castillo. 2024. <span>“Create a Kamal-Ready
VPS on Hetzner Using Terraform.”</span> August 11, 2024. <a href="https://dylancastillo.co/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.html">https://dylancastillo.co/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.html</a>.
</div></div></section></div> ]]></description>
  <category>kamal</category>
  <category>hetzner</category>
  <category>terraform</category>
  <guid>https://dylancastillo.co/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.html</guid>
  <pubDate>Sun, 11 Aug 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>A Dockerfile for a Django app using Poetry</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/til/django-poetry-dockerfile.html</link>
  <description><![CDATA[ 




<p><a href="https://levels.io/">Pieter Levels</a> makes over $100k/month with a single VPS using PHP and jQuery. And until very recently, his deployment process was simply <a href="https://news.ycombinator.com/item?id=28838537">uploading files via FTP</a>.</p>
<p>If you focus on what your users want and know how to market your product, you can make a lot of money.</p>
<p>Which is why I decided to stay poor and spent an inordinate amount of time improving my deployment process.</p>
<p>Who needs money when you can get the satisfaction of that beautiful green check mark after you’ve run your CI/CD pipeline?</p>
<p>Anyways…</p>
<p>These days, I’m using <a href="https://kamal-deploy.org/">kamal</a> to deploy most of my projects.</p>
<p>I used to hate Docker. But, like with Gollum, I’ve come to realize that it’s not that bad after all.</p>
<p>I wanted to create a simple Dockerfile to run a Django app using Poetry, with a SQLite database, and hot reload. Additionally, I wanted to switch between the development and production versions of the container.</p>
<p>So here’s a simple Dockerfile that does just that.</p>
<section id="project-structure" class="level2">
<h2 class="anchored" data-anchor-id="project-structure">Project structure</h2>
<p>This is my project structure:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> db/</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> src/</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> entrypoint.sh</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> Dockerfile</span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> docker-compose.yml</span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> poetry.lock</span>
<span id="cb1-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> pyproject.toml</span></code></pre></div>
<p>The <code>src/</code> directory contains the Django project. The <code>db/</code> directory contains the SQLite database. The <code>entrypoint.sh</code> file is the entrypoint for the Docker container.</p>
<p>If your project is not structured in a similar way, you might need to adapt the files below to your needs.</p>
</section>
<section id="dockerfile" class="level2">
<h2 class="anchored" data-anchor-id="dockerfile">Dockerfile</h2>
<p>I created a <code>Dockerfile</code> that fulfilled this:</p>
<ol type="1">
<li>A base stage with Python 3.10 and Poetry installed.</li>
<li>A builder stage that installs the dependencies.</li>
<li>A runner stage that copies the virtual environment from the builder stage.</li>
<li>A development stage that runs the entrypoint as a root user.</li>
<li>A production stage that runs the entrypoint as a non-root user.</li>
</ol>
<p>Here’s the full <code>Dockerfile</code>:</p>
<details>
<summary>
Dockerfile
</summary>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource dockerfile number-lines code-with-copy"><code class="sourceCode dockerfile"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> python:3.10-slim <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> base</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> POETRY_HOME=/opt/poetry</span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> PATH=${POETRY_HOME}/bin:${PATH}</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> update <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-install-recommends</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-8">    curl <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> clean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> /var/lib/apt/lists/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-sSL</span> https://install.python-poetry.org <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> builder</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb2-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> poetry.lock pyproject.toml ./</span>
<span id="cb2-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> config virtualenvs.in-project true</span>
<span id="cb2-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--only</span> main <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-interaction</span></span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> runner</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb2-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--from=builder</span> /app/.venv/ /app/.venv/</span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> . /app</span>
<span id="cb2-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /db</span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">EXPOSE</span> 8000</span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> +x /app/src/entrypoint.sh</span>
<span id="cb2-32"></span>
<span id="cb2-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> runner <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> development</span>
<span id="cb2-34"></span>
<span id="cb2-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app/src</span>
<span id="cb2-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENTRYPOINT</span> [ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/app/src/entrypoint.sh"</span> ]</span>
<span id="cb2-37"></span>
<span id="cb2-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> runner <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> production</span>
<span id="cb2-39"></span>
<span id="cb2-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set user and group</span></span>
<span id="cb2-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> user=django</span>
<span id="cb2-42"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> group=django</span>
<span id="cb2-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> uid=1000</span>
<span id="cb2-44"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> gid=1000</span>
<span id="cb2-45"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">groupadd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${gid}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${group}</span></span>
<span id="cb2-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">useradd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${uid}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${group}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /bin/sh <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${user}</span></span>
<span id="cb2-47"></span>
<span id="cb2-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Switch to user</span></span>
<span id="cb2-49"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${uid}</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${gid}</span> /app</span>
<span id="cb2-50"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${uid}</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${gid}</span> /db</span>
<span id="cb2-51"></span>
<span id="cb2-52"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">USER</span> ${uid}:${gid}</span>
<span id="cb2-53"></span>
<span id="cb2-54"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app/src</span>
<span id="cb2-55"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENTRYPOINT</span> [ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/app/src/entrypoint.sh"</span> ]</span></code></pre></div>
</details>
</section>
<section id="entrypoint" class="level2">
<h2 class="anchored" data-anchor-id="entrypoint">Entrypoint</h2>
<p>For <code>entrypoint.sh</code> I use this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/sh</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ENVIRONMENT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"production"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb3-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running in production mode"</span></span>
<span id="cb3-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> poetry run gunicorn <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> gunicorn.conf.py</span>
<span id="cb3-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ENVIRONMENT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"development"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb3-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running in development mode"</span></span>
<span id="cb3-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> poetry run python manage.py runserver 0.0.0.0:8000</span>
<span id="cb3-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb3-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENVIRONMENT variable is not set"</span></span>
<span id="cb3-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
<p>If <code>ENVIRONMENT</code> is set to <code>production</code>, the container will run the production server using gunicorn. If it is <code>development</code>, the container will run Django’s development server.</p>
</section>
<section id="docker-compose" class="level2">
<h2 class="anchored" data-anchor-id="docker-compose">Docker-compose</h2>
<p>Then, I have a docker-compose that lets you run the development and production containers:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">app</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> .</span></span>
<span id="cb4-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">target</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${ENVIRONMENT}</span></span>
<span id="cb4-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">platform</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> linux/amd64</span></span>
<span id="cb4-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}</span></span>
<span id="cb4-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_DEBUG=${DJANGO_DEBUG}</span></span>
<span id="cb4-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_SECURE_SSL_REDIRECT=${DJANGO_SECURE_SSL_REDIRECT}</span></span>
<span id="cb4-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_SECURE_HSTS_SECONDS=${DJANGO_SECURE_HSTS_SECONDS}</span></span>
<span id="cb4-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=${DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS}</span></span>
<span id="cb4-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_SECURE_HSTS_PRELOAD=${DJANGO_SECURE_HSTS_PRELOAD}</span></span>
<span id="cb4-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_SESSION_COOKIE_SECURE=${DJANGO_SESSION_COOKIE_SECURE}</span></span>
<span id="cb4-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_CSRF_COOKIE_SECURE=${DJANGO_CSRF_COOKIE_SECURE}</span></span>
<span id="cb4-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> CACHE_REDIS_URL=${CACHE_REDIS_URL}</span></span>
<span id="cb4-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ENVIRONMENT=${ENVIRONMENT}</span></span>
<span id="cb4-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> .env</span></span>
<span id="cb4-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"8000:8000"</span></span>
<span id="cb4-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./db/:/app/db/"</span></span>
<span id="cb4-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">develop</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">watch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">action</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> sync</span></span>
<span id="cb4-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ./src/</span></span>
<span id="cb4-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">target</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /app/src</span></span>
<span id="cb4-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">action</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> rebuild</span></span>
<span id="cb4-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pyproject.toml</span></span></code></pre></div>
<p>In this <code>docker-compose</code>, I use <code>ENVIRONMENT</code> to switch between the development and production containers.</p>
<p>I also use the <a href="https://docs.docker.com/compose/file-watch/">Compose Watch</a> to reload the container when I make changes to the code and to rebuild the container when I make changes to the <code>pyproject.toml</code> file.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>That’s it. I hope you find this useful.</p>
<p>And remember, while Pieter is busy counting his cash, here you are counting the number of successful builds.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {A {Dockerfile} for a {Django} App Using {Poetry}},
  date = {2024-06-22},
  url = {https://dylancastillo.co/til/django-poetry-dockerfile.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“A Dockerfile for a Django App Using
Poetry.”</span> June 22, 2024. <a href="https://dylancastillo.co/til/django-poetry-dockerfile.html">https://dylancastillo.co/til/django-poetry-dockerfile.html</a>.
</div></div></section></div> ]]></description>
  <category>til</category>
  <category>python</category>
  <category>django</category>
  <guid>https://dylancastillo.co/til/django-poetry-dockerfile.html</guid>
  <pubDate>Sat, 22 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Migrate a blog from Ghost to Quarto</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/til/migrate-blog-from-ghost-to-quarto.html</link>
  <description><![CDATA[ 




<p>When I started blogging five years ago, I read all reddit posts comparing blogging platforms and concluded that <a href="https://ghost.org/">Ghost</a> was the best choice because I needed a powerful tool for all those millions of visitors my blog would get.</p>
<p>I saw myself as the <a href="https://es.wikipedia.org/wiki/Gabriel_Garc%C3%ADa_M%C3%A1rquez">García Márquez</a> of technical writing.</p>
<p>Fast forward five years, and I’ve paid $2,000 for hosting a blog that barely gets 8k visits per month. Plus, I’m forced to write it in an interface that I hate.</p>
<p>With that kind of money, I could have funded a moderately extravagant hamster-only summer party.</p>
<p>Not that I should, but I could.</p>
<p>Yes, I’m not proud of that decision<sup>1</sup>. So I’m migrating my blog from Ghost to Quarto.</p>
<p>Here’s a short guide on how to migrate your blog from Ghost to Quarto.</p>
<section id="migrate-blog-from-ghost-to-quarto" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="migrate-blog-from-ghost-to-quarto">Migrate blog from Ghost to Quarto</h2>
<section id="setting-up-your-blog" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-your-blog">Setting up your blog</h3>
<p>First, install <a href="https://quarto.org/">Quarto</a> and create a blog in an empty repository:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> create project blog myblog</span></code></pre></div>
<p>The resulting <code>myblog</code> folder will contain the barebones configuration for a Quarto blog and a <code>posts</code> folder with some example posts. You can remove those posts. Later on, you’ll add your own.</p>
</section>
<section id="exporting-your-ghosts-blog-content" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="exporting-your-ghosts-blog-content">Exporting your Ghost’s blog content</h3>
<p>Then, you need to download a copy of your Ghost’s blog content.</p>
<p>Go to <code>&lt;YOUR_BLOG_URL&gt;/ghost/#/settings/migration</code> and click on <code>Export</code>, then <code>Export JSON</code>.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/ghost-export.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Exporting my blog"><img src="https://dylancastillo.co/til/images/ghost-export.png" class="img-fluid figure-img" alt="Exporting my blog"></a></p>
<figcaption class="margin-caption">Exporting my blog</figcaption>
</figure>
</div>
<p>This is pretty obvious, but remember to replace <code>&lt;YOUR_BLOG_URL&gt;</code> with your blog’s URL.</p>
<p>You’ll get a JSON file with all the posts and pages in your blog. You’ll need to process it to convert your posts to Quarto posts.</p>
<p>This small Python script did the heavy lifting for me:</p>
<details>
<summary>
Show the code
</summary>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> markdownify <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> markdownify <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> md</span>
<span id="cb2-8"></span>
<span id="cb2-9"></span>
<span id="cb2-10">BLOG_URL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://dylancastillo.co"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace with your blog's URL</span></span>
<span id="cb2-11">BLOG_JSON_DUMP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./dylan-castillo.ghost.2024-05-28-10-39-09.json"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace with the path to the JSON file you downloaded</span></span>
<span id="cb2-12">BLOG_AUTHOR_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dylan Castillo"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace with your name</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> download_images(markdown_content, post_slug):</span>
<span id="cb2-16">    soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(markdown_content, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html.parser"</span>)</span>
<span id="cb2-17">    images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"img"</span>)</span>
<span id="cb2-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> images:</span>
<span id="cb2-19">        os.makedirs(post_slug, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> img <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> images:</span>
<span id="cb2-21">            img_url_raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src"</span>]</span>
<span id="cb2-22">            img_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_url_raw.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__GHOST_URL__"</span>, BLOG_URL)</span>
<span id="cb2-23">            img_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.basename(img_url)</span>
<span id="cb2-24">            response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(img_url, stream<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> response.status_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>:</span>
<span id="cb2-26">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Downloading image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>post_slug<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-27">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(os.path.join(post_slug, img_name), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-28">                    f.write(response.content)</span>
<span id="cb2-29">                markdown_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> markdown_content.replace(</span>
<span id="cb2-30">                    img_url_raw, os.path.join(post_slug, img_name)</span>
<span id="cb2-31">                )</span>
<span id="cb2-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-33">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Failed to download image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> markdown_content</span>
<span id="cb2-35"></span>
<span id="cb2-36"></span>
<span id="cb2-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> process_posts(data):</span>
<span id="cb2-38">    posts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posts"</span>]</span>
<span id="cb2-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> post <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> posts:</span>
<span id="cb2-40">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processing post:"</span>, post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>])</span>
<span id="cb2-41">        title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>]</span>
<span id="cb2-42">        description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"custom_excerpt"</span>]</span>
<span id="cb2-43">        author <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BLOG_AUTHOR_NAME</span>
<span id="cb2-44">        date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb2-45">            datetime.strptime(post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"published_at"</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T%H:%M:%S.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z"</span>).strftime(</span>
<span id="cb2-46">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%m/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/%Y"</span></span>
<span id="cb2-47">            )</span>
<span id="cb2-48">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"published_at"</span>]</span>
<span id="cb2-49">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb2-50">        )</span>
<span id="cb2-51">        date_modified <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb2-52">            datetime.strptime(post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"updated_at"</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T%H:%M:%S.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z"</span>).strftime(</span>
<span id="cb2-53">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%m/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/%Y"</span></span>
<span id="cb2-54">            )</span>
<span id="cb2-55">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"updated_at"</span>]</span>
<span id="cb2-56">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb2-57">        )</span>
<span id="cb2-58"></span>
<span id="cb2-59">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert HTML content to Markdown</span></span>
<span id="cb2-60">        markdown_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> download_images(</span>
<span id="cb2-61">            post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slug"</span>]</span>
<span id="cb2-62">        )</span>
<span id="cb2-63">        markdown_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> md(markdown_content, code_language<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"python"</span>)</span>
<span id="cb2-64">        markdown_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> markdown_content.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__GHOST_URL__"</span>, BLOG_URL)</span>
<span id="cb2-65">        markdown_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""---</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">title: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">description: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>description<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">author: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>author<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">date: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">date-modified: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>date_modified<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">---</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>markdown_content<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-66"></span>
<span id="cb2-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the markdown content to a file</span></span>
<span id="cb2-68">        filename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'slug'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.md"</span></span>
<span id="cb2-69">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filename, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-70">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.write(markdown_content)</span>
<span id="cb2-71"></span>
<span id="cb2-72"></span>
<span id="cb2-73"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb2-74">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(BLOG_JSON_DUMP) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-75">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb2-76">    process_posts(data)</span></code></pre></div>
</details>
<p>When you run the script, it will create a folder with all the posts in .md format and their images. Feel free to adapt it to your needs.</p>
</section>
<section id="customizing-your-blog" class="level3">
<h3 class="anchored" data-anchor-id="customizing-your-blog">Customizing your blog</h3>
<p>Through trial and error, I found some settings that helped me customize the look and feel of my blog.</p>
<p>Here are some of the things I modified:</p>
<ol type="1">
<li>Added RSS, favicon, and customized the navbar:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_quarto.yml</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="_quarto.yml" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">website</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # The title of your blog</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">site-url</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # For the RSS feed that no one will read</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">favicon</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Add a favicon to the blog</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navbar</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Customize the navbar if you want</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page-footer</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Add a page footer like "Copyright 2024, Saul Goodman" to sound legit</span></span></code></pre></div>
</div>
<ol start="2" type="1">
<li>Added custom CSS and JS and a custom theme:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_quarto.yml</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="_quarto.yml" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include-in-header</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">      - </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb4-5">          &lt;link href="&lt;YOUR_CUSTOM_FONT_URL&gt;" rel="stylesheet"&gt;</span>
<span id="cb4-6">          &lt;script src="&lt;YOUR_CUSTOM_JS_URL&gt;" defer&gt;&lt;/script&gt;</span>
<span id="cb4-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page-layout</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"article"</span></span>
<span id="cb4-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Pick a theme and customize it in `custom.scss`</span></span>
<span id="cb4-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;YOUR_THEME&gt;</span></span>
<span id="cb4-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> custom.scss</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Add your custom CSS here</span></span>
<span id="cb4-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code-line-numbers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Add line numbers to code blocks</span></span></code></pre></div>
</div>
<ol start="3" type="1">
<li>For each post, I used this front matter:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>&lt;POST_SLUG&gt;.md</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="<POST_SLUG>.md" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;POST_TITLE&gt;"</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aliases</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /&lt;POST_SLUG&gt;/</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Add an alias to the previous post's URL</span></span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">description-meta</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;POST_DESCRIPTION&gt;"</span></span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;POST_DATE&gt;"</span></span>
<span id="cb5-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date-modified</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> last-modified</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Automatically set to the last modified date</span></span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb5-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc-depth</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb5-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lightbox</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # For images</span></span>
<span id="cb5-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fig-cap-location</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> margin</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Captions for images</span></span>
<span id="cb5-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">categories</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;CATEGORY&gt;</span></span>
<span id="cb5-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">author</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;AUTHOR_NAME&gt;</span></span>
<span id="cb5-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">url</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;AUTHOR_URL&gt;</span></span>
<span id="cb5-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">affiliation</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;AUTHOR_AFFILIATION&gt;</span></span>
<span id="cb5-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">affiliation-url</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;AUTHOR_AFFILIATION_URL&gt;</span></span>
<span id="cb5-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">citation</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb5-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">comments</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">utterances</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # For comments</span></span>
<span id="cb5-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;YOUR_GITHUB_USERNAME&gt;/&lt;YOUR_GITHUB_REPO&gt;</span></span>
<span id="cb5-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">issue-term</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pathname</span></span>
<span id="cb5-24"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
</div>
<p>See my <a href="https://github.com/dylanjcastillo/blog/blob/main/_quarto.yml">settings</a> for an example and a recent post <a href="https://github.com/dylanjcastillo/blog/blob/main/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.qmd">source</a> for reference.</p>
<p>For the CSS, I copied <a href="https://github.com/quarto-dev/quarto-cli/blob/main/src/resources/formats/html/bootstrap/themes/darkly.scss">darkly</a> and created a custom <code>custom.scss</code> file to modify some Bootstrap styles. I just changed some colors and a couple of styles to make the blog look closer to my Ghost theme. It was super easy.</p>
</section>
<section id="deployment-using-github-pages-github-actions" class="level3">
<h3 class="anchored" data-anchor-id="deployment-using-github-pages-github-actions">Deployment using GitHub Pages + GitHub Actions</h3>
<p>Quarto offers multiple <a href="https://quarto.org/docs/publishing/">deployment options</a>. I wanted one where I could push changes to a GitHub repository, and have the blog automatically deployed. I went with GitHub Pages combined with GitHub Actions.</p>
<p>To deploy the blog, I created a <a href="https://github.com/dylanjcastillo/blog">GitHub repository</a>, added the blog’s content, updated <code>.gitignore</code> to ignore the <code>/.quarto/</code> and <code>/_site/</code> and updated <code>_quarto.yml</code> to only compute code locally (otherwise you’d need a Python kernel running on your GitHub Actions runner):</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_quarto.yml</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="_quarto.yml" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">execute</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">freeze</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> auto</span></span></code></pre></div>
</div>
<p>Then I ran this command to automatically generate the workflow <code>.github/workflows/publish.yml</code> for me:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> publish gh-pages</span></code></pre></div>
<p>Since then, every time I push changes to the <code>main</code> branch, GitHub Actions automatically renders the website and updates the <code>gh-pages</code> branch.</p>
</section>
<section id="using-a-custom-domain" class="level3">
<h3 class="anchored" data-anchor-id="using-a-custom-domain">Using a custom domain</h3>
<p>That seemed to work at first, but very quickly I noticed that whenever I pushed changes to the <code>main</code> branch, the site would no longer be served from my custom domain <a href="https://dylancastillo.co">dylancastillo.co</a>.</p>
<p>When you render your website, Quarto recreates the CNAME file in the <code>gh-pages</code> branch, which seems to break the custom domain setup in GitHub Pages.</p>
<p>I found a solution in this <a href="https://github.com/quarto-dev/quarto-cli/discussions/5341">discussion</a> and added a CNAME file to the root of the repository with my custom domain:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>CNAME</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename="CNAME" style="background: #f1f3f5;"><pre class="sourceCode numberSource txt number-lines code-with-copy"><code class="sourceCode default"><span id="cb8-1">dylancastillo.co</span></code></pre></div>
</div>
<p>Then, I added this to <code>_quarto.yml</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_quarto.yml</strong></pre>
</div>
<div class="sourceCode" id="cb9" data-filename="_quarto.yml" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">project</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> website</span></span>
<span id="cb9-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resources</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # New</span></span>
<span id="cb9-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> CNAME</span></span></code></pre></div>
</div>
<p>And that worked!</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>There you go, my friend.</p>
<p>Now you can also break free from Ghost.</p>
<p>See you in the next post.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Choosing Ghost. No regrets about the hypothetical hamster party.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Migrate a Blog from {Ghost} to {Quarto}},
  date = {2024-06-16},
  url = {https://dylancastillo.co/til/migrate-blog-from-ghost-to-quarto.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Migrate a Blog from Ghost to
Quarto.”</span> June 16, 2024. <a href="https://dylancastillo.co/til/migrate-blog-from-ghost-to-quarto.html">https://dylancastillo.co/til/migrate-blog-from-ghost-to-quarto.html</a>.
</div></div></section></div> ]]></description>
  <category>til</category>
  <category>quarto</category>
  <guid>https://dylancastillo.co/til/migrate-blog-from-ghost-to-quarto.html</guid>
  <pubDate>Sun, 16 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Installing Alacritty, Zellij, and Neovim in macOS</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/til/install-alacritty-and-zellij-in-macos.html</link>
  <description><![CDATA[ 




<p>Ever since I saw <a href="https://www.youtube.com/watch?v=8wU8k2kDaTo">The Matrix</a>, I’ve wanted to be a hacker.</p>
<p>When I say hacker, I mean having a cool-looking terminal. The kind that makes people think I’m a stealing millions from banks when, in reality, I’m just struggling to exit vim.</p>
<p>I use macOS. The closest I’ve been to being a hacker is using <a href="https://github.com/VSCodeVim/Vim">vim hotkeys</a> in VSCode.</p>
<p>It’s not that I haven’t tried to look the part. I was a just one audio driver away from saying <a href="https://www.reddit.com/r/linuxmemes/comments/9xgfxq/why_i_use_arch_btw/">“I use Arch btw”</a>. I did succeed with Ubuntu, but honestly, using Linux as my main OS always felt like too much work<sup>1</sup>. So that didn’t last long.</p>
<p>But, today, after reading about <a href="https://world.hey.com/dhh/introducing-omakub-354db366">DHH’s Omakub</a>, I though it was time to give my hacker dreams a second shot.</p>
<p>Installing Ubuntu felt like a bit too much work<sup>2</sup>, so I decided to settle on just upgrading my terminal.</p>
<p>I decided to set up Alacritty, Zellij, and Neovim on my M3 MacBook Pro.</p>
<p>Sure, I have client projects to deliver. But how could I let go of one-in-a-lifetime opportunity to procrastinate and imagine I’m a genius hacker for an afternoon?</p>
<section id="installing-alacritty" class="level2">
<h2 class="anchored" data-anchor-id="installing-alacritty">Installing Alacritty</h2>
<p>Alacritty is a terminal emulator, similar to <a href="https://iterm2.com/">Iterm2</a> and others. It’s selling point is that it’s very fast due to GPU-acceleration. Plus, you also get 256 colors support by default.</p>
<p>The best way to install it is using Homebrew:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cask</span> alacritty</span></code></pre></div>
<p>Then, you you can customize it to your liking by creating a <code>~/.config/alacritty/alacritty.toml</code> file.</p>
<p>I ended up modifying just a couple of things:</p>
<ol type="1">
<li>Increase padding.</li>
<li>Change the font.</li>
<li>Change the color scheme. I used One Dark from <a href="https://gist.github.com/r-darwish/f8bb21a6c89a02c4bef76cc38bddad39">this gist</a>.</li>
</ol>
<details>
<summary>
Show the code
</summary>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">window</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">padding.x = 16</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">padding.y = 14</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">decorations = "none"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Removes the window decoration (title bar, etc.)</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">font</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size = 13</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FiraCode Nerd Font</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">normal = { family = "FiraCode Nerd Font", style = "Regular" }</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bold = { family = "FiraCode Nerd Font", style = "Bold" }</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">italic = { family = "FiraCode Nerd Font", style = "Italic" }</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One Dark theme</span></span>
<span id="cb2-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colors.primary</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">background = '0x1e2127'</span></span>
<span id="cb2-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">foreground = '0xabb2bf'</span></span>
<span id="cb2-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bright_foreground = '0xe6efff'</span></span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normal colors</span></span>
<span id="cb2-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colors.normal</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">black = '0x1e2127'</span></span>
<span id="cb2-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">red = '0xe06c75'</span></span>
<span id="cb2-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">green = '0x98c379'</span></span>
<span id="cb2-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yellow = '0xd19a66'</span></span>
<span id="cb2-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">blue = '0x61afef'</span></span>
<span id="cb2-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">magenta = '0xc678dd'</span></span>
<span id="cb2-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cyan = '0x56b6c2'</span></span>
<span id="cb2-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">white = '0x828791'</span></span>
<span id="cb2-31"></span>
<span id="cb2-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bright colors</span></span>
<span id="cb2-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colors.bright</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">black = '0x5c6370'</span></span>
<span id="cb2-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">red = '0xe06c75'</span></span>
<span id="cb2-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">green = '0x98c379'</span></span>
<span id="cb2-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yellow = '0xd19a66'</span></span>
<span id="cb2-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">blue = '0x61afef'</span></span>
<span id="cb2-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">magenta = '0xc678dd'</span></span>
<span id="cb2-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cyan = '0x56b6c2'</span></span>
<span id="cb2-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">white = '0xe6efff'</span></span>
<span id="cb2-42"></span>
<span id="cb2-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dim colors</span></span>
<span id="cb2-44"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colors.dim</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">black = '0x1e2127'</span></span>
<span id="cb2-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">red = '0xe06c75'</span></span>
<span id="cb2-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">green = '0x98c379'</span></span>
<span id="cb2-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yellow = '0xd19a66'</span></span>
<span id="cb2-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">blue = '0x61afef'</span></span>
<span id="cb2-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">magenta = '0xc678dd'</span></span>
<span id="cb2-51"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cyan = '0x56b6c2'</span></span>
<span id="cb2-52"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">white = '0x828791'</span></span></code></pre></div>
</details>
<p>I use <a href="https://github.com/tonsky/FiraCode">FiraCode</a> Nerd Font. <a href="https://www.nerdfonts.com/">Nerd Fonts</a> are a collection of fonts that include glyphs such as icons that represent folders, file types, <a href="https://github.com/ryanoasis/powerline-extra-symbols/blob/master/img/fontforge.png?raw=true">weird arrows</a>, etc.</p>
<p>You can install them using Homebrew:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install font-<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>name-of-the-font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>-nerd-font <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For example, font-fira-code-nerd-font</span></span></code></pre></div>
</section>
<section id="installing-zellij" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="installing-zellij">Installing Zellij</h2>
<p>Zellij is an improved version of <a href="https://en.wikipedia.org/wiki/Tmux"><code>tmux</code></a>. Whenever I used tmux, I spent half my time figuring out the key bindings. Zellij shows the key bindings on screen (unless you disable it), which greatly improves the user experience.</p>
<p>This is what it looks like:</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/zellij-screenshot.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Zellij"><img src="https://dylancastillo.co/til/images/zellij-screenshot.png" class="img-fluid figure-img" alt="Zellij"></a></p>
<figcaption class="margin-caption">Zellij</figcaption>
</figure>
</div>
<p>Same as before, the best way to install it is using Homebrew.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install zellij</span></code></pre></div>
<p>You can customize it by creating a <code>~/.config/zellij/config.kdl</code> file.</p>
<p>I just copied the <a href="https://github.com/zellij-org/zellij/blob/main/zellij-utils/assets/themes/one-half-dark.kdl">One Half Dark</a> theme they provide.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource kdl number-lines code-with-copy"><code class="sourceCode"><span id="cb5-1">theme "one-half-dark"</span>
<span id="cb5-2"></span>
<span id="cb5-3">themes {</span>
<span id="cb5-4">    one-half-dark {</span>
<span id="cb5-5">        fg 169 177 214</span>
<span id="cb5-6">        bg 26 27 38</span>
<span id="cb5-7">        black 56 62 90</span>
<span id="cb5-8">        red 249 51 87</span>
<span id="cb5-9">        green 158 206 106</span>
<span id="cb5-10">        yellow 224 175 104</span>
<span id="cb5-11">        blue 122 162 247</span>
<span id="cb5-12">        magenta 187 154 247</span>
<span id="cb5-13">        cyan 42 195 222</span>
<span id="cb5-14">        white 192 202 245</span>
<span id="cb5-15">        orange 255 158 100</span>
<span id="cb5-16">    }</span>
<span id="cb5-17">}</span></code></pre></div>
<p>Is One Half Dark the same as One Dark? I don’t really know. I like to live dangerously.</p>
<section id="making-zellij-play-nice-with-alacritty" class="level3">
<h3 class="anchored" data-anchor-id="making-zellij-play-nice-with-alacritty">Making Zellij play nice with Alacritty</h3>
<p>Getting Alacritty to work with Zellij took me a while to figure out. But luckily it’s as simple as adding the full path to the <code>zellij</code> binary in the <code>~/.config/alacritty/alacritty.toml</code> file.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb6-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">     program = "/opt/homebrew/bin/zellij"</span></span></code></pre></div>
</section>
</section>
<section id="installing-neovim-and-lazyvim" class="level2">
<h2 class="anchored" data-anchor-id="installing-neovim-and-lazyvim">Installing Neovim and LazyVim</h2>
<p><a href="https://neovim.io/">Neovim</a> is a fork from <a href="https://www.vim.org/">Vim</a>, that solves some of Vim’s issues<sup>3</sup>. I didn’t really know if it was better or worse than Vim, but given that DHH recommended it, I thought it was a good idea to give it a shot.</p>
<p><a href="https://github.com/LazyVim/starter">LazyVim</a> is a premade configuration for Neovim. The purists will probably hate it, but it’s a good start.</p>
<p>I had my own <code>.vimrc</code>, and after trying LazyVim for 30 minutes or so, I realized my config sucked.</p>
<p>First, install Neovim using Homebrew.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install neovim</span></code></pre></div>
<p>Then, install LazyVim.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/LazyVim/starter ~/.config/nvim</span></code></pre></div>
<p>So far, I’ve only made a few changes:</p>
<ul>
<li>Installed <a href="https://github.com/github/copilot.vim">Copilot</a>, <a href="https://github.com/CopilotC-Nvim/CopilotChat.nvim">CopilotChat</a>, and <a href="https://github.com/echasnovski/mini.surround">mini-surround</a>.</li>
<li>Installed <a href="https://github.com/navarasu/onedark.nvim">One Dark</a> color scheme.</li>
</ul>
<p>The plugins I mentioned are available in <code>:LazyExtras</code>, so it’s very easy to install them. Run <code>:LazyExtras</code>, select the plugins, and then install them with <span class="visually-hidden">I</span>.</p>
<p>To install <code>One Dark</code>, you must create a new file in <code>~/.config/nvim/lua/plugins/</code> containing the following code:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource lua number-lines code-with-copy"><code class="sourceCode lua"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-2">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"navarasu/onedark.nvim"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb9-3"></span>
<span id="cb9-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Configure LazyVim to load One Dark</span></span>
<span id="cb9-5">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LazyVim/LazyVim"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">opts</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-8">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">colorscheme</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"onedark"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb9-10">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb9-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="other-useful-tools" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="other-useful-tools">Other useful tools</h2>
<p>While exploring <a href="https://github.com/basecamp/omakub/">Omakub’s repository</a>, I also learned about other useful tools that I’ve now included in my daily workflow:</p>
<section id="lazydocker" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="lazydocker">lazydocker</h3>
<p><a href="https://github.com/jesseduffield/lazydocker">lazydocker</a>: A simple terminal UI to manage everything Docker. Much better than everything else I’ve used.</p>
<p>Docker is great. But, until now, the experience of managing Docker containers sucked.</p>
<p>Take a look at the main screen:</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/lazydocker-screenshot.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="lazydocker"><img src="https://dylancastillo.co/til/images/lazydocker-screenshot.png" class="img-fluid figure-img" alt="lazydocker"></a></p>
<figcaption class="margin-caption">lazydocker</figcaption>
</figure>
</div>
</section>
<section id="lazygit" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="lazygit">lazygit</h3>
<p><a href="https://github.com/jesseduffield/lazygit">lazygit</a> is a simple terminal UI for <code>git</code>.</p>
<p>I’ve found it better than GitHub Desktop when doing complex operations.</p>
<p>Here’s a screenshot of the main screen:</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/lazygit-screenshot.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="lazygit"><img src="https://dylancastillo.co/til/images/lazygit-screenshot.png" class="img-fluid figure-img" alt="lazygit"></a></p>
<figcaption class="margin-caption">lazygit</figcaption>
</figure>
</div>
</section>
<section id="eza" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="eza">eza</h3>
<p><a href="https://github.com/eza-community/eza">eza</a> is an improved version of <code>ls</code>.</p>
<p>I also added a couple of aliases from Omakub:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">alias</span> ls=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'eza -lh --group-directories-first --icons --hyperlink'</span></span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">alias</span> lsa=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ls -a'</span></span>
<span id="cb10-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">alias</span> lt=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'eza --tree --level=2 --long --icons --git'</span></span>
<span id="cb10-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">alias</span> lta=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lt -a'</span></span></code></pre></div>
<p>If you run <code>lta</code> you’ll get a nice view of the current directory.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/eza-screenshot.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="eza"><img src="https://dylancastillo.co/til/images/eza-screenshot.png" class="img-fluid figure-img" alt="eza"></a></p>
<figcaption class="margin-caption">eza</figcaption>
</figure>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>That’s all. I hope you learned something from this post or, at least, got a cool looking terminal.</p>
<p>There’s nothing else to say except that I’m never going to recover those 4 hours of my life.</p>
<p>I should get back to work.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I’m sure you’re itching to explain how I’m completely wrong about this, and how you haven’t had to fix anything in years. Please reach me at <a href="mailto:elon@x.com">elon@x.com</a>↩︎</p></li>
<li id="fn2"><p>Can you even install Ubuntu on a Mac?↩︎</p></li>
<li id="fn3"><p>Including its horrible website.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Installing {Alacritty,} {Zellij,} and {Neovim} in {macOS}},
  date = {2024-06-08},
  url = {https://dylancastillo.co/til/install-alacritty-and-zellij-in-macos.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Installing Alacritty, Zellij, and Neovim
in macOS.”</span> June 8, 2024. <a href="https://dylancastillo.co/til/install-alacritty-and-zellij-in-macos.html">https://dylancastillo.co/til/install-alacritty-and-zellij-in-macos.html</a>.
</div></div></section></div> ]]></description>
  <category>til</category>
  <category>alacritty</category>
  <category>zellij</category>
  <category>neovim</category>
  <guid>https://dylancastillo.co/til/install-alacritty-and-zellij-in-macos.html</guid>
  <pubDate>Sat, 08 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Live Components with Django and htmx</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/til/live-components-with-django-and-htmx.html</link>
  <description><![CDATA[ 




<p>I discovered <a href="https://github.com/EmilStenstrom/django-components/"><code>django-components</code></a> late last year and I quickly realized it was the missing piece in my Django + htmx workflow. It made my developer experience so much better, that I even started contributing to it.</p>
<p><code>django-components</code> lets you build components that combine HTML, JS, and CSS in a single place. Plus, it now lets you use components as views. This feature allows you to keep all the logic for a part of your application in one place, giving you great <a href="https://htmx.org/essays/locality-of-behaviour/">locality of behavior</a>.</p>
<p>A <a href="https://htmx.org/examples/click-to-load/">click-to-load</a> component would look something like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.core.paginator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Paginator</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django_components <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> component</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> src.app.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Contact</span>
<span id="cb1-5"></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@component.register</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"click_to_load"</span>)</span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ClickToLoadTableComponent(component.Component):</span>
<span id="cb1-9">    template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        {</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">or contact in page_obj %}</span></span>
<span id="cb1-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            &lt;tr&gt;</span></span>
<span id="cb1-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                &lt;td&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> contact.id </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span></span>
<span id="cb1-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                &lt;td&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> contact.first_name </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> contact.last_name </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span></span>
<span id="cb1-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                &lt;td&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> contact.email </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span></span>
<span id="cb1-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                &lt;td&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> contact.status </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span></span>
<span id="cb1-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            &lt;/tr&gt;</span></span>
<span id="cb1-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            {</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% i</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">f forloop.last and page_obj.has_next %}</span></span>
<span id="cb1-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                &lt;tr id="replaceMe"&gt;</span></span>
<span id="cb1-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                    &lt;td colspan="4"&gt;</span></span>
<span id="cb1-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                        &lt;button</span></span>
<span id="cb1-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                            class='primary'</span></span>
<span id="cb1-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                            hx-get="{</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% u</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">rl 'contacts' page=page_obj.next_page_number %}"</span></span>
<span id="cb1-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                            hx-target="#replaceMe"</span></span>
<span id="cb1-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                            hx-swap="outerHTML"&gt;</span></span>
<span id="cb1-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                            Load more...</span></span>
<span id="cb1-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                        &lt;/button&gt;</span></span>
<span id="cb1-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                    &lt;/td&gt;</span></span>
<span id="cb1-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                &lt;/tr&gt;</span></span>
<span id="cb1-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            {</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ndif %}</span></span>
<span id="cb1-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        {</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ndfor %}</span></span>
<span id="cb1-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-32"></span>
<span id="cb1-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_context_data(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, page_obj, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb1-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"page_obj"</span>: page_obj}</span>
<span id="cb1-35"></span>
<span id="cb1-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, request, page, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb1-37">        paginator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Paginator(Contact.objects.order_by(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-38">        page_obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> paginator.get_page(page)</span>
<span id="cb1-39">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"page_obj"</span>: page_obj}</span>
<span id="cb1-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.render_to_response(context)</span></code></pre></div>
<p>You can use this component in any view using <code>{% component 'click_to_load' page_obj=page_obj %}</code> or render it outside of a view by adding it to <code>urls.py</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.urls <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> path</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> src.components.click_to_load.table <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ClickToLoadTableComponent</span>
<span id="cb2-4"></span>
<span id="cb2-5">urlpatterns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb2-6">    path(</span>
<span id="cb2-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contacts/&lt;int:page&gt;"</span>,</span>
<span id="cb2-8">        ClickToLoadTableComponent.as_view(),</span>
<span id="cb2-9">        name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contacts"</span>,</span>
<span id="cb2-10">    ),</span>
<span id="cb2-11">]</span></code></pre></div>
<p>Short and sweet, just like the best things in life.</p>
<section id="django-live-components" class="level2">
<h2 class="anchored" data-anchor-id="django-live-components">Django Live Components</h2>
<p>I thought it’d be fun to use the library for something it wasn’t designed for: streaming component changes through server-sent events (SSE).</p>
<p>It took me a few hours and several reads of <a href="https://valberg.dk/">Víðir’s tutorial</a> to figure it out, but it worked. It’s a bit hacky but all the pieces were there. I just had to find a way to put them together.</p>
<p>The code is available <a href="https://github.com/dylanjcastillo/django-live-components">here</a>.</p>
<p>I had a simple idea: set up a <a href="https://redis.io/docs/interact/pubsub/">Redis</a> <a href="https://redis.io/docs/interact/pubsub/">pub/sub channel</a> for server notifications. When the client loads the page, it subscribes to this notification channel. Each time the server publishes a new notification, the system reads it from the channel. Then, it renders the HTML and sends it to the client using Server-Sent Events (SSE).</p>
<p>First, you need a notification component, with a streaming view that updates the client whenever a new notification occurs, and a way to subscribe to new notifications sent from the server.</p>
<p>Here’s what I came up with:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AsyncGenerator</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> redis.asyncio <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> redis</span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.http <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StreamingHttpResponse</span>
<span id="cb3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.utils.decorators <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classonlymethod</span>
<span id="cb3-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django_components <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> component</span>
<span id="cb3-9"></span>
<span id="cb3-10">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> redis.from_url(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"redis://localhost"</span>)</span>
<span id="cb3-11"></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sse_message(event_id: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, event: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, data: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb3-14">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb3-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"id: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>event_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"event: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>event<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"data: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strip()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> NotificationComponent(component.Component):</span>
<span id="cb3-19"></span>
<span id="cb3-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@classonlymethod</span></span>
<span id="cb3-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> as_live_view(cls, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>initkwargs):</span>
<span id="cb3-22">        view <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().as_view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>initkwargs)</span>
<span id="cb3-23">        view._is_coroutine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> asyncio.coroutines._is_coroutine</span>
<span id="cb3-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> view</span>
<span id="cb3-25"></span>
<span id="cb3-26">    template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;div style="color: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">color</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">;" role="alert"&gt;</span></span>
<span id="cb3-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        &lt;span style="font-weight: bold;"&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> title </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/span&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> message </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span></span>
<span id="cb3-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;/div&gt;</span></span>
<span id="cb3-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-31"></span>
<span id="cb3-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> streaming_response(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> AsyncGenerator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb3-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> r.pubsub() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pubsub:</span>
<span id="cb3-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> pubsub.subscribe(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"notifications_channel"</span>)</span>
<span id="cb3-35">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb3-36">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb3-37">                    message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> pubsub.get_message(</span>
<span id="cb3-38">                        ignore_subscribe_messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-39">                    )</span>
<span id="cb3-40">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> message <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb3-41">                        notification_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(message[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>].decode())</span>
<span id="cb3-42">                        sse_message_rendered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sse_message(</span>
<span id="cb3-43">                            notification_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>],</span>
<span id="cb3-44">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"notification"</span>,</span>
<span id="cb3-45">                            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.render(</span>
<span id="cb3-46">                                {</span>
<span id="cb3-47">                                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>: notification_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>],</span>
<span id="cb3-48">                                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>: notification_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>],</span>
<span id="cb3-49">                                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>: notification_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>],</span>
<span id="cb3-50">                                }</span>
<span id="cb3-51">                            ),</span>
<span id="cb3-52">                        )</span>
<span id="cb3-53">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> sse_message_rendered</span>
<span id="cb3-54">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> asyncio.sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb3-55">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">finally</span>:</span>
<span id="cb3-56">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> r.aclose()</span>
<span id="cb3-57"></span>
<span id="cb3-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, request, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb3-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> StreamingHttpResponse(</span>
<span id="cb3-60">            streaming_content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.streaming_response(),</span>
<span id="cb3-61">            content_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text/event-stream"</span>,</span>
<span id="cb3-62">        )</span></code></pre></div>
<p>And you should include this in your <code>urls.py</code>:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.urls <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> path</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> components.notification <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> NotificationComponent</span>
<span id="cb4-3"></span>
<span id="cb4-4">urlpatterns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-5">    path(</span>
<span id="cb4-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"notification/"</span>,</span>
<span id="cb4-7">        NotificationComponent.as_live_view(),</span>
<span id="cb4-8">        name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stream_notification"</span>,</span>
<span id="cb4-9">    ),</span>
<span id="cb4-10">]</span></code></pre></div>
<p>Then, you need a simple HTML template to show these notifications. I used the <a href="https://htmx.org/extensions/server-sent-events/">htmx SSE extension</a> to handle the SSE connection on the client. This was my template:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource html number-lines code-with-copy"><code class="sourceCode html"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;!-- src/templates/index.html --&gt;</span></span>
<span id="cb5-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;!DOCTYPE</span> html<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">html</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> lang</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">head</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> charset</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTF-8"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">/&gt;</span></span>
<span id="cb5-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"viewport"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> content</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width=device-width, initial-scale=1.0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">/&gt;</span></span>
<span id="cb5-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">title</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Django Live Components<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">title</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-8">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">head</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">body</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span></span>
<span id="cb5-11"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      hx-ext</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sse"</span></span>
<span id="cb5-12"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      sse-connect</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{% url 'stream_notification' %}"</span></span>
<span id="cb5-13"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      sse-swap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"notification"</span></span>
<span id="cb5-14"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">    </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span></span>
<span id="cb5-16"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://unpkg.com/htmx.org@1.9.10"</span></span>
<span id="cb5-17"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      integrity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC"</span></span>
<span id="cb5-18"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      crossorigin</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"anonymous"</span></span>
<span id="cb5-19"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">    </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-20">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://unpkg.com/htmx.org/dist/ext/sse.js"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-21">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">body</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">html</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Finally, you need a script to simulate these server notifications:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random_notifications.py</span></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> redis</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb6-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb6-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb6-6"></span>
<span id="cb6-7">REDIS_HOST <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"localhost"</span></span>
<span id="cb6-8">REDIS_PORT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6379</span></span>
<span id="cb6-9">REDIS_CHANNEL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"notifications_channel"</span></span>
<span id="cb6-10"></span>
<span id="cb6-11">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> redis.StrictRedis(host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>REDIS_HOST, port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>REDIS_PORT, decode_responses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-12"></span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_random_notification():</span>
<span id="cb6-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Create a random notification message"""</span></span>
<span id="cb6-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb6-17">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>: random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>),</span>
<span id="cb6-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Notification "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)),</span>
<span id="cb6-19">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a random message "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)),</span>
<span id="cb6-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>: random.choice([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>]),</span>
<span id="cb6-21">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span>: time.ctime(),</span>
<span id="cb6-22">    }</span>
<span id="cb6-23"></span>
<span id="cb6-24"></span>
<span id="cb6-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> publish_notification():</span>
<span id="cb6-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Publish a random notification to the Redis channel"""</span></span>
<span id="cb6-27">    notification <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_random_notification()</span>
<span id="cb6-28">    r.publish(REDIS_CHANNEL, json.dumps(notification))</span>
<span id="cb6-29">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Published: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>notification<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-30"></span>
<span id="cb6-31"></span>
<span id="cb6-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb6-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb6-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb6-35">            publish_notification()</span>
<span id="cb6-36">            time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb6-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">KeyboardInterrupt</span>:</span>
<span id="cb6-38">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stopped notification publisher"</span>)</span></code></pre></div>
<p>You can run Redis on Docker to run this script. It’ll start adding notifications to the Redis channel, that you’ll see flash on the page.</p>
<p>This was fun. I ended up using a similar pattern in <a href="https://aitheneum.iwanalabs.com/">AItheneum</a>.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Live {Components} with {Django} and Htmx},
  date = {2024-01-28},
  url = {https://dylancastillo.co/til/live-components-with-django-and-htmx.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Live Components with Django and
Htmx.”</span> January 28, 2024. <a href="https://dylancastillo.co/til/live-components-with-django-and-htmx.html">https://dylancastillo.co/til/live-components-with-django-and-htmx.html</a>.
</div></div></section></div> ]]></description>
  <category>til</category>
  <category>django</category>
  <category>htmx</category>
  <guid>https://dylancastillo.co/til/live-components-with-django-and-htmx.html</guid>
  <pubDate>Sun, 28 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>2023: Personal Snapshot</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/2023-personal-snapshot.html</link>
  <description><![CDATA[ 




<p>This is my annual review. It serves two purposes: a deep analysis of the past year and a record of my thoughts at the time of writing.</p>
<p>I hope it’s fun to read or, at the very least, provides some interesting insights.</p>
<p>If it’s me rereading this, welcome back. This is Dylan from 2023.</p>
<section id="what-went-well" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-went-well">What went well?</h2>
<p>According to my <a href="https://github.com/dylanjcastillo/">GitHub account</a>, I committed code 276 out of 365 days in 2023. I likely coded even more since there were days when I didn’t commit my code. Also, sometimes I used a different account for projects due to company policy.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2023-personal-snapshot/image-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Squint to see the secret message"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/image-1.png" class="img-fluid figure-img" alt="Squint to see the secret message"></a></p>
<figcaption class="margin-caption">Squint to see the secret message</figcaption>
</figure>
</div>
<p>The more I code the more I learn. So, as long as I stay honest and avoid committing useless code, coding serves as a good proxy of how much I’ve learned about technical topics throughout the year. This year, I felt I learned a lot, so I’m happy.</p>
<p>Despite reaching an all-time high compared to previous years, I think I could have achieved more. Sometimes, especially between projects or during periods when I felt burned out, I procrastinated quite a bit. Next year, I want to improve this.</p>
<p>I shipped five AI apps (not including client work). I developed four on my own and created one with a friend. Two of them made it to the front page of <a href="https://news.ycombinator.com/item?id=34547015">Hacker</a> News and got featured in <a href="https://www.economist.com/business/2023/02/28/investors-are-going-nuts-for-chatgpt-ish-artificial-intelligence">The Economist</a>. Another one won brownie points in an <a href="https://www.youtube.com/watch?v=0Sz-Nmi_5xg&amp;t=1432s">AI Shark Tank</a>.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2023-personal-snapshot/image-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="AI apps I built in 2023"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/image-2.png" class="img-fluid figure-img" alt="AI apps I built in 2023"></a></p>
<figcaption class="margin-caption">AI apps I built in 2023</figcaption>
</figure>
</div>
<p>I also wrote 9 blog posts. I was very motivated at first and worked with a good friend, <a href="https://www.linkedin.com/in/hujingjing/">Jing</a>, as an accountability partner. We ended up prioritizing other projects and stopped the accountability challenge, but it was fun and effective while it lasted. I’m very grateful to Jing for joining me in this challenge.</p>
<p>I focused on writing tutorials about AI topics, but I got tired after a while. Writing high-quality tutorials demands a lot of effort. Plus, AI evolves so fast that my tutorials often become outdated within months. That sucked!</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2023-personal-snapshot/image-7.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="My stats looking like 💩"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/image-7.png" class="img-fluid figure-img" alt="My stats looking like 💩"></a></p>
<figcaption class="margin-caption">My stats looking like 💩</figcaption>
</figure>
</div>
<p>When I stopped writing regularly, my site’s traffic started to drop. I also believe ChatGPT was a major factor. My basic-level tutorials, which ChatGPT can easily replace, have stopped growing.</p>
<p>I’m making a change this year in my content creation strategy. I’ll focus on creating videos for technical topics and write about <em>evergreen</em> subjects on my blog. I’ve realized that making videos for technical content is a time-saver compared to writing tutorials. Showing users directly through videos is simpler than writing detailed descriptions or taking screenshots and explaining them.</p>
<p>My original plan for my blog was to share my thoughts. I ended up writing technical tutorials because it was a more effective way to drive traffic, but in all honesty, I didn’t enjoy it very much. So I’m going back to my original plan.</p>
<p>I posted more or less consistently on LinkedIn throughout the year. I got roughly 420k views on my posts. A third of those views came from a single <a href="https://www.linkedin.com/posts/dylanjcastillo_a-hackers-guide-to-language-models-activity-7117426046404063233-_T51?utm_source=share&amp;utm_medium=member_desktop">post</a>, and I gained ~2.3k followers.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2023-personal-snapshot/image.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="The outcome of spamming LinkedIn"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/image.png" class="img-fluid figure-img" alt="The outcome of spamming LinkedIn"></a></p>
<figcaption class="margin-caption">The outcome of spamming LinkedIn</figcaption>
</figure>
</div>
<p>I met lots of great people and had tons of catch-ups this year. I am grateful for all the people I met this year. Special thanks go to <a href="https://www.linkedin.com/in/dr-maximilian-brunner/">Max</a>, <a href="https://www.linkedin.com/in/emanuel-schamp/">Emanuel</a>, <a href="https://www.linkedin.com/in/jscastanoc/">Sebastián</a>, <a href="https://www.linkedin.com/in/eduardo-gonzalo-almorox-phd-5b8b4955">Edu</a>, and <a href="https://www.linkedin.com/in/rhys-donoghue/">Rhys</a> for the collaborations we did. Not all things went as planned, but we had fun.</p>
<p>Posting random things online helps me chat, befriend, learn from, and even do business with people I wouldn’t have met otherwise. It feels great!</p>
<p>I did more sales this year. I took part in two 6-figure proposals that didn’t pan out, and landed two 5-figure contracts, each setting a new record for my hourly rate. I also sold quite a few small projects. Selling is fun but I’m not great at it. This is one of the focuses for next year.</p>
<p>Financially, things went well. Despite being more focused on learning than on making money this year, I made ~2.5x my annual burn rate (I’m frugal!). All my income was made through freelancing, and 68% of my income came from a single project. This situation is better than the past two years because I’m a bit less dependent on one client. But I’m still not where I want to be. To lower my risk, I want to spread my income more evenly across different clients.</p>
<p>Healthwise, this year went well. I completed 169 strength training sessions, averaging 3 gym visits per week. I’m pretty happy with that. I faced some minor injuries but dealt with them effectively.</p>
<p>Also, I completed 4,711 minutes of <a href="https://www.howardluksmd.com/zone-2-hr-training-live-longer-less-injury/">Z2 training</a> (roughly 90 minutes per week). For Z2, I experimented with running, cycling, and stair-climbing. Running is my favorite, but stair-climbing lets me multitask. So, I mostly split my time between these two activities.</p>
<p>This year, I gave stand-up comedy a shot, all thanks to my wife. I’ve wanted to try it for a long time but kept coming up with excuses. For our fifth anniversary, she surprised me by signing me up for a <a href="https://estudioteatromadrid.com/cursos/intensivo-curso-de-stand-up-iniciacion/">course</a>. It’s my favorite gift since getting a Game Boy Advance twenty years ago.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2023-personal-snapshot/image-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="Me, holding a fart on stage"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/image-4.png" class="img-fluid figure-img" alt="Me, holding a fart on stage"></a></p>
<figcaption class="margin-caption">Me, holding a fart on stage</figcaption>
</figure>
</div>
<p>For those who know me in real life, you’ll know that I don’t enjoy speaking in public. So this was a real challenge for me. I did a presentation with family and friends and went to four <a href="https://en.wikipedia.org/wiki/Open_mic">open mics</a>.</p>
<p>IT WAS GREAT! Even though I felt terrified before stepping onto the stage, I ended up having a lot of fun. Most of my jokes made people laugh, which felt comforting.</p>
<p>I do need to work on my stage presence. I often stood in awkward places, struggled to make eye contact with the audience during punchlines, and frequently said “Ehhh… Uhhh…”</p>
<p>I’ve opened an <a href="https://www.instagram.com/dylanporque/">IG account</a> for my comedy stuff. I haven’t posted anything yet, but I’m planning to start in the next few weeks. For now, I will post in Spanish. Follow me there if you want to stay updated!</p>
<p>Finally, this year has been good for my relationships with my wife, family, and friends. My wife and I continue to work as a team, each of us progressing in our respective areas and supporting one another. And I made time to enjoy with family and friends.</p>
<p>In my last snapshot, I didn’t include any photos. When I revised it a few days ago, I realized I missed having them. So, this time, I’ve included a few.</p>
<details>
<summary>
Click to see photos
</summary>
<div>

</div>
<div class="quarto-layout-panel" data-layout-nrow="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/IMG_6052-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/IMG_6052-2.png" class="img-fluid"></a></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/PHOTO-2024-01-01-00-16-52-2.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/PHOTO-2024-01-01-00-16-52-2.jpg" class="img-fluid"></a></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/81334753-8d4f-44aa-b6df-42c56a1605de-1.JPG" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/81334753-8d4f-44aa-b6df-42c56a1605de-1.JPG" class="img-fluid"></a></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/PHOTO-2023-08-02-21-32-13-2.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/PHOTO-2023-08-02-21-32-13-2.jpg" class="img-fluid"></a></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/PHOTO-2023-11-05-09-57-49-5.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/PHOTO-2023-11-05-09-57-49-5.jpg" class="img-fluid"></a></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/ca4e866d-278d-4513-8973-5b0025166e78-1.JPG" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/ca4e866d-278d-4513-8973-5b0025166e78-1.JPG" class="img-fluid"></a></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/d31e56f6-9f97-43ab-bbe4-7971fee4053c.JPG" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/d31e56f6-9f97-43ab-bbe4-7971fee4053c.JPG" class="img-fluid"></a></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/RUTA-IVA-N-619.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/RUTA-IVA-N-619.jpg" class="img-fluid"></a></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/9b0233e0-465c-4215-9644-ff127f0d0c91-1.JPG" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/9b0233e0-465c-4215-9644-ff127f0d0c91-1.JPG" class="img-fluid"></a></p>
</div>
</div>
</div>
</details>
<p>This year, a family highlight was my in-laws’ visit to Madrid for a few months. We found out that our family loves karaoke, especially my dad and my father-in-law. It was tough to get them off the microphone!</p>
<p>More importantly, my loved ones remain healthy and happy, and so am I.</p>
</section>
<section id="what-didnt-go-well" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-didnt-go-well">What didn’t go well?</h2>
<p>I didn’t write a 2022 personal snapshot. That wasn’t a great way to start 2023.</p>
<p>After <a href="https://dylancastillo.co/my-entrepreneur-first-experience/">Entrepreneur First</a>, I felt burned out and lacked the motivation to write a detailed review of the past year. I kept putting it off until it was way too late. And nobody wants to read your annual review in August!</p>
<p>I failed to get funding twice this year. First from <a href="https://www.joinef.com/">Entrepreneur First</a>, and second, from <a href="https://www.speedinvest.com/">Speedinvest</a>. Pitching, preparing the materials, and all the discussions involved were a cool experience, but the outcome was frustrating both times.</p>
<p>I’m not sure it would have worked out. In both cases, I wasn’t too excited about the idea, but I thought it was worth a try. My main concern with raising venture capital money too early often leads to poor financial outcomes for founders. That’s a no-no for me.</p>
<p>Though, bootstrapping isn’t easy either. My most successful AI product made 60€. Just enough for a decent dinner for two in Madrid.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2023-personal-snapshot/image-5-1-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15" title="My “best” AI product"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/image-5-1-1.png" height="300" alt="My “best” AI product" class="figure-img"></a></p>
<figcaption class="margin-caption">My “best” AI product</figcaption>
</figure>
</div>
<p>The AI apps I built this year landed me several freelancing projects. But they made little money by themselves. To be fair, I only launched two products you could pay for. I didn’t intend the others to make money, at least not initially.</p>
<p>This year, I finally grasped something you might find obvious: to have products that generate revenue, you must be intentional about it. You must create opportunities for people to pay.</p>
<p>I used to believe that if I built something cool enough, people would discover it and somehow find a way to pay for it. I was wrong. I realized that I must actively set up a payment system for my products or deliberately plan how to monetize the attention they receive. Without that, after the initial burst of attention fades, you might end up with nothing. Many of my projects this year suffered this fate.</p>
<p>I’ve always dreamed of creating a product, so I ignored the market’s pull towards a consulting company. Instead of doubling down on the demand, I often said no, aiming to focus on my product ideas. After spending much of this year like a person with a hammer in search of a nail, I’ve decided to reverse my approach.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2023-personal-snapshot/image-6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16" title="Me running away from the demand"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/image-6.png" class="img-fluid figure-img" alt="Me running away from the demand"></a></p>
<figcaption class="margin-caption">Me running away from the demand</figcaption>
</figure>
</div>
<p>Now, I’ll start with the demand and then figure out how to offer services to meet it. My focus will be on establishing a consulting practice. From there, I might develop a product. But then again, maybe I don’t need to. I’m content with the idea of getting rich through a services-only company 😉</p>
<p>Although I’m satisfied with my physical fitness, I’ve noticed that I often don’t rest enough. This happens either because I don’t sleep enough or because I overtrain. I’ve started feeling some symptoms of this, so improving my rest is a goal for next year.</p>
</section>
<section id="what-are-the-plans-for-next-year" class="level2">
<h2 class="anchored" data-anchor-id="what-are-the-plans-for-next-year">What are the plans for next year?</h2>
<p>First, focus on building a successful consulting practice. I’ll be doing a lot more sales this year and plan to share updates frequently. I have some exciting news about this that I’ll be sharing soon.</p>
<p>Next, establishing a sustainable content engine. I believe shifting to video for technical content might yield a higher ROI than text. So, this year, I plan to explore this approach and reserve the blog for more personal articles.</p>
<p>Keep doing stand-up comedy. I haven’t found such an enjoyable hobby in a long time. I want to do more of it. It also brings extra benefits, like improving my sales skills.</p>
<p>Finally, make time for rest. I often struggle with guilt over taking breaks, leading to very few days off throughout the year. But this isn’t good for my mental and physical well-being. I aim to create more space for rest, and I’m sure my wife and family will appreciate that too 😁</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {2023: {Personal} {Snapshot}},
  date = {2024-01-05},
  url = {https://dylancastillo.co/posts/2023-personal-snapshot.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“2023: Personal Snapshot.”</span> January
5, 2024. <a href="https://dylancastillo.co/posts/2023-personal-snapshot.html">https://dylancastillo.co/posts/2023-personal-snapshot.html</a>.
</div></div></section></div> ]]></description>
  <category>personal-snapshot</category>
  <guid>https://dylancastillo.co/posts/2023-personal-snapshot.html</guid>
  <pubDate>Fri, 05 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Clustering Documents with OpenAI embeddings, HDBSCAN and UMAP</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/clustering-documents-with-openai-langchain-hdbscan.html</link>
  <description><![CDATA[ 




<p>In the past, the most common way to cluster documents was by building vectors with traditional Machine Learning methods such as bag-of-words or smaller pre-trained NLP models, like BERT, and then creating groups out of them. But LLMs have changed that.</p>
<p>While older methods are still relevant, if I had to cluster text data today, I’d start using the OpenAI or Cohere (embeddings and generation) APIs. It’s faster, easier, and gives you additional goodies such as coming up with fitting titles for each cluster.</p>
<p>I haven’t seen many tutorials on this topic, so I wrote one. In this tutorial, I’ll show you how to cluster news articles using OpenAI embeddings, and HDBSCAN.</p>
<p>Let’s get to it!</p>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>To make the most of this tutorial, you should be familiar with the following concepts:</p>
<ul>
<li><a href="https://dylancastillo.co/nlp-snippets-cluster-documents-using-word2vec/#how-to-cluster-documents">How to cluster text data</a> using traditional ML methods.</li>
<li>What are <a href="https://platform.openai.com/docs/guides/embeddings">OpenAI Embeddings</a></li>
<li>How <a href="https://hdbscan.readthedocs.io/en/latest/how_hdbscan_works.html">HDBSCAN</a> works</li>
</ul>
<p>In addition, you’ll need an <a href="beta.openai.com/">OpenAI account</a>.</p>
</section>
<section id="set-up-your-local-environment" class="level2">
<h2 class="anchored" data-anchor-id="set-up-your-local-environment">Set Up Your Local Environment</h2>
<ol type="1">
<li>Create a virtual environment using <code>venv</code>:</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3.10</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv</span></code></pre></div>
<ol start="2" type="1">
<li>Create a <code>requirements.txt</code> file that contains the following packages:</li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">hdbscan</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">openai</span></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pandas</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">numpy</span></span>
<span id="cb2-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python-dotenv</span></span>
<span id="cb2-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tiktoken</span></span>
<span id="cb2-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">notebook</span></span>
<span id="cb2-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">plotly</span></span>
<span id="cb2-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">umap-learn</span></span></code></pre></div>
<ol start="3" type="1">
<li>Activate the virtual environment and install the packages:</li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip3</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span></code></pre></div>
<ol start="4" type="1">
<li>Create a file called <code>.env</code>, and add the your OpenAI key:</li>
</ol>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">OPENAI_API_KEY</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;</span>your <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">key</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<ol start="5" type="1">
<li>Create an empty notebook file. For the rest of this tutorial, you’ll work on it.</li>
</ol>
</section>
<section id="clustering-documents" class="level2">
<h2 class="anchored" data-anchor-id="clustering-documents">Clustering Documents</h2>
<p>You should think of the clustering process in three steps:</p>
<ol type="1">
<li>Generate numerical vector representations of documents using OpenAI’s embedding capabilities.</li>
<li>Apply a clustering algorithm on the vectors to group the documents.</li>
<li>Generate a title for each cluster summarizing the articles contained in it.</li>
</ol>
<p>That’s it! Now, you’ll see how that looks in practice.</p>
<section id="import-the-required-packages" class="level3">
<h3 class="anchored" data-anchor-id="import-the-required-packages">Import the Required Packages</h3>
<p>Start by importing the required Python libraries. Copy the following code in your notebook:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hdbscan</span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.express <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> px</span>
<span id="cb5-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb5-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb5-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI</span>
<span id="cb5-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> umap <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> UMAP</span>
<span id="cb5-11"></span>
<span id="cb5-12">load_dotenv()</span></code></pre></div>
<p>This code imports the libraries you’ll use throughout the tutorial. Here’s the purpose of each one:</p>
<ul>
<li><strong><code>os</code></strong> helps you read the environment variables.</li>
<li><strong><code>hdbscan</code></strong> gives you a wrapper of HDBSCAN, the clustering algorithm you’ll use to group the documents.</li>
<li><strong><code>openai</code></strong> to use OpenAI LLMs.</li>
<li><strong><code>umap</code></strong> loads <a href="https://umap-learn.readthedocs.io/en/latest/">UMAP</a> for dimensionality reduction and visualizing clusters.</li>
<li><strong><code>dotenv</code></strong> load the environment variables you define in <code>.env</code>.</li>
</ul>
<p>Next, you’ll get a sample of news articles to cluster.</p>
</section>
<section id="download-the-data-and-generate-embeddings" class="level3">
<h3 class="anchored" data-anchor-id="download-the-data-and-generate-embeddings">Download the data and generate embeddings</h3>
<p>Download, read these <a href="https://www.kaggle.com/datasets/dylanjcastillo/news-headlines-2024/">articles</a>, and generate documents you’ll use to create the embeddings:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"news_data_dedup.csv"</span>)</span>
<span id="cb6-2">docs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb6-3">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>description<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> title, description <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(df.title, df.description)</span>
<span id="cb6-5">]</span></code></pre></div>
<p>Then, initialize the OpenAI client and generate the embeddings:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI()</span>
<span id="cb7-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.embeddings.create(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>docs, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text-embedding-3-small"</span>)</span>
<span id="cb7-3">embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.array(x.embedding) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> response.data]</span></code></pre></div>
</section>
<section id="cluster-documents" class="level3">
<h3 class="anchored" data-anchor-id="cluster-documents">Cluster documents</h3>
<p>Once you have the embeddings, you can cluster them using <code>hdbscan</code>:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">hdb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hdbscan.HDBSCAN(min_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, min_cluster_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>).fit(embeddings)</span></code></pre></div>
<p>This code will generate clusters using the embeddings generated, and then create a DataFrame with the results. Itfits the <code>hdbscan</code> algorithm. In this case, I set <code>min_samples</code> and <code>min_cluster_size</code> to 3, but depending on your data this may change. Check <a href="https://hdbscan.readthedocs.io/en/latest/parameter_selection.html">HDBSCAN’s documentation</a> to learn more about these parameters.</p>
<p>Next, you’ll create topic titles for each cluster based on their contents.</p>
</section>
<section id="visualize-the-clusters" class="level3">
<h3 class="anchored" data-anchor-id="visualize-the-clusters">Visualize the clusters</h3>
<p>After you’ve generated the clusters, you can visualize them using <a href="https://pair-code.github.io/understanding-umap/">UMAP</a>:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">umap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UMAP(n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, n_neighbors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, min_dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb9-2"></span>
<span id="cb9-3">df_umap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb9-4">    pd.DataFrame(umap.fit_transform(np.array(embeddings)), columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>])</span>
<span id="cb9-5">    .assign(cluster<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> df: hdb.labels_.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>))</span>
<span id="cb9-6">    .query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cluster != "-1"'</span>)</span>
<span id="cb9-7">    .sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cluster'</span>)</span>
<span id="cb9-8">)</span>
<span id="cb9-9"></span>
<span id="cb9-10">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.scatter(df_umap, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cluster'</span>)</span>
<span id="cb9-11">fig.show()</span></code></pre></div>
<p>You should get something similar to this graph:</p>
<p><a href="images/clustering-documents-with-openai-langchain-hdbscan/image.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://dylancastillo.co/posts/images/clustering-documents-with-openai-langchain-hdbscan/image.png" class="img-fluid"></a></p>
<p>This will give you a sense of how good are the clusters generated.</p>
</section>
<section id="create-a-topic-title-per-cluster" class="level3">
<h3 class="anchored" data-anchor-id="create-a-topic-title-per-cluster">Create a Topic Title per Cluster</h3>
<p>For each cluster, you’ll generate a topic title summarizing the articles in that cluster. Copy the following code to your notebook:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cluster_name"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Uncategorized"</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_topic_titles():</span>
<span id="cb10-4">    system_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You're an expert journalist. You're helping me write short but compelling topic titles for groups of news articles."</span></span>
<span id="cb10-5">    user_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Using the following articles, write a 4 to 5 word title that summarizes them.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ARTICLES:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">TOPIC TITLE:"</span></span>
<span id="cb10-6"></span>
<span id="cb10-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.cluster.unique():</span>
<span id="cb10-8">        sample_articles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.query(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"cluster == '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>c<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>).to_dict(orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"records"</span>)</span>
<span id="cb10-9">        articles_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(</span>
<span id="cb10-10">            [</span>
<span id="cb10-11">                <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>article[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>article[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'...'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(article[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb10-12">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, article <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(</span>
<span id="cb10-13">                    sample_articles, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-14">                )</span>
<span id="cb10-15">            ]</span>
<span id="cb10-16">        )</span>
<span id="cb10-17">        messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb10-18">            {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: system_message},</span>
<span id="cb10-19">            {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: user_template.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(articles_str)},</span>
<span id="cb10-20">        ]</span>
<span id="cb10-21">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb10-22">            model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-3.5-turbo"</span>, messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>messages, temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span></span>
<span id="cb10-23">        )</span>
<span id="cb10-24"></span>
<span id="cb10-25">        topic_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content</span>
<span id="cb10-26">        df.loc[df.cluster <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> c, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cluster_name"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> topic_title</span></code></pre></div>
<p>This code takes all the articles per cluster and uses <code>gpt-3.5-turbo</code> to generate a relevant topic title from them. Itgoes through each cluster, takes the articles in it, and makes a prompt using that to generate a topic title for that cluster.</p>
<p>Finally, you can check the resulting clusters and topic titles, as follows:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pd.option_context(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"display.max_colwidth"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb11-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df.query(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"cluster == '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>c<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>).topic_title.values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb11-4">    display(df.query(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"cluster == '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>c<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>).drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic_title"</span>]).head())</span></code></pre></div>
<p>In my case, running this code produces the following articles and topic titles:</p>
<p><a href="images/clustering-documents-with-openai-langchain-hdbscan/image-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://dylancastillo.co/posts/images/clustering-documents-with-openai-langchain-hdbscan/image-1.png" class="img-fluid"></a></p>
<p>All articles seem to be related to the topic title. Yay!</p>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<p>In this short tutorial, you’ve learned how to cluster documents using OpenAI embeddings, HDBSCAN, and UMAP. I hope you find this useful. Let me know in the comments if you have any questions.</p>
<p>Check out the <a href="https://github.com/dylanjcastillo/random/tree/main/self-organizing-news">code</a> on GitHub. You can also check <a href="https://news.iwanalabs.com/">this project</a> I built with <a href="https://github.com/iswarmondal">Iswar</a> which shows this in practice.</p>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2023,
  author = {Castillo, Dylan},
  title = {Clustering {Documents} with {OpenAI} Embeddings, {HDBSCAN}
    and {UMAP}},
  date = {2023-06-09},
  url = {https://dylancastillo.co/posts/clustering-documents-with-openai-langchain-hdbscan.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2023" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2023. <span>“Clustering Documents with OpenAI
Embeddings, HDBSCAN and UMAP.”</span> June 9, 2023. <a href="https://dylancastillo.co/posts/clustering-documents-with-openai-langchain-hdbscan.html">https://dylancastillo.co/posts/clustering-documents-with-openai-langchain-hdbscan.html</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <category>ml</category>
  <category>llm</category>
  <category>openai</category>
  <guid>https://dylancastillo.co/posts/clustering-documents-with-openai-langchain-hdbscan.html</guid>
  <pubDate>Fri, 09 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Create a Code Interpreter Chatbot with Pyodide, LangChain, and OpenAI</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/code-interpreter-chatbot-pyodide-langchain-openai.html</link>
  <description><![CDATA[ 




<p>OpenAI has been giving access to users to the <a href="https://wgmimedia.com/chatgpt-code-interpreter-plugin/">Code Interpreter</a> plugin and people are loving it. I wanted to replicate it outside of ChatGPT, so I created my own (simpler) version, specifically to <a href="https://deepsheet.dylancastillo.co/">analyze and visualize data</a>.</p>
<p>Following that, I figured more people might be interested in building user-facing chatbots capable of running code in the browser. So I put together this tutorial. It will teach you how to create a simple but powerful chatbot that uses Pyodide, LangChain, and OpenAI to generate and run code in the browser for a user.</p>
<p>C’mon, let’s get to work!</p>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>To make the most of the tutorial, you should review these topics before getting started:</p>
<ol type="1">
<li>What <a href="https://pyodide.org/en/stable/">Pyodide</a> is.</li>
<li>What <a href="https://python.langchain.com/en/latest/index.html">LangChain</a> is.</li>
<li>The basics of Python backend servers such as <a href="https://docs.litestar.dev/2/">Litestar</a> or <a href="fastapi.tiangolo.com/">FastAPI</a>.</li>
</ol>
<p>In addition, you must create an account at <a href="https://beta.openai.com">OpenAI</a>.</p>
</section>
<section id="building-a-code-interpreter-chatbot" class="level2">
<h2 class="anchored" data-anchor-id="building-a-code-interpreter-chatbot">Building a Code Interpreter Chatbot</h2>
<p>Security and scalability are two major challenges in developing a user-facing chatbot that’s capable of executing code. Companies like <a href="https://replit.com/">Replit</a> must manage <a href="https://cloud.google.com/customers/repl-it">extremely complex infrastructures</a> in order to provide users with online IDEs.</p>
<p>We’re fortunate, however, because what we’re doing in this tutorial isn’t as complex as Replit. We can use a simple solution: Pyodide. Pyodide is a CPython port to WebAssembly/Emscripten that lets Python to run in the browser.</p>
<p>There are some restrictions to what you can do with Pyodide, such as the fact that <a href="https://pyodide.org/en/stable/usage/wasm-constraints.html">not every package is compatible</a> with it and that the maximum memory it can manage is 2GB. But it is more than adequate to process small to medium datasets, which is what you’ll do in this tutorial.</p>
<p>The chatbot you’ll build will work as follows:</p>
<ol type="1">
<li>A user asks a question about a preloaded dataset.</li>
<li>That question, along with a predefined prompt, is sent to the OpenAI API.</li>
<li>The API responds with a code snippet that helps answer the question.</li>
<li>The code snippet is executed on the browser using Pyodide, and the result is displayed to the user.</li>
</ol>
<p>Next, you’ll set up your local environment.</p>
</section>
<section id="set-up-your-local-environment" class="level2">
<h2 class="anchored" data-anchor-id="set-up-your-local-environment">Set Up Your Local Environment</h2>
<p>Before you begin, you must first set up a few things. Follow these steps:</p>
<ol type="1">
<li>Install <a href="https://www.python.org/downloads/">Python 3.10</a>.</li>
<li>Install <a href="https://python-poetry.org/docs/#installation">Poetry</a>. It’s optional but highly recommended.</li>
<li>Clone the project’s repository:</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/dylanjcastillo/chatbot-code-interpreter</span></code></pre></div>
<ol start="4" type="1">
<li><p>From the root folder of the project, install the dependencies:</p>
<ul>
<li>Using <strong>Poetry:</strong> Create the virtual environment in the same directory as the project and install the dependencies:</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> config virtualenvs.in-project true</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> install</span></code></pre></div>
<ul>
<li>Using <strong>venv and pip:</strong> Create a virtual environment and install the dependencies listed in <code>requirements.txt</code>:</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3.10</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span></code></pre></div></li>
<li><p>Open <code>src/.env-example</code>, add your OpenAI secret key in the corresponding variable, and save the file as <code>.env</code>.</p></li>
</ol>
<p>You should now have a virtual environment set up with the necessary libraries and a local copy of the repository. Your project structure should look like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">chatbot-code-interpreter</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> LICENSE</span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> README.md</span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> poetry.lock</span>
<span id="cb4-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> pyproject.toml</span>
<span id="cb4-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> requirements.txt</span>
<span id="cb4-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> src</span>
<span id="cb4-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── app.py</span>
<span id="cb4-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── config.py</span>
<span id="cb4-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── prompts</span>
<span id="cb4-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   │   ├── system.prompt</span>
<span id="cb4-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   │   └── user.prompt</span>
<span id="cb4-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── static</span>
<span id="cb4-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   │   └── all_stocks.csv</span>
<span id="cb4-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── templates</span>
<span id="cb4-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   │   └── index.html</span>
<span id="cb4-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── utils.py</span>
<span id="cb4-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── .env-example</span>
<span id="cb4-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> .venv/</span></code></pre></div>
<p>These are the most relevant files and directories in the project:</p>
<ul>
<li><code>poetry.lock</code> and <code>pyproject.toml</code>: These files contain the project’s specifications and dependencies. They’re used by Poetry to create a virtual environment.</li>
<li><code>requirements.txt</code>: This file contains a list of Python packages required by the project.</li>
<li><code>src/app.py</code>: This file contains the code of the chatbot.</li>
<li><code>src/config.py</code>: This file contains project configuration details such as OpenAI’s API key (read from a <code>.env</code> file), and the path to the prompts used by the chatbot.</li>
<li><code>src/prompts/</code>: This directory contains the system and user prompts used by the chatbot. I’ve found that keeping the prompts in text files makes it easier to manage them instead of using strings.</li>
<li><code>src/static</code> and <code>src/templates</code>: These files contain the data used in the example and the HTML template used for the chatbot’s interface. You’ll use a dataset with prices and the volume of a group of stocks.</li>
<li><code>src/utils.py</code>: This file contains a function you use to read the prompts from <code>src/prompts</code>.</li>
<li><code>.env-example</code>: This file is a sample file that provides the required environment variables you should provide. In this case, you use it to pass OpenAI’s API key to your application and choose the name the chatbot should use behind the scenes (<code>gpt-3.5.-turbo</code>).</li>
<li><code>.venv/</code>: This directory contains the project’s virtual environment.</li>
</ul>
<p>Alright! On to the exciting stuff now.</p>
</section>
<section id="run-code-on-the-browser-with-pyodide" class="level2">
<h2 class="anchored" data-anchor-id="run-code-on-the-browser-with-pyodide">Run Code on the Browser with Pyodide</h2>
<p>In this step, you’ll configure Pyodide to run Python in the browser. You’ll load <code>pyodide.js</code>, start it, import the required libraries, and define an event handler to process the questions asked by the user.</p>
<p>To make the analysis simpler, I’ll split the code of <code>src/templates/index.html</code> into two sections. In the first section, you’ll only look at the contents of <code>&lt;head&gt;</code> and <code>&lt;body&gt;</code>, and in the second part, you’ll go through the JavaScript code defined in <code>&lt;script&gt;</code>.</p>
<p>Here’s part one:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource html number-lines code-with-copy"><code class="sourceCode html"><span id="cb5-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;!DOCTYPE</span> html<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">html</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> lang</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">head</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> charset</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTF-8"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">/&gt;</span></span>
<span id="cb5-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> http-equiv</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X-UA-Compatible"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> content</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IE=edge"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">/&gt;</span></span>
<span id="cb5-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"viewport"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> content</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width=device-width, initial-scale=1.0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">/&gt;</span></span>
<span id="cb5-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">title</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Code Runner Chatbot<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">title</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">link</span></span>
<span id="cb5-9"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      rel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stylesheet"</span></span>
<span id="cb5-10"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      href</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cdn.jsdelivr.net/npm/@picocss/pico@1/css/pico.min.css"</span></span>
<span id="cb5-11"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">    </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">/&gt;</span></span>
<span id="cb5-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cdn.jsdelivr.net/pyodide/v0.23.2/full/pyodide.js"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-13">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">head</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-14"></span>
<span id="cb5-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">body</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">main</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"container"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-17">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">h1</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> style</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text-align:center;"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Code Runner Chatbot<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">h1</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-18">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">textarea</span></span>
<span id="cb5-19"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">        name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query"</span></span>
<span id="cb5-20"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">        id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query"</span></span>
<span id="cb5-21"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">        cols</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"30"</span></span>
<span id="cb5-22"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">        rows</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10"</span></span>
<span id="cb5-23"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">        placeholder</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ask a question about the dataset"</span></span>
<span id="cb5-24"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">textarea</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-25">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">button</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ask-btn"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Ask<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">button</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-26">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">blockquote</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">blockquote</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-27">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">main</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-28">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-29">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;!--</span> SECOND PART OF CODE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--&gt;</span></span>
<span id="cb5-30">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-31">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">body</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-32"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">html</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>This section of code loads the necessary libraries and styles, as well as defines the chatbot’s user interface. Here’s how it works:</p>
<ul>
<li><strong>Lines 5 to 10</strong> set a title for the page, load <code>pyodide.js</code> and <code>pico.css</code> (a minimal CSS framework), and define a couple of standard <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta">meta tags</a>.</li>
<li><strong>Lines 14 to 20</strong> define a simple UI that lets users input a question, and submit them by clicking on a button, to get answers about the dataset.</li>
</ul>
<p>Then, let’s go through the JavaScript code defined in <code>&lt;script&gt;</code>. This code will load Pyodide, install the required libraries, make the data available for use in Pyodide, and set an event handler to process the user’s question.</p>
<p>Here’s how it looks:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource javascript number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> queryTextArea <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> outputElement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> askBtn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ask-btn"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setupPyodide</span>() {</span>
<span id="cb6-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> pyodide <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loadPyodide</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-7"></span>
<span id="cb6-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> pyodide<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loadPackage</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numpy"</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-9"></span>
<span id="cb6-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/static/all_stocks.csv"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> fileContentArrayBuffer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> response<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrayBuffer</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> fileContent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Uint8Array</span>(fileContentArrayBuffer)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-13">  pyodide<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeFile</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all_stocks.csv"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> fileContent)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-14"></span>
<span id="cb6-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pyodide<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-16">}</span>
<span id="cb6-17"></span>
<span id="cb6-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> pyodideReadyPromise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setupPyodide</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-19"></span>
<span id="cb6-20">askBtn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addEventListener</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"click"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">event</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb6-21">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> pyodide <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> pyodideReadyPromise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-22"></span>
<span id="cb6-23">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queryTextArea<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-24">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> df_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> pyodide<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runPythonAsync</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span>
<span id="cb6-25"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    import pandas as pd</span></span>
<span id="cb6-26"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    df = pd.read_csv('all_stocks.csv')</span></span>
<span id="cb6-27"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    pd.set_option('display.max_columns', None)</span></span>
<span id="cb6-28"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    df.head(3).T</span></span>
<span id="cb6-29"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    `</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-30"></span>
<span id="cb6-31">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">FormData</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-32">  data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> query)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-33">  data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"df_info"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> df_info)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-34"></span>
<span id="cb6-35">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span> {</span>
<span id="cb6-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/ask"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {</span>
<span id="cb6-37">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">method</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POST"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-38">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">body</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-39">    })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-40"></span>
<span id="cb6-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (response<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ok</span>) {</span>
<span id="cb6-42">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> response<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-43">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> pyodide<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runPythonAsync</span>(result)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-44"></span>
<span id="cb6-45">      outputElement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">innerText</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-46">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb6-47">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">error</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error:"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> response<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">statusText</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-48">    }</span>
<span id="cb6-49">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">catch</span> (error) {</span>
<span id="cb6-50">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">error</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error:"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> error)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-51">  }</span>
<span id="cb6-52">})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>This code loads Pyodide, installs the necessary libraries, makes the data accessible in Pyodide, and finally sets an event handler to process the user’s question. It works as follows:</p>
<ul>
<li><strong>Lines 1 to 3</strong> select the elements of the DOM that you’ll be interacting with.</li>
<li><strong>Lines 5 to 18</strong> define a helper function you use to load Pyodide and the data. You first load Pyodide, and install <code>pandas</code> and <code>numpy</code>. Then, you fetch the dataset and write it into Pyodide’s filesystem, to make it available to use the data in it.</li>
<li><strong>Lines 20 to 52</strong> define the event handler of a click on <code>ask-btn</code>. This means that whenever that button is clicked, this event will execute. The handler does a few things:
<ul>
<li><strong>Lines 21 to 33</strong> wait until Pyodide is fully loaded, extract the question that the user has asked, get the first rows of the dataset (which is how the model can know how to generate the right code), and put together the data to send in a POST request.</li>
<li><strong>Lines 35 to 51</strong> make a POST request to “/ask” with the parameters mentioned earlier. When the server responds, that text is run using Pyodide, and the result is then saved in <code>output</code>.</li>
</ul></li>
</ul>
<p>That’s it! Next, you’ll create the chatbot application.</p>
</section>
<section id="create-the-chatbot" class="level2">
<h2 class="anchored" data-anchor-id="create-the-chatbot">Create the Chatbot</h2>
<p>Now, you’ll create a simple application that will allow users to make questions to the chatbot about the dataset.</p>
<p>Take a look at the code in <code>src/app.py</code>:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dataclasses <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dataclass</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LLMChain</span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.chat_models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb7-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> litestar <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Litestar, get, post</span>
<span id="cb7-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> litestar.contrib.jinja <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> JinjaTemplateEngine</span>
<span id="cb7-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> litestar.enums <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RequestEncodingType</span>
<span id="cb7-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> litestar.params <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Body</span>
<span id="cb7-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> litestar.response_containers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Template</span>
<span id="cb7-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> litestar.static_files.config <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StaticFilesConfig</span>
<span id="cb7-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> litestar.template.config <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TemplateConfig</span>
<span id="cb7-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing_extensions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Annotated</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> config <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI</span>
<span id="cb7-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_prompt</span>
<span id="cb7-17"></span>
<span id="cb7-18">chain_create <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LLMChain(</span>
<span id="cb7-19">    llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ChatOpenAI(</span>
<span id="cb7-20">        temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-21">        model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>OpenAI.model_name,</span>
<span id="cb7-22">        openai_api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>OpenAI.secret_key,</span>
<span id="cb7-23">    ),</span>
<span id="cb7-24">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_prompt(),</span>
<span id="cb7-25">)</span>
<span id="cb7-26"></span>
<span id="cb7-27"></span>
<span id="cb7-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@get</span>(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>)</span>
<span id="cb7-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> index() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Template:</span>
<span id="cb7-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Template(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index.html"</span>)</span>
<span id="cb7-31"></span>
<span id="cb7-32"></span>
<span id="cb7-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span></span>
<span id="cb7-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Query:</span>
<span id="cb7-35">    query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb7-36">    df_info: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb7-37"></span>
<span id="cb7-38"></span>
<span id="cb7-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@post</span>(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/ask"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ask"</span>, sync_to_thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ask(</span>
<span id="cb7-41">    data: Annotated[Query, Body(media_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RequestEncodingType.MULTI_PART)],</span>
<span id="cb7-42">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb7-43">    query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.query</span>
<span id="cb7-44">    df_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.df_info</span>
<span id="cb7-45"></span>
<span id="cb7-46">    chain_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain_create.run(</span>
<span id="cb7-47">        {</span>
<span id="cb7-48">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"df_info"</span>: df_info,</span>
<span id="cb7-49">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query"</span>: query,</span>
<span id="cb7-50">        }</span>
<span id="cb7-51">    )</span>
<span id="cb7-52">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain_result.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```python"</span>)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].strip()</span>
<span id="cb7-53"></span>
<span id="cb7-54">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb7-55"></span>
<span id="cb7-56"></span>
<span id="cb7-57">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Litestar(</span>
<span id="cb7-58">    route_handlers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[index, ask],</span>
<span id="cb7-59">    static_files_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb7-60">        StaticFilesConfig(directories<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"static"</span>], path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/static"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"static"</span>),</span>
<span id="cb7-61">    ],</span>
<span id="cb7-62">    template_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TemplateConfig(</span>
<span id="cb7-63">        engine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>JinjaTemplateEngine, directory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"templates"</span>)</span>
<span id="cb7-64">    ),</span>
<span id="cb7-65">)</span></code></pre></div>
<p>This code provides users with a straightforward interface, allowing them to interact with the chatbot and ask questions about the dataset. Here’s how it works:</p>
<ul>
<li><strong>Lines 1 to 16</strong> import the required libraries. The application uses <a href="https://docs.litestar.dev/2/">Litestar</a>, which is a bit verbose; hence, you’ll notice many import statements. But there’s no real mystery to it, it’s <a href="https://docs.litestar.dev/2/migration/index.html">pretty similar to FastAPI or Flask</a>.</li>
<li><strong>Lines 18 to 25</strong> create an <a href="https://python.langchain.com/en/latest/modules/chains/generic/llm_chain.html">LLMChain</a> to interact with the model using the prompt read from <code>get_prompt</code>, which is a function defined in <code>utils.py</code> reads the prompts defined in <code>src/prompts</code>. The chain takes the prompts, the user’s query, and the first three rows from the dataset, and asks the model for a completion. Make sure to read the prompt to see how they work.</li>
<li><strong>Lines 28 to 30</strong> define the index route, which returns the <code>index.html</code> when a user visits <code>/</code>.</li>
<li><strong>Lines 33 to 54</strong> define a dataclass used to validate the parameters of the request made to <code>/ask</code> and define <code>/ask</code>, which is an endpoint that helps users answer questions about the dataset by generating relevant code.</li>
<li><strong>Lines 57 to 65</strong> set up the Litestar app, incorporating the previously defined routes and the locations of the templates and static files.</li>
</ul>
<p>To test the app, <code>cd</code> into <code>src/</code> and run this code in a terminal within the virtual environment:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">litestar</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--reload</span></span></code></pre></div>
<p>If everything goes well, you’ll see an output similar to this one:</p>
<p><a href="images/code-interpreter-chatbot-pyodide-langchain-openai/image-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://dylancastillo.co/posts/images/code-interpreter-chatbot-pyodide-langchain-openai/image-1.png" class="img-fluid"></a></p>
<p>Next, open <code>http://127.0.0.1:8000</code> on your browser. You should see the app’s UI.</p>
<p>Try asking a question to the chatbot. For example, you can ask when were the highest and lowest closing prices of AAPL.</p>
<p>You should get the following result:</p>
<p><a href="images/code-interpreter-chatbot-pyodide-langchain-openai/image.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://dylancastillo.co/posts/images/code-interpreter-chatbot-pyodide-langchain-openai/image.png" class="img-fluid"></a></p>
<p>That’s all! You’ve built a chatbot capable of running code on your browser.</p>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next steps</h2>
<p>I won’t cover deployment in this article. This application is pretty standard, so simply choose a method that works well for you and your organization.</p>
<p>I like using NGINX with Gunicorn and Uvicorn workers and wrote a <a href="https://dylancastillo.co/fastapi-nginx-gunicorn/">tutorial</a> about it. That tutorial uses FastAPI, but the same process would also work with Litestar.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Way to go! By now, you’ve built a chatbot that can run Python code on the browser and help you answer complex questions about a dataset.</p>
<p>This is what you’ve covered in this tutorial:</p>
<ul>
<li>How to integrate Pyodide into a web app to run code in the browser.</li>
<li>How to use LangChain’s LLMChain to generate Python code.</li>
<li>How to build a simple application with Litestar.</li>
</ul>
<p>I hope this is useful. Let me know if you have questions.</p>
<p>The code for this tutorial is <a href="https://github.com/dylanjcastillo/chatbot-code-interpreter">available on GitHub</a>.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2023,
  author = {Castillo, Dylan},
  title = {Create a {Code} {Interpreter} {Chatbot} with {Pyodide,}
    {LangChain,} and {OpenAI}},
  date = {2023-05-12},
  url = {https://dylancastillo.co/posts/code-interpreter-chatbot-pyodide-langchain-openai.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2023" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2023. <span>“Create a Code Interpreter Chatbot with
Pyodide, LangChain, and OpenAI.”</span> May 12, 2023. <a href="https://dylancastillo.co/posts/code-interpreter-chatbot-pyodide-langchain-openai.html">https://dylancastillo.co/posts/code-interpreter-chatbot-pyodide-langchain-openai.html</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <category>llm</category>
  <category>openai</category>
  <guid>https://dylancastillo.co/posts/code-interpreter-chatbot-pyodide-langchain-openai.html</guid>
  <pubDate>Fri, 12 May 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Semantic Search with Elasticsearch, OpenAI, and LangChain</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/semantic-search-elasticsearch-openai-langchain.html</link>
  <description><![CDATA[ 




<p><a href="https://github.com/hwchase17/langchain">LangChain</a> is the new cool kid on the block. It’s a library designed to help you interact with Large Language Models (LLMs). Up until recently, I was building most things from scratch when working with LLMs, so I decided to give LangChain a try.</p>
<p>After a <a href="https://deepsheet.dylancastillo.co/">few</a> <a href="https://namemancer.dylancastillo.co/">projects</a> using it, I’m truly impressed. It simplifies many of the routine tasks associated with working with LLMs, such as extracting text from documents or indexing them in a vector database. If you’re working with LLMs today, LangChain can save you hours of work.</p>
<p>However, one drawback is that its <a href="https://python.langchain.com/en/latest/">documentation</a>, despite being extensive, can be scattered and difficult for newcomers to comprehend. Moreover, most of the content online focuses on the latest generation of vector databases. Since many organizations still use older, but battle-tested technologies such as <a href="https://www.elastic.co/">Elasticsearch</a> and I decided to write a tutorial using it.</p>
<p>I combined LangChain and Elasticsearch in one of the most common LLM applications: semantic search. In this tutorial, I’ll walk you through building a semantic search service using Elasticsearch, OpenAI, LangChain, and FastAPI. You’ll create an application that lets users ask questions about Marcus Aurelius’ Meditations and provides them with concise answers by extracting the most relevant content from the book.</p>
<p>Let’s dive in!</p>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>You should be familiar with these topics to make the most out of this tutorial:</p>
<ol type="1">
<li>What <a href="https://blog.dataiku.com/semantic-search-an-overlooked-nlp-superpower?ref=dylancastillo.co">semantic search</a> is.</li>
<li>How to use <a href="https://dylancastillo.co/elasticsearch-python/">Elasticsearch in Python</a>.</li>
<li>What <a href="https://platform.openai.com/docs/guides/embeddings">text embeddings</a> are.</li>
</ol>
<p>In addition, you must install <a href="https://docs.docker.com/get-docker/?ref=dylancastillo.co">Docker</a> and create an account at <a href="https://beta.openai.com">OpenAI</a>.</p>
</section>
<section id="designing-a-semantic-search-service" class="level2">
<h2 class="anchored" data-anchor-id="designing-a-semantic-search-service">Designing a Semantic Search Service</h2>
<p>You’re going to build a service with three components:</p>
<ol type="1">
<li><strong>Indexer:</strong> This creates the index, generates the embeddings and the metadata (source and title of the book, in this case), and adds them to the vector database.</li>
<li><strong>Vector database:</strong> This is a database that you use to store and retrieve the embeddings you generate.</li>
<li><strong>Search app:</strong> This is a backend service that uses the user’s search term, generates an embedding from it, and then looks for the most similar embeddings in the vector database.</li>
</ol>
<p>Here’s a diagram of this architecture:</p>
<p><a href="images/semantic-search-elasticsearch-openai-langchain/image-12.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://dylancastillo.co/posts/images/semantic-search-elasticsearch-openai-langchain/image-12.png" class="img-fluid"></a></p>
<p>If you’ve read my previous <a href="https://dylancastillo.co/semantic-search-with-opensearch-cohere-and-fastapi/">tutorial</a> on semantic search, you might have noticed that the <strong>vectorizer</strong> isn’t part of this architecture. I’m purposely skipping it because <code>langchain</code> takes care of that part for you, so you can have the indexer and vectorizer in the same place.</p>
<p>Next, you’ll set up your local environment.</p>
</section>
<section id="set-up-your-local-environment" class="level2">
<h2 class="anchored" data-anchor-id="set-up-your-local-environment">Set Up Your Local Environment</h2>
<p>Follow these steps to set up your local environment:</p>
<ol type="1">
<li>Install <a href="https://www.python.org/downloads/">Python 3.10</a>.</li>
<li>Install <a href="https://python-poetry.org/docs/#installation">Poetry</a>. It’s optional but highly recommended.</li>
<li>Clone the project’s repository:</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/dylanjcastillo/semantic-search-elasticsearch-openai-langchain</span></code></pre></div>
<ol start="4" type="1">
<li><p>From the root folder of the project, install the dependencies:</p>
<ul>
<li>Using <strong>Poetry:</strong> Create the virtual environment in the same directory as the project and install the dependencies:</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> config virtualenvs.in-project true</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> install</span></code></pre></div>
<ul>
<li>Using <strong>venv and pip:</strong> Create a virtual environment and install the dependencies listed in <code>requirements.txt</code>:</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3.10</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span></code></pre></div></li>
<li><p>Open <code>src/.env-example</code>, add your secret OpenAI key, and save the file as <code>.env</code>.</p></li>
</ol>
<p>By now, you’ll have a virtual environment set up with the required libraries and a local copy of the repository. Your project structure should look like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">semantic-search-elasticsearch-openai-langchain</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> LICENSE</span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> README.md</span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> poetry.lock</span>
<span id="cb4-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> pyproject.toml</span>
<span id="cb4-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> requirements.txt</span>
<span id="cb4-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> run_elasticsearch.sh</span>
<span id="cb4-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> src</span>
<span id="cb4-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> ├── app.py</span>
<span id="cb4-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> ├── config.py</span>
<span id="cb4-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── data</span>
<span id="cb4-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> │   └── Marcus_Aurelius_Antoninus...</span>
<span id="cb4-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> │       ├── index.html</span>
<span id="cb4-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> │       ├── metadata.opf</span>
<span id="cb4-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> │       └── style.css</span>
<span id="cb4-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> ├── indexer.py</span>
<span id="cb4-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── .env-example</span>
<span id="cb4-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> .venv/</span></code></pre></div>
<p>These are the most relevant files and directories in the project:</p>
<ul>
<li><code>poetry.lock</code> and <code>pyproject.toml</code>: These files contain the project’s specifications and dependencies and are used by Poetry to create a virtual environment.</li>
<li><code>requirements.txt</code>: This file contains a list of Python packages required by the project.</li>
<li><code>run_elasticsearch_docker.sh</code>: This file contains a bash script used to run an Elasticsearch cluster locally.</li>
<li><code>src/app.py</code>: This file contains the code of the search application.</li>
<li><code>src/config.py</code>: This file contains project configuration specifications such as OpenAI’s API key (read from a <code>.env</code> file), the paths to the data, and the name of the index.</li>
<li><code>src/data/</code>: This directory contains <a href="https://en.wikisource.org/wiki/Marcus_Aurelius_Antoninus_-_His_Meditations_concerning_himselfe">Meditations</a> as originally downloaded from <a href="https://en.wikisource.org/wiki/Main_Page?ref=dylancastillo.co">Wikisource</a>. You’ll use that as the corpus of text for this tutorial.</li>
<li><code>src/indexer.py</code>: This file contains the code you use to create an index and insert the documents in OpenSearch.</li>
<li><code>.env-example</code>: This file is typically used for environment variables. In this case, you use it to pass OpenAI’s API key to your application.</li>
<li><code>.venv/</code>: This directory contains the project’s virtual environment.</li>
</ul>
<p>All done! Let’s get going.</p>
</section>
<section id="start-a-local-elasticsearch-cluster" class="level2">
<h2 class="anchored" data-anchor-id="start-a-local-elasticsearch-cluster">Start a Local Elasticsearch Cluster</h2>
<p>Before we get into the code, you should start a local Elasticsearch cluster. Open a new terminal, navigate to the project’s root folder, and run:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span> run_elasticsearch_docker.sh</span></code></pre></div>
<p>If everything went well, a lengthy text string will appear on the terminal. For the rest of the tutorial, keep this terminal window open in the background.</p>
</section>
<section id="split-and-index-the-book" class="level2">
<h2 class="anchored" data-anchor-id="split-and-index-the-book">Split and Index the Book</h2>
<p>In this step, you’ll do two things:</p>
<ol type="1">
<li>Process the text from the book by splitting it into chunks of 1,000 tokens.</li>
<li>Index the text chunks you’ve generated (from now on called documents) in your Elasticsearch cluster.</li>
</ol>
<p>Take a look at <code>src/indexer.py</code>:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.document_loaders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BSHTMLLoader</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.embeddings.openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAIEmbeddings</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.text_splitter <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RecursiveCharacterTextSplitter</span>
<span id="cb6-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.vectorstores <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ElasticVectorSearch</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> config <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Paths, openai_api_key</span>
<span id="cb6-7"></span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main():</span>
<span id="cb6-10">    loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BSHTMLLoader(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(Paths.book))</span>
<span id="cb6-11">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loader.load()</span>
<span id="cb6-12"></span>
<span id="cb6-13">    text_splitter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RecursiveCharacterTextSplitter.from_tiktoken_encoder(</span>
<span id="cb6-14">        chunk_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, chunk_overlap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-15">    )</span>
<span id="cb6-16">    documents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_splitter.split_documents(data)</span>
<span id="cb6-17"></span>
<span id="cb6-18">    embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAIEmbeddings(openai_api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>openai_api_key)</span>
<span id="cb6-19">    db <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ElasticVectorSearch.from_documents(</span>
<span id="cb6-20">        documents,</span>
<span id="cb6-21">        embeddings,</span>
<span id="cb6-22">        elasticsearch_url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://localhost:9200"</span>,</span>
<span id="cb6-23">        index_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elastic-index"</span>,</span>
<span id="cb6-24">    )</span>
<span id="cb6-25">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(db.client.info())</span>
<span id="cb6-26"></span>
<span id="cb6-27"></span>
<span id="cb6-28"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb6-29">    main()</span></code></pre></div>
<p>This code takes Meditations, splits it into text chunks of 1,000 tokens, and then indexes those chunks in your Elasticsearch cluster. Here’s a detailed breakdown:</p>
<ul>
<li><strong>Lines 1 to 4</strong> import the required components from <code>langchain</code>:
<ul>
<li><strong><code>BSHTMLLoader</code></strong>: This <a href="https://python.langchain.com/en/latest/modules/indexes/document_loaders.html">loader</a> uses BeautifulSoup4 to parse the documents.</li>
<li><strong><code>OpenAIEmbeddings</code></strong>: This component is a wrapper around OpenAI embeddings. It helps you generate embeddings for documents and queries.</li>
<li><strong><code>RecursiveCharacterTextSplitter</code></strong>: This utility function divides the input text by attempting various characters in an order designed to maintain semantically similar content in proximity. The characters used for splitting, in the following order, are: <code>"\n\n"</code>, <code>"\n"</code>, <code>" "</code>, <code>""</code>.</li>
<li><strong><code>ElasticSearchVector</code></strong>: This is a wrapper around the Elasticsearch client, that simplifies interacting with your cluster.</li>
</ul></li>
<li><strong>Line 6</strong> imports the relevant configurations from <code>config.py</code></li>
<li><strong>Lines 11 and 12</strong> extract the book’s text using <code>BSHTMLLoader</code>.</li>
<li><strong>Lines 13 to 16</strong> initialize the text splitter and split the text in chunks of no more than 1,000 tokens. In this case, you use <a href="https://github.com/openai/tiktoken"><code>tiktoken</code></a> to count the tokens but you can also use different <a href="https://python.langchain.com/en/latest/modules/indexes/text_splitters/getting_started.html">length functions</a>, such as counting the number of characters instead of tokens or a different tokenizing function.</li>
<li><strong>Lines 18 to 25</strong> initialize the embeddings function, create a new index, and index the documents generated by the text splitter. In <code>elasticsearch_url</code>, you specify the port where your application is running locally, and in <code>index_name</code> you specify the name of the index you’ll use. Finally, you print the Elasticsearch client information.</li>
</ul>
<p>To run this script, open a terminal, activate the virtual environment, and from <code>src</code> folder of your project, run the following command:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ../src/</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> indexer.py</span></code></pre></div>
<p>If everything went well, you should get an output that looks similar to this (but not properly formatted):</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0e1113eb2915"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cluster_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"docker-cluster"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cluster_uuid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"og6mFMqwQtaJiv_3E_q2YQ"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"number"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"8.7.0"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"build_flavor"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"build_type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"docker"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"build_hash"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"09520b59b6bc1057340b55750186466ea715e30e"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"build_date"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-03-27T16:31:09.816451435Z"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"build_snapshot"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"lucene_version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"9.5.0"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"minimum_wire_compatibility_version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7.17.0"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"minimum_index_compatibility_version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7.0.0"</span></span>
<span id="cb8-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb8-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"tagline"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You Know, for Search"</span></span>
<span id="cb8-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Next, let’s create a simple FastAPI app, to interact with your cluster.</p>
</section>
<section id="create-a-search-application" class="level2">
<h2 class="anchored" data-anchor-id="create-a-search-application">Create a Search Application</h2>
<p>In this step, you’ll create a simple application to interact with Meditations. You’ll connect to the Elasticsearch cluster, initialize the <a href="https://python.langchain.com/en/latest/modules/chains/index_examples/vector_db_qa.html">Retrieval Questioning/Answering Chain</a>, and create an <code>/ask</code> endpoint that lets the user interact with the app.</p>
<p>Take a look at the code of <code>src/app.py</code>:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastAPI</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.chains <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RetrievalQA</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.chat_models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.embeddings.openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAIEmbeddings</span>
<span id="cb9-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.vectorstores <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ElasticVectorSearch</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> config <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> openai_api_key</span>
<span id="cb9-8"></span>
<span id="cb9-9">embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAIEmbeddings(openai_api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>openai_api_key)</span>
<span id="cb9-10"></span>
<span id="cb9-11">db <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ElasticVectorSearch(</span>
<span id="cb9-12">    elasticsearch_url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://localhost:9200"</span>,</span>
<span id="cb9-13">    index_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elastic-index"</span>,</span>
<span id="cb9-14">    embedding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embedding,</span>
<span id="cb9-15">)</span>
<span id="cb9-16">qa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RetrievalQA.from_chain_type(</span>
<span id="cb9-17">    llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ChatOpenAI(temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb9-18">    chain_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stuff"</span>,</span>
<span id="cb9-19">    retriever<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>db.as_retriever(),</span>
<span id="cb9-20">)</span>
<span id="cb9-21"></span>
<span id="cb9-22">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span>
<span id="cb9-23"></span>
<span id="cb9-24"></span>
<span id="cb9-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb9-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> index():</span>
<span id="cb9-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb9-28">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Make a post request to /ask to ask questions about Meditations by Marcus Aurelius"</span></span>
<span id="cb9-29">    }</span>
<span id="cb9-30"></span>
<span id="cb9-31"></span>
<span id="cb9-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.post</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/ask"</span>)</span>
<span id="cb9-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ask(query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb9-34">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qa.run(query)</span>
<span id="cb9-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb9-36">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>: response,</span>
<span id="cb9-37">    }</span></code></pre></div>
<p>This code lets the user ask questions about Marcus Aurelius’ Meditations and provides answers back to the users. Let me show you how it works:</p>
<ul>
<li><strong>Lines 1 to 5</strong> import the required libraries:
<ul>
<li><strong><code>FastAPI</code></strong>: This class initializes the app.</li>
<li><strong><code>RetrievalQA</code></strong>: This is a <a href="https://python.langchain.com/en/latest/modules/chains.html">chain</a> that allows you to ask questions about documents in a vector database. It finds the most relevant documents based on your question and generates an answer from them.</li>
<li><strong><code>ChatOpenAI</code></strong>: This is a wrapper around OpenAI’s chat models.</li>
<li><strong><code>OpenAIEmbeddings</code></strong> and <strong><code>ElasticVectorSearch</code></strong>: These are the same wrappers discussed in the previous section.</li>
</ul></li>
<li><strong>Line 7</strong> imports the OpenAI secret key.</li>
<li><strong>Lines 9 to 15</strong> initialize the Elasticsearch cluster using OpenAI embeddings.</li>
<li><strong>Lines 16 to 20</strong> initialize the <code>RetrievalQA</code> chain with the following parameters:
<ul>
<li><strong><code>llm</code></strong>: Specifies the LLM used to run prompts defined in the chain.</li>
<li><strong><code>chain_type</code></strong>: Defines how documents are retrieved and processed from the vector database. By specifying <code>stuff</code>, documents will be retrieved and passed to the chain to answer the question as-is. Alternatively, you can use <code>map_reduce</code> or <code>map_rerank</code> for additional processing before answering the question, but these methods use more API calls. For more information, consult <a href="https://docs.langchain.com/docs/components/chains/index_related_chains">the langchain documentation</a>.</li>
<li><strong><code>retriever</code></strong>: Specifies the vector database used by the chain to retrieve documents.</li>
</ul></li>
<li><strong>Lines 22 to 36</strong> initialize the FastAPI app and define two endpoints. The <code>/</code> endpoint provides users with information on how to use the application. The <code>/ask</code> endpoint takes a user’s question (<code>query</code> parameter) and returns an answer using the previously initialized chain.</li>
</ul>
<p>Finally, you can run the app from the terminal (using your virtual environment):</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uvicorn</span> app:app <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--reload</span></span></code></pre></div>
<p>Then, visit <code>http://127.0.0.1:8000/docs</code>, and test <code>/ask</code> by making a question about the book:</p>
<p><a href="images/semantic-search-elasticsearch-openai-langchain/image-13.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://dylancastillo.co/posts/images/semantic-search-elasticsearch-openai-langchain/image-13.png" class="img-fluid"></a></p>
<p>If everything went well, you should get something like this:</p>
<p><a href="images/semantic-search-elasticsearch-openai-langchain/image-14.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://dylancastillo.co/posts/images/semantic-search-elasticsearch-openai-langchain/image-14.png" class="img-fluid"></a></p>
<p>That’s it! You now have your own semantic search service up and running, based on Elasticsearch, OpenAI, Langchain, and FastAPI.</p>
</section>
<section id="going-to-production" class="level2">
<h2 class="anchored" data-anchor-id="going-to-production">Going to Production</h2>
<p>Moving to production can vary greatly for different software products. However, at a minimum, you should:</p>
<ul>
<li>Build appropriate data ingestion and processing pipelines. When adding new data, you generally do not want to rebuild the index, as you did in this tutorial.</li>
<li>Use a production-ready <a href="https://www.elastic.co/pricing/">Elasticsearch-managed instance</a> or a <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#docker-prod-prerequisites">Docker image</a> optimized for production. The instance used in this tutorial was intended for testing and development purposes only.</li>
<li>Choose a deployment strategy that suits your organization’s needs. For example, I often use <a href="https://dylancastillo.co/fastapi-nginx-gunicorn/">NGINX with Gunicorn and Uvicorn workers</a> for small projects.</li>
</ul>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Way to go! In this tutorial, you’ve learned how to build a semantic search engine using Elasticsearch, OpenAI, and Langchain.</p>
<p>In particular, you’ve learned:</p>
<ul>
<li>How to structure a semantic search service.</li>
<li>How to use LangChain to split and index documents.</li>
<li>How to use Elasticsearch as a vector database with LangChain.</li>
<li>How to use the Retrieval Questioning/Answering Chain to answer questions with a vector database.</li>
<li>What you should consider when productizing this type of application.</li>
</ul>
<p>Hope you found this tutorial useful. Let me know if you have any questions!</p>
<p>All the code for this tutorial is <a href="https://github.com/dylanjcastillo/semantic-search-elasticsearch-openai-langchain">available on GitHub</a>.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2023,
  author = {Castillo, Dylan},
  title = {Semantic {Search} with {Elasticsearch,} {OpenAI,} and
    {LangChain}},
  date = {2023-04-27},
  url = {https://dylancastillo.co/posts/semantic-search-elasticsearch-openai-langchain.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2023" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2023. <span>“Semantic Search with Elasticsearch,
OpenAI, and LangChain.”</span> April 27, 2023. <a href="https://dylancastillo.co/posts/semantic-search-elasticsearch-openai-langchain.html">https://dylancastillo.co/posts/semantic-search-elasticsearch-openai-langchain.html</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <category>ml</category>
  <category>nlp</category>
  <guid>https://dylancastillo.co/posts/semantic-search-elasticsearch-openai-langchain.html</guid>
  <pubDate>Thu, 27 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Semantic Search with OpenSearch, Cohere, and FastAPI</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/semantic-search-with-opensearch-cohere-and-fastapi.html</link>
  <description><![CDATA[ 




<p>Semantic search is a <a href="https://trends.google.com/trends/explore?date=today%205-y&amp;q=semantic%20search">hot topic</a> right now. The fast-paced progress of Large Language Models (LLMs), as well as the availability and quality of embeddings, the key technology behind semantic search, have piqued the interest of many people in this field.</p>
<p>I’ve worked on a number of projects involving semantic search (before it was cool!), and have been closely following the progress in LLMs. So I decided to write a step-by-step tutorial that combined these two technologies.</p>
<p>In this tutorial, I’ll show you how to build a semantic search service using <a href="https://opensearch.org/">OpenSearch</a>, <a href="https://cohere.ai/">Cohere</a>, and <a href="fastapi.tiangolo.com/">FastAPI</a>. You’ll create an app that lets users search through news articles to find the ones that are most relevant to their query.</p>
<p>Let’s get started!</p>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>There are a few things you need to know to get the most out of this tutorial:</p>
<ol type="1">
<li>What <a href="https://blog.dataiku.com/semantic-search-an-overlooked-nlp-superpower?ref=dylancastillo.co">semantic search</a> is.</li>
<li>How <a href="https://dylancastillo.co/opensearch-python/">OpenSearch</a> works.</li>
<li>What <a href="https://en.wikipedia.org/wiki/Large_language_model">LLMs</a> are.</li>
</ol>
<p>Don’t feel discouraged if some of these concepts are new to you. A basic understanding of these topics should be enough to complete this tutorial.</p>
<p>In addition, you must install <a href="https://docs.docker.com/get-docker/">Docker</a> and create an account at <a href="https://cohere.ai/">Cohere</a>.</p>
</section>
<section id="keyword-based-search-vs.-semantic-search" class="level2">
<h2 class="anchored" data-anchor-id="keyword-based-search-vs.-semantic-search">Keyword-based Search vs.&nbsp;Semantic Search</h2>
<p>Search engines have evolved over time to provide users with more relevant results. In the past, search engines relied on keyword matching to deliver these results. For example, if a user searched for “AI chatbot,” the search engine would find documents that included that phrase and show them based on a ranking system like <a href="https://en.wikipedia.org/wiki/PageRank">PageRank</a>.</p>
<p>This method worked well for finding results that contained specific keywords but fell short when users sought information that was related to, but not identical to, their initial query. For example, a search for “machine learning” might yield more relevant results if it also considered semantically similar terms such as “artificial intelligence” or “deep learning”.</p>
<p>Enter <a href="https://en.wikipedia.org/wiki/Semantic_search">semantic search</a>. It is a more sophisticated method that takes into account factors like synonyms, user context, and concept relationships when generating search results. By considering these factors, this approach provides users with better sets of results.</p>
</section>
<section id="architecting-a-semantic-search-service" class="level2">
<h2 class="anchored" data-anchor-id="architecting-a-semantic-search-service">Architecting a Semantic Search Service</h2>
<p>Aside from the data extraction pipeline, which I’m not including here, the semantic search service you’ll create has four parts:</p>
<ol type="1">
<li><strong>Vectorizer:</strong> This takes care of creating numerical vectors, called <a href="https://en.wikipedia.org/wiki/Word_embedding">embeddings</a>, from the documents (news articles) in your dataset.</li>
<li><strong>Indexer:</strong> This adds the embeddings and the metadata such as URL, title, and author to the vector database.</li>
<li><strong>Vector database:</strong> This is a database that stores and retrieves vectors representing documents.</li>
<li><strong>Search client:</strong> This is a FastAPI-based backend service that processes the user’s query, vectorizes it, and searches the vector database for the most similar vectors.</li>
</ol>
<p>Here’s a diagram of all the components:</p>
<p><a href="semantic-search-with-opensearch-cohere-and-fastapi/image.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://dylancastillo.co/posts/semantic-search-with-opensearch-cohere-and-fastapi/image.png" class="img-fluid"></a></p>
<p>Architecture diagram</p>
<p>Next, you’ll set up your local environment to run the project.</p>
</section>
<section id="set-up-your-local-environment" class="level2">
<h2 class="anchored" data-anchor-id="set-up-your-local-environment">Set Up Your Local Environment</h2>
<p>Follow these steps to set up your local environment:</p>
<ol type="1">
<li>Install <a href="https://www.python.org/downloads/">Python 3.11</a>.</li>
<li>Clone the repository with the sample app:</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/dylanjcastillo/opensearch-cohere-semantic-search</span></code></pre></div>
<ol start="3" type="1">
<li>Go to the root folder of the project and create a virtual environment with the dependencies using <strong>venv and pip:</strong></li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3.11</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span></code></pre></div>
<p>Assuming all went smoothly, you should have a virtual environment set up with the required libraries and the following project structure:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">opensearch-cohere-semantic-search</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> LICENSE</span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> README.md</span>
<span id="cb3-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> data</span>
<span id="cb3-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── news.csv</span>
<span id="cb3-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── news_sample.csv</span>
<span id="cb3-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── news_sample_with_vectors.csv</span>
<span id="cb3-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> notebooks</span>
<span id="cb3-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── generate_sample.ipynb</span>
<span id="cb3-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> requirements.txt</span>
<span id="cb3-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> run_opensearch_docker.sh</span>
<span id="cb3-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> src</span>
<span id="cb3-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── app.py</span>
<span id="cb3-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── config.py</span>
<span id="cb3-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── indexer.py</span>
<span id="cb3-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── vectorizer.py</span>
<span id="cb3-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> .env-example</span>
<span id="cb3-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> .venv/</span></code></pre></div>
<p>The project is organized into several key files and directories, as described below</p>
<ul>
<li><code>data/</code>: This directory contains the project’s data. It contains the <a href="https://www.kaggle.com/datasets/szymonjanowski/internet-articles-data-with-users-engagement">original dataset</a> downloaded from Kaggle, and a sample, which you’ll use in the tutorial.</li>
<li><code>requirements.txt</code>: This file contains a list of Python packages required by the project and their respective versions.</li>
<li><code>run_opensearch_docker.sh</code>: This file contains a bash script used to run an OpenSearch cluster locally.</li>
<li><code>src/app.py</code>: This file contains the code of the FastAPI application.</li>
<li><code>src/config.py</code>: This file contains project configuration specifications such as Cohere’s API key (read from a <code>.env</code> file), the paths to the data, and the name of the index.</li>
<li><code>src/indexer.py</code>: This file contains the code you use to create an index and insert the documents in OpenSearch.</li>
<li><code>src/vectorizer.py</code>: This file contains the code to transform the input data into embeddings.</li>
<li><code>.env-example</code>: This file is an example of the environment variables you must provide.</li>
<li><code>.venv/</code>: This directory contains the project’s virtual environment.</li>
</ul>
<p>All done! Let’s get going.</p>
</section>
<section id="run-a-local-opensearch-cluster" class="level2">
<h2 class="anchored" data-anchor-id="run-a-local-opensearch-cluster">Run a Local OpenSearch Cluster</h2>
<p>Before we get into the code, you should start a local OpenSearch cluster. Open a new terminal, navigate to the project’s root folder, and run:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span> run_opensearch_docker.sh</span></code></pre></div>
<p>This will launch a local OpenSearch cluster. If everything went well, the terminal will show a long string of text. Keep the terminal open in the background and move on to the next step.</p>
</section>
<section id="vectorize-the-articles" class="level2">
<h2 class="anchored" data-anchor-id="vectorize-the-articles">Vectorize the Articles</h2>
<p>You’ll start by transforming the news articles into vectors (embeddings). There are many approaches you could take such as using <a href="https://dylancastillo.co/nlp-snippets-cluster-documents-using-word2vec/#cluster-documents-using--mini-batches--k-means">Word2Vec</a>, <a href="https://sbert.net/docs/pretrained_models.html">Sentence-Transformers</a>, or LLM-based <a href="https://platform.openai.com/docs/guides/embeddings">embedding</a> <a href="https://docs.cohere.ai/reference/embed">services</a>. In this case, you’ll use <a href="https://cohere.ai/">Cohere</a>.</p>
<p>Use <code>src/vectorizer.py</code> for that:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cohere</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> config <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> COHERE_API_KEY, NEWS_SAMPLE_DATASET, DATA</span>
<span id="cb5-6"></span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main():</span>
<span id="cb5-9">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(NEWS_SAMPLE_DATASET)</span>
<span id="cb5-10">    cohere_client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cohere.Client(COHERE_API_KEY)</span>
<span id="cb5-11"></span>
<span id="cb5-12">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span></span>
<span id="cb5-13">    batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">96</span></span>
<span id="cb5-14">    batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-15">    vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-16"></span>
<span id="cb5-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(df.iterrows(), total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df)):</span>
<span id="cb5-18">        batch.append(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>])</span>
<span id="cb5-19"></span>
<span id="cb5-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(batch) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> batch_size:</span>
<span id="cb5-21">            response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cohere_client.embed(texts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model)</span>
<span id="cb5-22">            vectors.append(response.embeddings)</span>
<span id="cb5-23">            batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-24"></span>
<span id="cb5-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(batch) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-26">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cohere_client.embed(texts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model)</span>
<span id="cb5-27">        vectors.append(response.embeddings)</span>
<span id="cb5-28">        batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-29"></span>
<span id="cb5-30">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vector"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sublist <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> vectors <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sublist]</span>
<span id="cb5-31"></span>
<span id="cb5-32">    df.to_csv(DATA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"news_sample_with_vectors.csv"</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-33"></span>
<span id="cb5-34"></span>
<span id="cb5-35"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb5-36">    main()</span></code></pre></div>
<p>This code reads the news articles dataset, splits it into batches, and generates embeddings for each individual article. It works as follows:</p>
<ul>
<li><strong>Lines 1 to 5</strong> import the required Python libraries and the configuration settings from <code>config.py</code>.</li>
<li><strong>Lines 9 to 28</strong> read the news articles sample, start the Cohere client, split the dataset into batches of 96 documents (as this is the maximum accepted by Cohere), and uses the client to get embeddings for each document.</li>
<li><strong>Lines 30 to 32</strong> create a new column in the DataFrame to store the vectors and save the new dataset into your filesystem.</li>
</ul>
<p>You can run this script by opening a terminal in <code>src</code> and running:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">python vectorizer.py</span></code></pre></div>
<p>Next, you’ll create an index to store the embeddings.</p>
</section>
<section id="index-the-vectors-and-metadata" class="level2">
<h2 class="anchored" data-anchor-id="index-the-vectors-and-metadata">Index the Vectors and Metadata</h2>
<p>After you’ve created embeddings of each article, you’ll store them, and their metadata (title, content, description), in an index in your OpenSearch cluster.</p>
<p>You can use <code>src/indexer.py</code> for that:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> opensearchpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenSearch, NotFoundError</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> config <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> NEWS_WITH_VECTORS_DATASET, INDEX_NAME</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb7-6"></span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main():</span>
<span id="cb7-9">    client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenSearch(</span>
<span id="cb7-10">        hosts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"host"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"localhost"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"port"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9200</span>}],</span>
<span id="cb7-11">        http_auth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"admin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"admin"</span>),</span>
<span id="cb7-12">        use_ssl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb7-13">        verify_certs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb7-14">        ssl_assert_hostname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb7-15">        ssl_show_warn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb7-16">    )</span>
<span id="cb7-17"></span>
<span id="cb7-18">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(NEWS_WITH_VECTORS_DATASET)</span>
<span id="cb7-19"></span>
<span id="cb7-20">    body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb7-21">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"settings"</span>: {</span>
<span id="cb7-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"knn"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>},</span>
<span id="cb7-23">        },</span>
<span id="cb7-24">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mappings"</span>: {</span>
<span id="cb7-25">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>: {</span>
<span id="cb7-26">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer"</span>},</span>
<span id="cb7-27">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"keyword"</span>},</span>
<span id="cb7-28">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"keyword"</span>},</span>
<span id="cb7-29">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"keyword"</span>},</span>
<span id="cb7-30">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"embedding"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"knn_vector"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dimension"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>},</span>
<span id="cb7-31">            }</span>
<span id="cb7-32">        },</span>
<span id="cb7-33">    }</span>
<span id="cb7-34"></span>
<span id="cb7-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb7-36">        client.indices.delete(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>INDEX_NAME)</span>
<span id="cb7-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> NotFoundError:</span>
<span id="cb7-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb7-39">    client.indices.create(INDEX_NAME, body<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>body)</span>
<span id="cb7-40"></span>
<span id="cb7-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(df.iterrows(), total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df)):</span>
<span id="cb7-42">        embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb7-43">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vector"</span>].replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"["</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>).replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>).split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>)</span>
<span id="cb7-44">        ]</span>
<span id="cb7-45">        client.index(</span>
<span id="cb7-46">            index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>INDEX_NAME,</span>
<span id="cb7-47">            body<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb7-48">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source_id"</span>: i,</span>
<span id="cb7-49">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>],</span>
<span id="cb7-50">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>],</span>
<span id="cb7-51">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>],</span>
<span id="cb7-52">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"embedding"</span>: embedding,</span>
<span id="cb7-53">            },</span>
<span id="cb7-54">        )</span>
<span id="cb7-55"></span>
<span id="cb7-56">    client.indices.refresh(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>INDEX_NAME)</span>
<span id="cb7-57">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Done"</span>, client.cat.count(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>INDEX_NAME, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"json"</span>))</span>
<span id="cb7-58"></span>
<span id="cb7-59"></span>
<span id="cb7-60"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb7-61">    main()</span></code></pre></div>
<p>This code will create a new index in your OpenSearch cluster, and store the vectors and metadata in it. Here’s how it works:</p>
<ul>
<li><strong>Lines 1 to 5</strong> import the required Python libraries and the predefined configuration settings from <code>config.py</code>.</li>
<li><strong>Lines 9 to 16</strong> start the OpenSearch client.</li>
<li><strong>Lines 20 to 33</strong> define the settings and mappings of the index you’ll create. You set <code>"knn": True</code> so that OpenSearch knows that you’ll be using the <a href="https://opensearch.org/docs/latest/search-plugins/knn/index/">k-NN plugin</a> to store and retrieve vectors. Very importantly, you also need to define the size of the vector in the <code>mappings</code>, based on the model you use. Cohere’s <a href="https://docs.cohere.ai/reference/embed"><code>small</code></a> embeddings generate vectors of 1024 dimensions.</li>
<li><strong>Lines 35 to 54</strong> create the index (and delete any previous ones), and add each document one by one. You index the <code>id</code>, <code>title</code>, <code>description</code>, and <code>embedding</code> for each document.</li>
</ul>
<p>You can run this script by opening a terminal in <code>src</code> and running:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">python indexer.py</span></code></pre></div>
<p>So far, you’ve created embeddings for each document and indexed them in your OpenSearch cluster. Next, you’ll run a search client to interact with them.</p>
</section>
<section id="create-a-search-client" class="level2">
<h2 class="anchored" data-anchor-id="create-a-search-client">Create a Search Client</h2>
<p>Finally, you’ll create a search client so that users can search the articles you indexed using FastAPI. It’ll let users provide a search term, and give them back the 10 most similar documents based on that term.</p>
<p>The code is available in <code>src/app.py</code>:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cohere</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastAPI</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> config <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> COHERE_API_KEY, INDEX_NAME</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> opensearchpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenSearch</span>
<span id="cb9-7"></span>
<span id="cb9-8"></span>
<span id="cb9-9">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span>
<span id="cb9-10"></span>
<span id="cb9-11">opensearch_client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenSearch(</span>
<span id="cb9-12">    hosts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"host"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"localhost"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"port"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9200</span>}],</span>
<span id="cb9-13">    http_auth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"admin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"admin"</span>),</span>
<span id="cb9-14">    use_ssl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb9-15">    verify_certs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb9-16">    ssl_assert_hostname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb9-17">    ssl_show_warn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb9-18">)</span>
<span id="cb9-19"></span>
<span id="cb9-20">cohere_client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cohere.Client(COHERE_API_KEY)</span>
<span id="cb9-21"></span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb9-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> index():</span>
<span id="cb9-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Make a post request to /search to search through news articles"</span>}</span>
<span id="cb9-26"></span>
<span id="cb9-27"></span>
<span id="cb9-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.post</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/search"</span>)</span>
<span id="cb9-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> search(query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb9-30">    query_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cohere_client.embed(texts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[query], model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>).embeddings[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb9-31"></span>
<span id="cb9-32">    similar_news <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> opensearch_client.search(</span>
<span id="cb9-33">        index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>INDEX_NAME,</span>
<span id="cb9-34">        body<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb9-35">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"knn"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"embedding"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vector"</span>: query_embedding, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}}},</span>
<span id="cb9-36">        },</span>
<span id="cb9-37">    )</span>
<span id="cb9-38">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb9-39">        {</span>
<span id="cb9-40">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>: r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_source"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>],</span>
<span id="cb9-41">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_source"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>],</span>
<span id="cb9-42">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_source"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>],</span>
<span id="cb9-43">        }</span>
<span id="cb9-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> similar_news[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hits"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hits"</span>]</span>
<span id="cb9-45">    ]</span>
<span id="cb9-46"></span>
<span id="cb9-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb9-48">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>: response,</span>
<span id="cb9-49">    }</span></code></pre></div>
<p>This code lets users search through the index. It works as follows:</p>
<ul>
<li><strong>Lines 1 to 6</strong> import the required Python libraries, and the configuration defined in <code>config.py</code>.</li>
<li><strong>Lines 9 to 20</strong> initialize the FastAPI app, and the OpenSearch and Cohere clients.</li>
<li><strong>Lines 23 to 25</strong> define an endpoint that provides the user with a message explaining how to use the app if they make a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET">GET</a> request to “/”.</li>
<li><strong>Lines 28 to 49</strong> define a<code>**/**search</code> endpoint that accepts a query string parameter. It uses Cohere to generate an embedding from a query and then searches the OpenSearch index for the ten most similar documents. Finally, it formats the results as a user response.</li>
</ul>
<p>To run the app, you can use <code>uvicorn app:app --reload</code>. You can test the app by opening your browser, navigating to <code>localhost:8000/docs</code>, and clicking on <code>POST /search</code>:</p>
<p><a href="images/semantic-search-with-opensearch-cohere-and-fastapi/image-5.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://dylancastillo.co/posts/images/semantic-search-with-opensearch-cohere-and-fastapi/image-5.png" class="img-fluid"></a></p>
<p>For instance, if you search for “Nicolas Maduro,” the current president of Venezuela who is widely regarded as a dictator. You’ll get results for articles about authoritarian governments or power abuses:</p>
<p><a href="images/semantic-search-with-opensearch-cohere-and-fastapi/image-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://dylancastillo.co/posts/images/semantic-search-with-opensearch-cohere-and-fastapi/image-4.png" class="img-fluid"></a></p>
<p>That’s it! If you want to know how to deploy this app, check out a <a href="https://dylancastillo.co/fastapi-nginx-gunicorn/">previous article</a> I wrote.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Congrats! You’ve built your own semantic search service. In this tutorial, you’ve learned:</p>
<ul>
<li>What is semantic search, and how it is different from keyword-based search.</li>
<li>What are the main components of a semantic search service.</li>
<li>How to use Cohere to vectorize text data.</li>
<li>How to use OpenSearch to store embeddings.</li>
</ul>
<p>Hope you found this tutorial useful. Let me know if you have any questions!</p>
<p>All the code for this tutorial is <a href="https://github.com/dylanjcastillo/opensearch-cohere-semantic-search">available on GitHub</a>.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2023,
  author = {Castillo, Dylan},
  title = {Semantic {Search} with {OpenSearch,} {Cohere,} and {FastAPI}},
  date = {2023-04-11},
  url = {https://dylancastillo.co/posts/semantic-search-with-opensearch-cohere-and-fastapi.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2023" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2023. <span>“Semantic Search with OpenSearch, Cohere,
and FastAPI.”</span> April 11, 2023. <a href="https://dylancastillo.co/posts/semantic-search-with-opensearch-cohere-and-fastapi.html">https://dylancastillo.co/posts/semantic-search-with-opensearch-cohere-and-fastapi.html</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <category>ml</category>
  <category>nlp</category>
  <guid>https://dylancastillo.co/posts/semantic-search-with-opensearch-cohere-and-fastapi.html</guid>
  <pubDate>Tue, 11 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Build an AI Search Engine Using FastAPI, Qdrant, and ChatGPT</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/ai-search-engine-fastapi-qdrant-chatgpt.html</link>
  <description><![CDATA[ 




<p>With all the buzz surrounding <a href="https://blogs.microsoft.com/blog/2023/02/07/reinventing-search-with-a-new-ai-powered-microsoft-bing-and-edge-your-copilot-for-the-web/">Bing AI</a> and <a href="https://blog.google/technology/ai/bard-google-ai-search-updates/">Bard</a>, I was keen on building a (tiny) AI search engine myself. After a few days of tinkering, I released <a href="https://seneca.dylancastillo.co/">Ask Seneca</a>. It’s a small app that allows you to consult a GPT-based Seneca who answers your questions and cites his sources.</p>
<p>When a user asks a question, Ask Seneca searches for Seneca’s most relevant writings to answer that question and then summarizes those writings into a coherent answer. I built it using <a href="fastapi.tiangolo.com/">FastAPI</a>, <a href="https://qdrant.tech/">Qdrant</a>, <a href="https://www.sbert.net/">Sentence Transformers</a>, and <a href="https://openai.com/product">GPT-3</a>. I recently updated it to use the <a href="https://openai.com/blog/introducing-chatgpt-and-whisper-apis">ChatGPT API</a>.</p>
<p>Despite <a href="https://www.reuters.com/technology/google-ai-chatbot-bard-offers-inaccurate-information-company-ad-2023-02-08/">the</a> <a href="https://simonwillison.net/2023/Feb/15/bing/">setbacks</a> that Bing AI and Bard are facing, the potential for this technology is vast - you could build tools for quick and efficient searches through legal documents, internal knowledge bases, product manuals, and more.</p>
<p>In this tutorial, I’ll show you how to build your own AI search engine. You’ll create an app that lets users ask questions to a GPT-based Marcus Aurelius, and provides them with concise answers and references to his <a href="https://en.wikisource.org/wiki/Marcus_Aurelius_Antoninus_-_His_Meditations_concerning_himselfe">Meditations</a>.</p>
<p>Let’s get to it!</p>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>To make the most out of this tutorial, you should know:</p>
<ol type="1">
<li>What <a href="https://blog.dataiku.com/semantic-search-an-overlooked-nlp-superpower">semantic search</a> is.</li>
<li>What <a href="https://www.pinecone.io/learn/vector-database/">vector databases</a> are.</li>
<li>What <a href="https://fastapi.tiangolo.com/">FastAPI</a> is and how to use it.</li>
</ol>
<p>You don’t have to be an expert in any of these areas, but familiarity with them will help you understand the sections that follow.</p>
</section>
<section id="designing-a-tiny-search-engine-with-chatgpt" class="level2">
<h2 class="anchored" data-anchor-id="designing-a-tiny-search-engine-with-chatgpt">Designing a (Tiny) Search Engine with ChatGPT</h2>
<p>Before you get started, you should understand the overall approach you’ll take to build your AI search engine. There are three parts to it:</p>
<ol type="1">
<li><strong>Extraction:</strong> This part consists of extracting the data that you want users to be able to search. In this case, that means parsing <a href="https://en.wikisource.org/wiki/Marcus_Aurelius_Antoninus_-_His_Meditations_concerning_himselfe">Meditations</a>. I won’t go into detail about this because it is very project-specific. The <a href="https://github.com/dylanjcastillo/ai-search-fastapi-qdrant-chatgpt/blob/main/data/processed/Marcus_Aurelius_Antoninus_-_His_Meditations_concerning_himselfe/Marcus_Aurelius_Antoninus_-_His_Meditations_concerning_himselfe.json">parsed data</a> is available in the repository.</li>
<li><strong>Indexing:</strong> This entails indexing the extracted data so that it can be accessed later when running searches. In this case, you’ll use a semantic search approach, which means you’ll search the data based on its meaning rather than keywords. That is, if you search for “How can I be happy?” you should get passages from Meditations that discuss happiness or feeling good, not just those that contain the exact words from the query.</li>
<li><strong>Search:</strong> This consists of a backend service that processes the user’s query, vectorizes it, finds vectors in the index that are the most similar to it, and then calls OpenAI’s API to generate a summarized answer for the user.</li>
</ol>
<p>Here’s a visual representation of how the parts of the application you’ll build in this tutorial fit together:</p>
<p><a href="images/ai-search-engine-fastapi-qdrant-chatgpt/image-8.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://dylancastillo.co/posts/images/ai-search-engine-fastapi-qdrant-chatgpt/image-8.png" class="img-fluid"></a></p>
<p>That’s all. Let’s continue!</p>
</section>
<section id="set-up-your-local-environment" class="level2">
<h2 class="anchored" data-anchor-id="set-up-your-local-environment">Set Up Your Local Environment</h2>
<p>Take the following steps to prepare your local environment:</p>
<ol type="1">
<li>Install <a href="https://www.python.org/downloads/">Python 3.10</a>.</li>
<li>Install <a href="https://python-poetry.org/docs/#installation">Poetry</a>. It’s not mandatory but I highly recommend it.</li>
<li>Clone the repository with the sample app:</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/dylanjcastillo/ai-search-fastapi-qdrant-chatgpt</span></code></pre></div>
<ol start="4" type="1">
<li><p>Go to the root folder of the project and install the dependencies with:</p>
<ul>
<li><strong>Poetry:</strong> Create the virtual environment in the same directory as the project and install the dependencies:</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> config virtualenvs.in-project true</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> install</span></code></pre></div>
<ul>
<li><strong>venv and pip:</strong> Create a virtual environment and install the dependencies listed in <code>requirements.txt</code>:</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3.10</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span></code></pre></div></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Because PyTorch <a href="https://github.com/pytorch/pytorch/issues/86566">does not yet support Python 3.11 in MacOS and Windows</a>, this tutorial will not work if you are running Python 3.11 on those operating systems.</p>
</div>
</div>
<p>If everything went well, you should have a virtual environment with all of the necessary libraries and a project structure that looks like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ai-search-fastapi-qdrant-gpt3</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> README.md</span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> config.py</span>
<span id="cb4-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> data</span>
<span id="cb4-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> ├── processed</span>
<span id="cb4-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> │&nbsp;&nbsp; └── Marcus_Aurelius_Antoninus...</span>
<span id="cb4-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> │&nbsp;&nbsp;     └── Marcus_Aurelius_Antoninus...json</span>
<span id="cb4-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> └── unzipped</span>
<span id="cb4-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>     └── Marcus_Aurelius_Antoninus...</span>
<span id="cb4-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>         ├── index.html</span>
<span id="cb4-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>         ├── metadata.opf</span>
<span id="cb4-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>         └── style.css</span>
<span id="cb4-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> main.py</span>
<span id="cb4-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> notebooks</span>
<span id="cb4-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> ├── extract_text.ipynb</span>
<span id="cb4-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> └── vectorize_text.ipynb</span>
<span id="cb4-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> poetry.lock</span>
<span id="cb4-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> pyproject.toml</span>
<span id="cb4-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> requirements.txt</span>
<span id="cb4-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> .env-example</span>
<span id="cb4-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> .venv/</span></code></pre></div>
<p>This is your project’s structure. Let me explain the purpose of the most important files and directories:</p>
<ul>
<li><code>config.py</code>: This file contains project configuration specifications such as Qdrant’s host, port, and API key (read from a <code>.env</code> file)</li>
<li><code>data/</code>: This directory contains the project’s data. It contains Meditations as originally downloaded from <a href="https://en.wikisource.org/wiki/Main_Page">Wikisource</a> as well as the processed file that you will use in the project.</li>
<li><code>main.py</code>: This file contains the code of the FastAPI application.</li>
<li><code>notebooks/</code>: This directory contains Jupyter notebooks for extracting, vectorizing, and indexing the data. <code>extract_text.ipynb</code> contains code to parse the HTML file and <code>vectorize_text.ipynb</code> contains code to vectorize and index the data.</li>
<li><code>poetry.lock</code> and <code>pyproject.toml</code>: These files contain information about the project’s dependencies and are used by Poetry to replicate the environment.</li>
<li><code>requirements.txt</code>: This file contains a list of Python packages required by the project and their respective versions.</li>
<li><code>.env-example</code>: This file is an example of the environment variables you must provide.</li>
<li><code>.venv/</code>: This directory contains the project’s virtual environment.</li>
</ul>
<p>That’s it! You’re now ready to get started.</p>
</section>
<section id="configure-qdrant-and-openai" class="level2">
<h2 class="anchored" data-anchor-id="configure-qdrant-and-openai">Configure Qdrant and OpenAI</h2>
<p>Start by renaming <code>.env-example</code> to <code>.env</code>. Don’t worry about filling in the values in <code>.env</code>. After you’ve created a cluster and the API keys for Qdrant and OpenAI, you’ll fill in the blanks.</p>
<section id="qdrant" class="level3">
<h3 class="anchored" data-anchor-id="qdrant">Qdrant</h3>
<p>Create an account at <a href="https://cloud.qdrant.io/">Qdrant</a>, if you don’t already have one. Then, on your account page go to <em>Clusters &gt; Create,</em> and create a cluster of 1GB of RAM, 0.5 vCPU, and 20GB Disk. Qdrant has a generous free tier, and it’s free to run a cluster with those specifications.</p>
<p><a href="images/ai-search-engine-fastapi-qdrant-chatgpt/image-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://dylancastillo.co/posts/images/ai-search-engine-fastapi-qdrant-chatgpt/image-1.png" class="img-fluid"></a></p>
<p>Next, paste the host and API key you obtained when you created your cluster into <code>.env</code>:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">QDRANT_PORT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>6333</span>
<span id="cb5-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">QDRANT_HOST</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;</span>your_qdrant_host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">QDRANT_API_KEY</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;</span>your_qdrant_api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>If you didn’t copy the key, you can still create a new one in <em>Access.</em></p>
<p>Finally, you can test that everything went well by running the first three cells in <code>vectorize_data.ipynb</code>.</p>
</section>
<section id="openai" class="level3">
<h3 class="anchored" data-anchor-id="openai">OpenAI</h3>
<p>If you don’t have an OpenAI account, <a href="https://platform.openai.com/login">create one</a>. After that, go to <em>Manage account &gt; API keys &gt; &nbsp;+ Create new secret key.</em></p>
<p><a href="images/ai-search-engine-fastapi-qdrant-chatgpt/image-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://dylancastillo.co/posts/images/ai-search-engine-fastapi-qdrant-chatgpt/image-4.png" class="img-fluid"></a></p>
<p>Then, paste the generated key in <code>.env</code>:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">QDRANT_PORT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>6333</span>
<span id="cb6-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">QDRANT_HOST</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;</span>your_qdrant_host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">QDRANT_API_KEY</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;</span>your_qdrant_api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">OPENAI_API_KEY</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;</span>your_openai_api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># new</span></span></code></pre></div>
<p>That’s it! Let’s continue.</p>
</section>
</section>
<section id="extract-data" class="level2">
<h2 class="anchored" data-anchor-id="extract-data">Extract Data</h2>
<p>The data extraction pipeline will vary greatly between projects, so I won’t go into too much detail here.<br>
Here are some useful guidelines to keep in mind when doing so:</p>
<ol type="1">
<li><strong>Garbage in, garbage out:</strong> The quality of your data will heavily influence your search results, so take your time with this step.</li>
<li><strong>Splitting documents:</strong> When you do semantic search, you need to divide documents into smaller chunks so that you can compare the similarity of each chunk to the user’s query. There is no right or wrong way to do this. In this case, I took a straightforward approach: divide the text into paragraphs, and if the paragraph is above a certain number of characters, divide it into multiple sentences.</li>
<li><strong>Production:</strong> For real-world scenarios, you should think about how frequently you’ll be extracting and ingesting data, adapting your pipeline for different data sources (e.g., scraping, APIs), and building pipeline monitors, among other things. In this example, because data extraction is a one-time event, I’m using jupyter notebooks, which isn’t always a good idea.</li>
</ol>
<p>Here’s a sneak peek at the <a href="https://github.com/dylanjcastillo/ai-search-fastapi-qdrant-gpt3/blob/main/data/processed/Marcus_Aurelius_Antoninus_-_His_Meditations_concerning_himselfe/Marcus_Aurelius_Antoninus_-_His_Meditations_concerning_himselfe.json">data</a> from this tutorial:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"book_title"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Meditations by Marcus Aurelius"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://en.wikisource.org/wiki/Marcus_Aurelius_Antoninus_-_His_Meditations_concerning_himselfe"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"data"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb7-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-6">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"title"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"THE FIRST BOOK"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-7">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://en.wikisource.org/wiki/Marcus_Aurelius_Antoninus_-_His_Meditations_concerning_himselfe#THE_FIRST_BOOK"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-8">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"sentences"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb7-9">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I. Of my grandfather Verus I have learned to be gentle and meek..."</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-10">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"II. Of him that brought me up, not to be fondly addicted..."</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-11">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"III. Of Diognetus, not to busy myself about vain things..."</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-12">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IV. To Rusticus I am beholding, that I first entered into the..."</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-13">    <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb7-14">        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-15">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-16"> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The tutorial’s data includes general metadata such as the book title and source URL, as well as information from each chapter with the sentences you’ll index.</p>
<p>If you want to take a look at how I extracted the data used in this tutorial, check out the <code>[extract_data.ipynb](https://github.com/dylanjcastillo/ai-search-fastapi-qdrant-gpt3/blob/main/notebooks/extract_text.ipynb)</code>.</p>
</section>
<section id="vectorize-and-index-data" class="level2">
<h2 class="anchored" data-anchor-id="vectorize-and-index-data">Vectorize and Index Data</h2>
<p>Once you’ve extracted the data, you’ll want to index it in your vector database.</p>
<p>The process consists of two steps:</p>
<ol type="1">
<li>Generate vectors for each sentence you extracted earlier.</li>
<li>Insert those vectors in a <a href="https://qdrant.tech/documentation/collections/"><strong>collection</strong></a>(the set of vectors you can search in the vector database).</li>
</ol>
<p>You can find the code for this section in <code>notebooks/vectorize_data.ipynb</code>.</p>
<p>As usual, you start by importing the required libraries:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb8-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb8-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qdrant_client <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> QdrantClient</span>
<span id="cb8-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qdrant_client.http <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> models</span>
<span id="cb8-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sentence_transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SentenceTransformer</span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.notebook <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> config <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> QDRANT_HOST, QDRANT_PORT, QDRANT_API_KEY, DATA, COLLECTION_NAME</span></code></pre></div>
<p>This code imports all the libraries and configuration variables you need to vectorize and index the data. Here are some things worth mentioning:</p>
<ul>
<li><code>qdrant_client</code> and <code>qdrant_client.http</code> let you interact with Qdrant’s client, so that you can insert and retrieve data from the <strong>collection.</strong></li>
<li><code>sentence_transformers</code> let you generate the vectors from text, using pretrained models.</li>
</ul>
<p>Next, you read the data as follows:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">BOOK_FILENAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Marcus_Aurelius_Antoninus_-_His_Meditations_concerning_himselfe"</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATA<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/processed/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>BOOK_FILENAME<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>BOOK_FILENAME<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.json"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb9-4">    meditations_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb9-5"></span>
<span id="cb9-6">rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> chapter <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(meditations_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>]):</span>
<span id="cb9-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sentence <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> chapter[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentences"</span>]:</span>
<span id="cb9-9">        rows.append(</span>
<span id="cb9-10">            (</span>
<span id="cb9-11">                chapter[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>],</span>
<span id="cb9-12">                chapter[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"url"</span>],</span>
<span id="cb9-13">                sentence,</span>
<span id="cb9-14">            )</span>
<span id="cb9-15">        )</span>
<span id="cb9-16"></span>
<span id="cb9-17">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(</span>
<span id="cb9-18">    data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rows, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"url"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>]</span>
<span id="cb9-19">)</span>
<span id="cb9-20"></span>
<span id="cb9-21">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span></code></pre></div>
<p>This code reads the previously processed data and removes short sentences. It works as follows:</p>
<ul>
<li><strong>Lines 1 to 4</strong> read the JSON file you generated for Meditations, and save it as <code>meditations_json</code>.</li>
<li><strong>Lines 6 to 15</strong> go through all the chapters of the book stored in the <code>data</code> key from <code>meditations_json</code> and for each chapter, it extracts the relevant data (title of chapter, URL of chapter, and sentence), and adds it to <code>rows</code>.</li>
<li><strong>Lines 17 to 21</strong> create a DataFrame with the data from <code>rows</code> and removes the sentences with less than 15 words.</li>
</ul>
<p>Next, you create a collection in your vector database:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create collection</span></span>
<span id="cb10-2">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QdrantClient(</span>
<span id="cb10-3">    host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>QDRANT_HOST, port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>QDRANT_PORT, api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>QDRANT_API_KEY</span>
<span id="cb10-4">)</span>
<span id="cb10-5">client.recreate_collection(</span>
<span id="cb10-6">    collection_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>COLLECTION_NAME,</span>
<span id="cb10-7">    vectors_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.VectorParams(</span>
<span id="cb10-8">        size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span>,</span>
<span id="cb10-9">        distance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.Distance.COSINE</span>
<span id="cb10-10">    ),</span>
<span id="cb10-11">)</span></code></pre></div>
<p>This code connects to your Qdrant’s cluster and creates a collection based on the name and settings you provide. In this case, you set the <code>size</code> to 384 based on the needs of the <a href="https://huggingface.co/sentence-transformers/msmarco-MiniLM-L-6-v3">model</a> you’ll use for vectorizing the sentences. You also set <code>distance</code> to use <a href="https://en.wikipedia.org/wiki/Cosine_similarity">Cosine distance</a>, which will define how the similarity between vectors is computed.</p>
<p>The next step is to generate the vectors (embeddings) from the text. You’ll use a pretrained model from Sentence Transformers to generate them instead of OpenAI-based embeddings. <a href="https://medium.com/@nils_reimers/openai-gpt-3-text-embeddings-really-a-new-state-of-the-art-in-dense-text-embeddings-6571fe3ec9d9">The latter are more expensive and not necessarily better.</a></p>
<p>To accomplish this, you load the pretrained model, generate the embeddings from the DataFrame sentences, and insert them into the collection you created:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SentenceTransformer(</span>
<span id="cb11-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msmarco-MiniLM-L-6-v3"</span>,</span>
<span id="cb11-3">    device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span></span>
<span id="cb11-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available()</span>
<span id="cb11-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mps"</span></span>
<span id="cb11-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.backends.mps.is_available()</span>
<span id="cb11-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>,</span>
<span id="cb11-8">)</span>
<span id="cb11-9"></span>
<span id="cb11-10">vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-11">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb11-12">batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-13"></span>
<span id="cb11-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> doc <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>].to_list()):</span>
<span id="cb11-15">    batch.append(doc)</span>
<span id="cb11-16"></span>
<span id="cb11-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(batch) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> batch_size:</span>
<span id="cb11-18">        vectors.append(model.encode(batch))</span>
<span id="cb11-19">        batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-20"></span>
<span id="cb11-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(batch) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb11-22">    vectors.append(model.encode(batch))</span>
<span id="cb11-23">    batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-24"></span>
<span id="cb11-25">vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate(vectors)</span>
<span id="cb11-26"></span>
<span id="cb11-27">book_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> meditations_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"book_title"</span>]</span>
<span id="cb11-28"></span>
<span id="cb11-29">client.upsert(</span>
<span id="cb11-30">    collection_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>COLLECTION_NAME,</span>
<span id="cb11-31">    points<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.Batch(</span>
<span id="cb11-32">        ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])],</span>
<span id="cb11-33">        payloads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb11-34">            {</span>
<span id="cb11-35">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>],</span>
<span id="cb11-36">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f", </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>book_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb11-37">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"url"</span>: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"url"</span>],</span>
<span id="cb11-38">            }</span>
<span id="cb11-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.iterrows()</span>
<span id="cb11-40">        ],</span>
<span id="cb11-41">        vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[v.tolist() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> vectors],</span>
<span id="cb11-42">    ),</span>
<span id="cb11-43">)</span></code></pre></div>
<p>This code loads the model, generates vectors from the sentences in the DataFrame, and inserts them into the collection you created. Here’s how it works:</p>
<ul>
<li><strong>Lines 1 to 8</strong> load the <code>msmarco-MiniLM-L-6-v3</code> sentence transformer model, and set the correct device in case you have a GPU available.</li>
<li><strong>Lines 10 to 23</strong> generate an array of vectors using the model you loaded. Each vector is a numerical representation of the sentences from your DataFrame.</li>
<li><strong>Lines 29 to 43</strong> insert the vectors and the additional data (actual sentence, book and chapter title, and URL) into the collection in your vector database.</li>
</ul>
</section>
<section id="create-a-server-with-fastapi" class="level2">
<h2 class="anchored" data-anchor-id="create-a-server-with-fastapi">Create a Server with FastAPI</h2>
<p>Next, you will create the FastAPI application that will let the user interact with your vector database and ChatGPT. The code for this section is in <code>main.py</code>.</p>
<p>You start by importing the required dependencies, setting up your Qdrant client, and loading the model:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> openai</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastAPI</span>
<span id="cb12-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qdrant_client <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> QdrantClient</span>
<span id="cb12-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sentence_transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SentenceTransformer</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> config <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (</span>
<span id="cb12-7">    COLLECTION_NAME,</span>
<span id="cb12-8">    OPENAI_API_KEY,</span>
<span id="cb12-9">    QDRANT_API_KEY,</span>
<span id="cb12-10">    QDRANT_HOST,</span>
<span id="cb12-11">    QDRANT_PORT,</span>
<span id="cb12-12">)</span>
<span id="cb12-13"></span>
<span id="cb12-14">openai.api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OPENAI_API_KEY</span>
<span id="cb12-15"></span>
<span id="cb12-16">qdrant_client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QdrantClient(</span>
<span id="cb12-17">    host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>QDRANT_HOST,</span>
<span id="cb12-18">    port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>QDRANT_PORT,</span>
<span id="cb12-19">    api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>QDRANT_API_KEY,</span>
<span id="cb12-20">)</span>
<span id="cb12-21"></span>
<span id="cb12-22">retrieval_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SentenceTransformer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msmarco-MiniLM-L-6-v3"</span>)</span>
<span id="cb12-23"></span>
<span id="cb12-24">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span></code></pre></div>
<p>This code imports the libraries and configuration settings, initializes the Qdrant client, and loads the model to memory (the same one you used for vectorizing the sentences). You load your model globally so that you don’t slow down requests by loading it each time someone asks a question.</p>
<p>Next, you define a function to help you create the prompt that you’ll use to get ChatGPT to generate a coherent answer based on the most relevant passages from Meditations:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> build_prompt(question: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, references: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]:</span>
<span id="cb13-2">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb13-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    You're Marcus Aurelius, emperor of Rome. You're giving advice to a friend who has asked you the following question: '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>question<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    You've selected the most relevant passages from your writings to use as source for your answer. Cite them in your answer.</span></span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    References:</span></span>
<span id="cb13-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span>.strip()</span>
<span id="cb13-9"></span>
<span id="cb13-10">    references_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb13-11"></span>
<span id="cb13-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, reference <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(references, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb13-13">        text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reference.payload[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>].strip()</span>
<span id="cb13-14">        references_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb13-15"></span>
<span id="cb13-16">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (</span>
<span id="cb13-17">        references_text</span>
<span id="cb13-18">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">How to cite a reference: This is a citation [1]. This one too [3]. And this is sentence with many citations [2][3].</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Answer:"</span></span>
<span id="cb13-19">    )</span>
<span id="cb13-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> prompt, references_text</span></code></pre></div>
<p>This code will combine a prompt to make ChatGPT “simulate” Marcus Aurelius answering a user-supplied question with a list of references previously obtained from your vector database. Then it will return the generated prompt, and a list of the references to add to the answer sent to the user.</p>
<p>Then you create two endpoints as follows:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_root():</span>
<span id="cb14-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb14-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Make a post request to /ask to ask a question about Meditations by Marcus Aurelius"</span></span>
<span id="cb14-5">    }</span>
<span id="cb14-6"></span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.post</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/ask"</span>)</span>
<span id="cb14-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ask(question: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb14-10">    similar_docs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qdrant_client.search(</span>
<span id="cb14-11">        collection_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>COLLECTION_NAME,</span>
<span id="cb14-12">        query_vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>retrieval_model.encode(question),</span>
<span id="cb14-13">        limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb14-14">        append_payload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb14-15">    )</span>
<span id="cb14-16"></span>
<span id="cb14-17">    prompt, references <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> build_prompt(question, similar_docs)</span>
<span id="cb14-18"></span>
<span id="cb14-19">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> openai.ChatCompletion.create(</span>
<span id="cb14-20">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-3.5-turbo"</span>,</span>
<span id="cb14-21">        messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb14-22">            {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: prompt},</span>
<span id="cb14-23">        ],</span>
<span id="cb14-24">        max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>,</span>
<span id="cb14-25">        temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb14-26">    )</span>
<span id="cb14-27"></span>
<span id="cb14-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb14-29">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>: response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"choices"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>],</span>
<span id="cb14-30">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"references"</span>: references,</span>
<span id="cb14-31">    }</span></code></pre></div>
<p>These are the two endpoints that you’ll use in your app. Here’s what each line does:</p>
<ul>
<li><strong>Lines 1 to 5</strong> set up an endpoint that accepts <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET">GET</a> requests on “/”. It returns a JSON response with a <code>message</code> key telling the user to use the “/ask” endpoint.</li>
<li><strong>Lines 8 to 17</strong> define an endpoint that takes accepts <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST">POST</a> requests on “/ask”, with a single parameter, <code>question</code>of <code>string</code> type. Once the user submits a request, you vectorize the question using the model you loaded previously, then you get the 3 most similar documents from your vector database.</li>
<li><strong>Lines 19 to 32</strong> combine the documents you got from the vector database with your prompt and make a request to the ChatGPT API. You set <code>max_tokens=250</code> to keep answers short and set <code>temperature=0.2</code>, to prevent the model from getting “too creative” with its responses. Finally, you extract the answer from the ChatGPT API response and return it to the user, along with the references.</li>
</ul>
<p>If you want to test it locally, type the following command into a terminal (inside the project’s virtual environment):</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">uvicorn main:app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reload</span></span></code></pre></div>
<p>In your browser, navigate to <code>localhost:8000/docs</code> to test your <code>/ask</code> endpoint:</p>
<p><a href="images/ai-search-engine-fastapi-qdrant-chatgpt/image-5.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://dylancastillo.co/posts/images/ai-search-engine-fastapi-qdrant-chatgpt/image-5.png" class="img-fluid"></a></p>
<p>A successful response will look as follows:</p>
<p><a href="images/ai-search-engine-fastapi-qdrant-chatgpt/image-6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://dylancastillo.co/posts/images/ai-search-engine-fastapi-qdrant-chatgpt/image-6.png" class="img-fluid"></a></p>
<p>That’s it! You have a working version of your AI search engine. Next, I’ll mention some ideas about deployment.</p>
</section>
<section id="deploy-your-app" class="level2">
<h2 class="anchored" data-anchor-id="deploy-your-app">Deploy Your App</h2>
<p>There are many different ways to deploy an app, so you choose whatever approach you prefer. In my case, I like to use a VPS with NGINX acting as a reverse proxy and using Gunicorn as a process manager with Uvicorn workers. If you’d like to follow that approach, check a <a href="https://dylancastillo.co/fastapi-nginx-gunicorn/">tutorial</a> I wrote about it.</p>
<p>If you choose that route, keep the following points in mind:</p>
<ul>
<li>You should use <code>[--preload](https://dylancastillo.co/fastapi-nginx-gunicorn/)</code> if you want to share the same model across all the processes and use less RAM memory.</li>
<li>There are memory leak issues when serving some types of <a href="https://github.com/tiangolo/fastapi/issues/2425">models</a>. A workaround that has worked for me is setting <code>--max-requests</code> and <code>--max-requests-jitter</code> to low numbers.</li>
</ul>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Way to go! In this tutorial, you’ve built a (tiny) AI search engine. You’ve learned:</p>
<ul>
<li>How to structure the project.</li>
<li>How to set up a vector database using Qdrant.</li>
<li>How to vectorize your data using Sentence Transformers.</li>
<li>How to use ChatGPT to combine references into a coherent answer.</li>
</ul>
<p>Hope you found this tutorial useful. Let me know if you have any questions!</p>
<p>All the code for this tutorial is <a href="https://github.com/dylanjcastillo/ai-search-fastapi-qdrant-chatgpt">available on GitHub</a>.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2023,
  author = {Castillo, Dylan},
  title = {Build an {AI} {Search} {Engine} {Using} {FastAPI,} {Qdrant,}
    and {ChatGPT}},
  date = {2023-03-03},
  url = {https://dylancastillo.co/posts/ai-search-engine-fastapi-qdrant-chatgpt.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2023" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2023. <span>“Build an AI Search Engine Using FastAPI,
Qdrant, and ChatGPT.”</span> March 3, 2023. <a href="https://dylancastillo.co/posts/ai-search-engine-fastapi-qdrant-chatgpt.html">https://dylancastillo.co/posts/ai-search-engine-fastapi-qdrant-chatgpt.html</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <category>llm</category>
  <category>openai</category>
  <guid>https://dylancastillo.co/posts/ai-search-engine-fastapi-qdrant-chatgpt.html</guid>
  <pubDate>Fri, 03 Mar 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Tips for Standing Out on LinkedIn</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/tips-for-standing-out-on-linkedin.html</link>
  <description><![CDATA[ 




<p>A few months ago I wrote a <a href="https://www.reddit.com/r/datascience/comments/vzmcc2/some_ideas_to_improve_your_linkedin_profile/">post</a> that blew up on <a href="https://www.reddit.com/r/datascience/">r/datascience</a> about how to make your LinkedIn profile stand out when searching for a job.</p>
<p>Since then, the economic situation has worsened. We’re now on the verge of an economic downturn, more than <a href="https://layoffs.fyi/">100,000 people have been laid off</a> from tech companies this year, and investors are warning founders of <a href="https://techcrunch.com/2022/05/19/yc-advises-founders-to-plan-for-the-worst/">tough times ahead</a>, so I’ve decided to expand on that original post.</p>
<p>This isn’t a post about how to get thousands of followers, nor how to become the most popular LinkedIn <a href="https://www.youtube.com/shorts/IHt9PJM8Md8">influencer</a>. It’s about how to use LinkedIn to get more and better quality job opportunities.</p>
<p>It comes from reading many papers about LinkedIn’s search and ranking algorithms, learning about LinkedIn Recruiter, and making lots of mistakes while working on <a href="https://linkedin.com/in/dylanjcastillo/">my own profile</a>.</p>
<p>Let’s get to it!</p>
<section id="finding-a-great-job" class="level2">
<h2 class="anchored" data-anchor-id="finding-a-great-job">Finding a (Great) Job</h2>
<p>There are two ways to find a good job: <a href="https://sive.rs/gethired">obsess over a few companies</a> or play the numbers game. On the plus side, the former will increase your chances of landing your dream job, while the latter will likely lead to a better financial outcome. On the other hand, the former is riskier because it places all of your eggs in one or a few baskets, whereas the latter may not lead to the job you were hoping for.</p>
<p>In this article, I’ll focus on the second strategy as that’s the one I’ve focused on in my career. I never had a dream job in mind because I’ve always wanted to start my own business and the financial aspect was also important to me, so I prioritized learning relevant skills as well as a good salary. Despite not having a “dream job,” I was able to work at cool places like the Boston Consulting Group, Deliveroo, and the Olympics. I’ve also successfully transitioned into full-time freelancing in a very competitive industry.</p>
<p>However, this does not imply that the approach I took is the best one. Everyone has different preferences and should choose a strategy based on what they want to optimize for.</p>
</section>
<section id="playing-the-numbers-game" class="level2">
<h2 class="anchored" data-anchor-id="playing-the-numbers-game">Playing the Numbers Game</h2>
<p>The numbers game in job hunting consists of increasing the number of relevant job opportunities that you can access. It is not simply applying to as many job openings as possible.</p>
<p>Your goal is to obtain as many relevant opportunities as possible by actively seeking them or by making your profile appealing to hiring managers and recruiters. Those who apply for jobs mindlessly are not following this strategy correctly. They’re just wasting their time.</p>
<p>You should think of your job search as a three-part funnel:</p>
<ol type="1">
<li>Leads (job opportunities)</li>
<li>Interviews</li>
<li>Offers</li>
</ol>
<p>I will cover the first part of the funnel, <em>Leads</em>, and a will provide you with some tips for the second, <em>Interviews</em>. For the first part, the advice comes from my own experience, and the research I’ve done about LinkedIn’s algorithms. For the second part, the advice is mostly based on my own experience.</p>
<p>You’ll need to focus on two things to increase the number of relevant job opportunities or “qualified leads”: <strong>inbound</strong> and <strong>outbound</strong> <strong>leads</strong>.</p>
<section id="inbound-leads" class="level3">
<h3 class="anchored" data-anchor-id="inbound-leads">Inbound Leads</h3>
<p>Inbound leads are those that come to you without your intervention. Typically, recruiters and hiring managers connect with you on LinkedIn or send you InMail messages.</p>
<p>Recruiters use <a href="https://business.linkedin.com/talent-solutions/recruiter">LinkedIn Recruiter</a> to find candidates. They can search for terms such as “Data Scientist” and define filters like &nbsp;“has worked at Google” when looking for candidates.</p>
<p>After a query is defined, LinkedIn Recruiter uses what they call a <a href="https://arxiv.org/pdf/1809.06473.pdf"><strong>talent search algorithm</strong></a>. It works in two stages:</p>
<ol type="1">
<li><strong>Search:</strong> It searches the network and defines a set of a few thousand candidates who meet the recruiter’s search criteria.</li>
<li><strong>Rank:</strong> It provides the recruiter with a list of candidates ranked by how well they fit the search term and how likely they are to respond.</li>
</ol>
<p>That’s all. If you want to get more job opportunities, you must figure out how to increase your chances of appearing in step 1 and ranking higher during step 2.</p>
<p>Fortunately, LinkedIn has released tons of research on its talent search algorithm. It’s not difficult to imagine what will help you stand out from the crowd. Here’s what I’ve found more impactful:</p>
<ol type="1">
<li><strong>Use relevant keywords in your profile.</strong> You won’t show up in the results if your profile doesn’t include search terms that recruiters use to find candidates. Examine the keywords used in the job descriptions for the positions you’re interested in, and make sure you have them in your profile.</li>
<li><strong>Reply to recruiters.</strong> People often don’t reply to recruiters when they’re not interested in the job opportunity. But the <a href="https://arxiv.org/abs/1809.06473">algorithm</a> prioritizes those who are likely to respond over those who are not. Even if it’s just to say no, respond to recruiters!</li>
<li><strong>Engage with the brands you’re interested in on LinkedIn.</strong> Recruiters <a href="https://youtu.be/S6mVwmCHShk?t=50">can narrow down their search</a> to candidates who have interacted with the brand or have connections who work for that company. If you’re particularly interested in a company, follow their profile, interact with their content, and add connections who work there.</li>
<li><strong>Expand your network.</strong> <a href="https://business.linkedin.com/talent-solutions/recruiter-lite">LinkedIn Recruiter Lite</a>, a cheaper version of LinkedIn Recruiter, only lets users reach out to candidates up to their third-degree network. This means that the fewer connections you have, the less likely it is a recruiter can contact you.</li>
<li><strong>Increase your influence.</strong> If you create engaging content, have a large number of visitors to your profile, or receive endorsements and recommendations, you will <a href="https://arxiv.org/abs/1602.04572">rank higher</a>. As a general rule, try to write useful content on a regular basis and solicit recommendations from relevant contacts. LinkedIn’s <a href="https://www.linkedin.com/sales/ssi">Social Selling Index</a> is a good proxy for how well you’re positioning yourself.</li>
<li><strong>Get a good photo.</strong> This is based on my personal experience. But I believe people are more likely to contact you if your photo looks somewhat professional.</li>
</ol>
<p>None of these concepts are revolutionary, but most people overlook them when creating their profiles. LinkedIn’s goal is to match recruiters with the best possible candidates. So your job is to figure out what recruiters are searching for and how to best match that.</p>
<p>Furthermore, even if recruiters or hiring managers do not pay for LinkedIn Recruiter and instead use the standard search service, the suggestions above will still help you improve your profile.</p>
</section>
<section id="outbound-leads" class="level3">
<h3 class="anchored" data-anchor-id="outbound-leads">Outbound Leads</h3>
<p>Outbound opportunities are the ones you apply to. Usually, that means applying for jobs on LinkedIn under the <a href="https://www.linkedin.com/jobs/">Jobs</a> tab.</p>
<p>This takes time and has a very low ROI if not done correctly. I’ve discovered that the following increases its effectiveness:</p>
<ol type="1">
<li>Set up <a href="https://www.linkedin.com/learning/linkedin-quick-tips-2022/set-up-job-alerts">alerts</a> for roles you’re interested in.</li>
<li>Don’t apply for jobs posted more than a week ago.</li>
<li>Prioritize jobs for which you can contact the poster or someone in a relevant position within the company. In those cases, send them a personalized message expressing your interest. The best way to accomplish this is to connect with them and add a note to the connection request.</li>
<li>Change your CV to fit the position you’re applying for. Read the job’s requirements and try to highlight the parts of your work history that match them.</li>
</ol>
<p>Finally, many opportunities are built through real-world connections, so reach out to people outside of LinkedIn, join relevant communities, and attend meetups.</p>
</section>
</section>
<section id="interviewing-101" class="level2">
<h2 class="anchored" data-anchor-id="interviewing-101">Interviewing 101</h2>
<p>It is usually simple to figure out how to prepare for an interview. The difficult part is carrying out the plan.</p>
<p>I’ve only worked as a Data Scientist and ML Engineer, so I can’t offer advice for interviews outside of those roles. Here are some examples of things that help you get better results for interviews for those roles.</p>
<section id="general-advice" class="level3">
<h3 class="anchored" data-anchor-id="general-advice">General Advice</h3>
<p>You should do the following for any kind of interview:</p>
<ol type="1">
<li><strong>Research the company and the role.</strong> You should know what the company does, its competitors, and recent news. You should also think about what the role you’re applying for entails. Also, use <a href="glassdoor.com">Glassdoor</a>, <a href="reddit.com/">Reddit</a>, or ask other people to find out what questions they typically ask during interviews.</li>
<li><strong>Review the projects you’ve worked on.</strong> Make sure that you know the ins and outs of each one and have an elevator pitch for each of them. You’d be surprised how many people are rejected because they don’t fully understand key details in the projects they’ve worked on or can’t clearly explain what they did.</li>
<li><strong>Be assertive.</strong> One of the worst places to sell yourself short is during an interview. While it’s obvious that lying during interviews is bad (and you will be caught sooner or later), not expressing confidence is equally bad.<br>
Consider how many people are willing to lie to get a job; if you sell yourself short, you give dishonest people a better chance of winning.</li>
<li><strong>See the interview as a conversation of equals.</strong> If you’ve mastered the technical bits, the only big obstacle in an interview is the mindset. They’re seeing if you’re a good fit, but you’re also seeing if they are a good fit. Don’t treat it like an exam.</li>
<li><strong>Don’t take rejections personally.</strong> Some interviews will go well, others won’t. Sometimes you’re to blame, and other times it’s due to circumstances beyond your control. When you fail an interview, consider why it didn’t go well, use the feedback to improve your next interview and move on.</li>
</ol>
<p>In a nutshell, know yourself, know what you’re interviewing for, and be assertive.</p>
</section>
<section id="behavioral-interview" class="level3">
<h3 class="anchored" data-anchor-id="behavioral-interview">Behavioral interview</h3>
<p>These questions are opportunities to sell yourself, so make sure you have good responses. It simply takes practice.</p>
<p>Here’s what you should do:</p>
<ol type="1">
<li>Make a list of 10-15 commonly asked questions (you can start <a href="https://hbr.org/2021/11/10-common-job-interview-questions-and-how-to-answer-them">here</a>)</li>
<li>Record yourself answering those questions. For questions like “Give me an example when you did…” or “Tell me about a situation when you…” use the <a href="https://www.rightattitudes.com/2008/07/15/star-technique-answer-interview-questions/">STAR</a> framework.</li>
<li>See the recordings, give yourself honest feedback, and repeat the process.</li>
<li>Try practicing with a friend or colleague, and ask them for feedback.</li>
</ol>
<p>Let me say it again: practice these questions! You should make sure you get these “easy” points during an interview.</p>
</section>
<section id="technical-interview" class="level3">
<h3 class="anchored" data-anchor-id="technical-interview">Technical interview</h3>
<p>Technical interviews aren’t usually a great measure of your skills, so don’t base your identity on how you do in them. They are like tests, and all you have to do to pass them is study. And if you don’t pass, it’s not the end of the world; you’ll have more chances elsewhere.</p>
<p>Here’s what you should do to prepare at the very least:</p>
<ol type="1">
<li>Research how the company and team conduct technical interviews.</li>
<li>Examine the job description to determine the most important topics to research.</li>
<li>Practice questions in the programming languages used in the team on <a href="https://www.hackerrank.com/">HackerRank</a> or similar.</li>
<li>Use <a href="https://apps.ankiweb.net/">Anki</a> or another Spaced Repetition System (SRS) to practice key topics you might need to cover. Ideally, make your own cards using your favorite book on the topic.</li>
</ol>
</section>
<section id="take-home-challenge" class="level3">
<h3 class="anchored" data-anchor-id="take-home-challenge">Take-home Challenge</h3>
<p>These are hard to practice because every company does them their own way. If you’re a Data Scientist or ML Engineer, you can go to <a href="https://www.kaggle.com/">Kaggle</a>, find a dataset that looks interesting to you, come up with some interesting questions, and then answer them. Or building a small ML model for a specific purpose.</p>
<p><em>Bonus points:</em> Make sure your projects look nice, write a README explaining what you did, and put all that on GitHub. Also, write short posts on LinkedIn and share your projects.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>That’s it! By now, you should have a good sense of how LinkedIn works and how you can use it to get more opportunities your way.</p>
<p>If you’re interested in learning more about the technical aspects of how the LinkedIn search works, they’ve published a lot of useful material you can check:</p>
<ul>
<li><a href="https://arxiv.org/pdf/1602.04572.pdf">Personalized Expertise Search at LinkedIn</a></li>
<li><a href="https://arxiv.org/pdf/1809.06473.pdf">Towards Deep and Representation Learning for Talent Search at LinkedIn</a></li>
<li><a href="https://arxiv.org/pdf/1809.06481.pdf">Talent Search and Recommendation Systems at LinkedIn: Practical Challenges and Lessons Learned</a></li>
<li><a href="https://arxiv.org/pdf/2108.13300.pdf">Deep Natural Language Processing For LinkedIn Search</a></li>
<li><a href="https://arxiv.org/pdf/1709.00653.pdf">From Query-By-Keyword to Query-By-Example: LinkedIn Talent Search Approach</a></li>
<li><a href="https://arxiv.org/pdf/2008.02460.pdf">DeText: A Deep Text Ranking Framework with BERT</a></li>
</ul>
<p>I hope you find this useful. If you have any questions <a href="https://www.linkedin.com/">reach out</a>!</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2023,
  author = {Castillo, Dylan},
  title = {Tips for {Standing} {Out} on {LinkedIn}},
  date = {2023-02-17},
  url = {https://dylancastillo.co/posts/tips-for-standing-out-on-linkedin.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2023" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2023. <span>“Tips for Standing Out on LinkedIn.”</span>
February 17, 2023. <a href="https://dylancastillo.co/posts/tips-for-standing-out-on-linkedin.html">https://dylancastillo.co/posts/tips-for-standing-out-on-linkedin.html</a>.
</div></div></section></div> ]]></description>
  <category>productivity</category>
  <guid>https://dylancastillo.co/posts/tips-for-standing-out-on-linkedin.html</guid>
  <pubDate>Fri, 17 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Securely Deploy a FastAPI app with NGINX and Gunicorn</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/fastapi-nginx-gunicorn.html</link>
  <description><![CDATA[ 




<p>Deploying a <a href="https://fastapi.tiangolo.com/">FastAPI</a> web app to a Virtual Private Server (VPS) is tricky. If you’re not familiar with technologies such as NGINX, Gunicorn, and Uvicorn, it can easily overwhelm you. I wrote this tutorial so you won’t have to spend as much time on your first deployment as I did.</p>
<p>FastAPI is one of the most popular Python libraries for developing APIs, thanks to its performance and ease of use. If you’re using machine learning models in your web app, it’s likely the go-to tool for you.</p>
<p><a href="https://www.nginx.com/">NGINX</a> , <a href="https://gunicorn.org/">Gunicorn</a>, and <a href="https://www.uvicorn.org/">Uvicorn</a> are battle-tested technologies that are frequently used as a reverse proxy and ASGI server when deploying Python web apps. If you’re familiar with Django or Flask, you’ve probably heard about some of them before.</p>
<p>In this tutorial, I’ll show you how to combine these tools to deploy a FastAPI web app. You will:</p>
<ul>
<li>Learn the basics about FastAPI, NGINX, Gunicorn, and Uvicorn.</li>
<li>Set up Gunicorn + Uvicorn as an ASGI server.</li>
<li>Configure NGINX as a reverse proxy server.</li>
<li>Generate a free SSL certificate for your app using Let’s Encrypt.</li>
</ul>
<p>Let’s get to it!</p>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<ul>
<li>You should have access to a Debian-based VPS. I will use Ubuntu 20.04.</li>
<li>You should be familiar with basic shell commands, such as <code>sudo</code>, <code>mkdir</code>, or <code>cd</code>.</li>
<li>You should know how to <a href="https://stackoverflow.com/a/11828573">exit</a> vim 😜</li>
</ul>
</section>
<section id="tech-stack" class="level2">
<h2 class="anchored" data-anchor-id="tech-stack">Tech Stack</h2>
<p>Before we go any further, I’ll give you a quick rundown of the technologies you’ll be using:</p>
<ul>
<li><strong>FastAPI</strong> is one of the most popular Python frameworks for building APIs.<br>
It’s built on top of <a href="https://www.starlette.io/">Starlette</a> and <a href="https://docs.pydantic.dev/">Pydantic</a> and uses standard Python type hints. It’s loved by developers because of it is performant, easy to learn, and provides a great developer experience.</li>
<li><strong>Gunicorn</strong> is a popular web server used to deploy Python web apps. Typically, it’s used as a WSGI server, but it’s possible to combine it with Uvicorn to work as an ASGI server.</li>
<li><strong>Uvicorn</strong> is an ASGI web server implementation for Python. It’s the recommended web server for Starlette and FastAPI.</li>
<li><strong>NGINX</strong> is an open-source tool with many uses. It started out as a web server but can now be used as a reverse proxy server, a load balancer, and more.<br>
NGINX is often used as a reverse proxy in front of the app’s web server when working with Python web frameworks.</li>
</ul>
<p>Now, let’s get to the interesting part!</p>
</section>
<section id="optional-step-1-secure-your-server" class="level2">
<h2 class="anchored" data-anchor-id="optional-step-1-secure-your-server">(Optional) Step 1: Secure Your Server</h2>
<p>This step isn’t required, but it’s still a good idea to at least skim it. Even more so if you’re not sure what you’re doing. This will make your application more secure.</p>
<section id="enable-automatic-updates" class="level3">
<h3 class="anchored" data-anchor-id="enable-automatic-updates">Enable Automatic Updates</h3>
<p>First, you should make sure your server has the latest software:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt update <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt upgrade <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
<p>These are common commands you’ll see when working with Debian-based servers:</p>
<ul>
<li><code>sudo apt update</code> updates the package list index on the user’s system.</li>
<li><code>sudo apt upgrade</code> upgrades the installed packages to their latest versions. You provide the <code>-y</code> flag to proceed with the installation without requiring confirmation.</li>
</ul>
<p>Next, you should set up automatic security updates, so that you don’t have to do them manually. For that, you’ll need to install and enable <code>unnattended-upgrades</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install unattended-upgrades</span></code></pre></div>
<p>Once the installation is finished, edit <code>/etc/apt/apt.conf.d/20auto-upgrades</code> to include the following lines:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">APT::Periodic::Update-Package-Lists</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">APT::Periodic::Unattended-Upgrade</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">APT::Periodic::AutocleanInterval</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span></code></pre></div>
<p>These lines configure <code>unattended-upgrades</code> so that it runs automatically. Here’s what they do:</p>
<ul>
<li><code>APT::Periodic::Update-Package-Lists "1"</code> means that the list of packages will be automatically updated every day.</li>
<li><code>APT::Periodic::Unattended-Upgrade "1"</code> means that the system will be updated to the latest version of the packages without the user having to intervene.</li>
<li><code>"APT::Periodic::AutocleanInterval "7"</code> means that the auto-clean operation, which gets rid of old and unnecessary package files, will run once a week.</li>
</ul>
<p>Lastly, edit <code>/etc/apt/apt.conf.d/50unattended-upgrades</code> to make sure the system automatically reboots when kernel updates require it:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Unattended-Upgrade::Automatic-Reboot</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"true"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># change to true</span></span></code></pre></div>
<p>You can also configure your system to send emails when there are issues with the upgrades. If you want to do that, take a look at <a href="https://www.cyberciti.biz/faq/ubuntu-enable-setup-automatic-unattended-security-updates/">this</a> article.</p>
<p>Whew! You’ve now ensured that your system is up to date and will remain so. Next, you’ll create a user to make sure you don’t give your app more permissions than it needs to run.</p>
</section>
<section id="create-a-non-root-user" class="level3">
<h3 class="anchored" data-anchor-id="create-a-non-root-user">Create a Non-root User</h3>
<p>If your server ever gets hacked, having a non-root user reduces the damage the malicious actor can do. That, <a href="https://askubuntu.com/questions/1127174/purpose-of-creating-non-root-user">among other reasons</a>, justifies the creation of a non-root user.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> adduser fastapi-user <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace fastapi-user with your preferred name</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> gpasswd <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-a</span> fastapi-user sudo <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add to sudoers</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">su</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> fastapi-user <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># login as fastapi-user</span></span></code></pre></div>
<p>These commands will create a user name <code>fastapi-user</code>, add it to the <code>sudo</code> group (which contains all users with root privileges), and then log in as that user.</p>
<p>Then, you will set up your server so that you connect to it using an SSH key instead of a password. It’s safer and faster, so you have nothing to lose.</p>
<p>If you don’t already have an SSH key, open a new terminal <strong>on your local machine</strong> and run the following command. Otherwise, skip this step, and move directly to copy your public SSH key.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh-keygen</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> ed25519 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-C</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username@email.com"</span></span></code></pre></div>
<p>‌This command will create and store an SSH key in your local machine. You employ two parameters:</p>
<ol type="1">
<li><code>-t ed25519</code> to specify which algorithm to use to generate the key. You went with <a href="https://ed25519.cr.yp.to/">ED25519</a>, which is a very safe and efficient algorithm.</li>
<li><code>-C username@email.com</code> to append your email as a comment at the end of the key. Make sure to replace <code>username@email.com</code> it with your actual email.</li>
</ol>
<p>Then, copy your public SSH key by using this command and copying the output:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> ~/.ssh/id_ed25519.pub</span></code></pre></div>
<p>Go back to the <strong>remote server’s</strong> terminal and type in the following commands:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> ~/.ssh/</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 700 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> ~/.ssh/</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> vim ~/.ssh/authorized_keys</span></code></pre></div>
<p>These commands will:</p>
<ol type="1">
<li>Create a <code>.ssh</code> directory</li>
<li>Set the necessary permissions (the owner of <code>.ssh/</code> has full read, write, and execute permissions, but other users and groups shouldn’t).</li>
<li>Open <code>authorized_keys</code> with an editor</li>
</ol>
<p>Paste your public SSH key into <code>authorized_keys</code>. Save the changes and close the editor. Make sure the changes worked by closing the terminal and logging back into your machine using the following command:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh</span> fastapi-user@your-server-ip</span></code></pre></div>
<p>Once you’ve tested that it works, you should disable the root login and use password authentication for SSH connections. To do this, you’ll have to update the following values in <code>/etc/ssh/sshd_config</code> using <strong>vim</strong> (or any other editor) using <code>sudo</code> privileges:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PermitRootLogin</span> no <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># change to no</span></span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb10-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PasswordAuthentication</span> no <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># change to no</span></span></code></pre></div>
<p>These modifications will prohibit users from logging in as <code>root</code> and also disable the option of authenticating using a password rather than an SSH key.</p>
</section>
<section id="other-security-measures" class="level3">
<h3 class="anchored" data-anchor-id="other-security-measures">Other Security Measures</h3>
<p>Most cloud providers offer firewall services, but if yours doesn’t, you should <a href="https://www.linode.com/docs/guides/configure-firewall-with-ufw/">configure one</a> and only allow incoming traffic to the necessary ports: 80, 443, and 22.</p>
<p>Also, you can install <a href="https://www.digitalocean.com/community/tutorials/how-to-protect-ssh-with-fail2ban-on-ubuntu-20-04">fail2ban</a> to prevent brute-force authentication attacks. To learn more about the best practices to secure a Linux server, check out <a href="https://www.linode.com/docs/guides/set-up-and-secure/">this guide</a> from Linode.</p>
</section>
</section>
<section id="step-2-install-software-tools" class="level2">
<h2 class="anchored" data-anchor-id="step-2-install-software-tools">Step 2: Install Software Tools</h2>
<p>You will require a few software tools. Begin by running the following commands to install Python:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> add-apt-repository ppa:deadsnakes/ppa</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt update</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install python3.11 python3.11-venv <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
<p>Then, install <strong>Supervisor</strong> and <strong>NGINX</strong>:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install supervisor nginx <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
<p>Supervisor is a process control system for Unix-like operating systems, including Linux. It’s intended to monitor and manage the processes of programs, ensuring that they are always running and restarting them if they crash or shut down.</p>
<p>NGINX,as mentioned before, is a popular multifaceted software, that’s often used as a reverse proxy when deploying web applications.</p>
<p>Enable and start Supervisor:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> systemctl enable supervisor</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> systemctl start supervisor</span></code></pre></div>
<p><code>enable</code> will make sure Supervisor starts on boot, and <code>start</code> will start Supervisor right away.</p>
</section>
<section id="step-3-set-up-your-fastapi-app" class="level2">
<h2 class="anchored" data-anchor-id="step-3-set-up-your-fastapi-app">Step 3: Set Up Your FastAPI App</h2>
<p>Start by cloning the sample app into <code>/home/fastapi-user</code>:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/dylanjcastillo/fastapi-nginx-gunicorn</span></code></pre></div>
<p>This will work with public repositories. If you want to deploy an app from a private GitHub repository, you should set up a <a href="https://dylancastillo.co/how-to-use-github-deploy-keys/">GitHub deploy key</a> and clone the repository using it.</p>
<p>Next, create a virtual environment and activate it in the project directory:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> /home/fastapi-user/fastapi-nginx-gunicorn</span>
<span id="cb15-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3.11</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv</span>
<span id="cb15-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span></code></pre></div>
<p>These commands will change your current location to the project directory, create a virtual environment in it, and activate it. From now on, you should see a <code>(.venv)</code> prefix in your command line.</p>
<p>Now, use <code>pip</code> to install the libraries specified in <code>requirements.txt</code>:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span></code></pre></div>
<p>This will install the packages in <code>requirements.txt</code>: <code>fastapi</code>, <code>gunicorn</code>, and <code>uvicorn</code>, in your current virtual environment.</p>
<p>Verify that everything went well by running the application:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uvicorn</span> main:app</span></code></pre></div>
<p>You shouldn’t get any errors when you run this command. You can also verify that it’s working by opening a new terminal window, connecting to the server, and making a request with <code>curl</code>:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> http://localhost:8000</span></code></pre></div>
<p>You should get the following response:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's working!"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>You’re halfway there. You got your FastAPI app running, next you’ll configure Gunicorn to serve as a WSGI server.</p>
</section>
<section id="step-4-configure-gunicorn" class="level2">
<h2 class="anchored" data-anchor-id="step-4-configure-gunicorn">Step 4: Configure Gunicorn</h2>
<p>There are two parts to configuring Gunicorn. First, specifying the configuration requirements of <code>gunicorn</code>. Second, setting up a <strong>Supervisor</strong> program to run it.</p>
<section id="set-up-gunicorn" class="level3">
<h3 class="anchored" data-anchor-id="set-up-gunicorn">Set Up Gunicorn</h3>
<p>You’ll first create a file to define the parameters you’ll use when running Gunicorn. For that, create a file called <code>gunicorn_start</code> in the project directory:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vim</span> gunicorn_start</span></code></pre></div>
<p>Then, add the following content to it:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">NAME</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fastapi-app</span>
<span id="cb21-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">DIR</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/home/fastapi-user/fastapi-nginx-gunicorn</span>
<span id="cb21-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">USER</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fastapi-user</span>
<span id="cb21-6"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">GROUP</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fastapi-user</span>
<span id="cb21-7"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">WORKERS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>3</span>
<span id="cb21-8"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">WORKER_CLASS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>uvicorn.workers.UvicornWorker</span>
<span id="cb21-9"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">VENV</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$DIR</span>/.venv/bin/activate</span>
<span id="cb21-10"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">BIND</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>unix:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$DIR</span>/run/gunicorn.sock</span>
<span id="cb21-11"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">LOG_LEVEL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error</span>
<span id="cb21-12"></span>
<span id="cb21-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$DIR</span></span>
<span id="cb21-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$VENV</span></span>
<span id="cb21-15"></span>
<span id="cb21-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> gunicorn main:app <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb21-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$NAME</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb21-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--workers</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$WORKERS</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb21-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--worker-class</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$WORKER_CLASS</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb21-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--user</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$USER</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb21-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--group</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$GROUP</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb21-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--bind</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$BIND</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb21-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--log-level</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$LOG_LEVEL</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb21-24">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--log-file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>-</span></code></pre></div>
<p>Here’s what you’re defining:</p>
<ul>
<li><strong>Line 1</strong> indicates that the script is to be run by the bash shell.</li>
<li><strong>Lines 3 to 11</strong> specify the configuration options that you’ll pass to Gunicorn. Most parameters are self-explanatory, except for <code>WORKERS</code>, <code>WORKER_CLASS</code>, and <code>BIND</code>:
<ul>
<li><strong><code>WORKERS</code>:</strong> defines the number of workers that Gunicorn will use, it’s usually recommended to use the number of CPU cores + 1.</li>
<li><strong><code>WORKER_CLASS</code>:</strong> type of worker used. In this case, you specify Uvicorn workers, which allows you to <a href="https://fastapi.tiangolo.com/deployment/server-workers/#gunicorn-with-uvicorn-workers">use it as an ASGI server</a>.</li>
<li><strong><code>BIND</code>:</strong> Specifies the <a href="https://docs.oracle.com/javase/tutorial/networking/sockets/definition.html">server socket</a> that Gunicorn binds to.</li>
</ul></li>
<li><strong>Lines 13 and 14</strong> change the location to the project directory and activate the virtual environment.</li>
<li><strong>Lines 16 to 24</strong> run Gunicorn with the specified parameters.</li>
</ul>
<p>Save and close the fine. Then, make it executable by running the following:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> u+x gunicorn_start</span></code></pre></div>
<p>Finally, make a <code>run</code> folder in your project directory for the Unix socket file you defined in the <code>BIND</code> parameter:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> run</span></code></pre></div>
<p>When you have multiple servers communicating on the same machine, <a href="https://stackoverflow.com/questions/19916016/gunicorn-nginx-server-via-socket-or-proxy">using a Unix socket file is better</a>.</p>
</section>
<section id="configure-supervisor" class="level3">
<h3 class="anchored" data-anchor-id="configure-supervisor">Configure <strong>Supervisor</strong></h3>
<p>First, create a directory called <code>logs</code> in the project directory to store your application’s error logs:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> logs</span></code></pre></div>
<p>Next, create a Supervisor’sconfiguration file by running the following command:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> vim /etc/supervisor/conf.d/fastapi-app.conf</span></code></pre></div>
<p>There copy and paste the following:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb26-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[program:fastapi-app]</span></span>
<span id="cb26-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">command</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/home/fastapi-user/fastapi-nginx-gunicorn/gunicorn_start</span>
<span id="cb26-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">user</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fastapi-user</span>
<span id="cb26-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">autostart</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>true</span>
<span id="cb26-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">autorestart</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>true</span>
<span id="cb26-6"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">redirect_stderr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>true</span>
<span id="cb26-7"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">stdout_logfile</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/home/fastapi-user/fastapi-nginx-gunicorn/logs/gunicorn-error.log</span></code></pre></div>
<p>This configuration file runs the file you created earlier, <code>gunicorn_start</code>, using the <code>fastapi-user</code>. Supervisor will start the application anytime the server starts, and will also restart it if it fails.</p>
<p>This configuration file executes the <code>gunicorn_start</code> file you created earlier using <code>fastapi-user</code> as the user. Supervisor will launch the application whenever the server boots up and will restart it if the application fails. The errors are logged into <code>gunicorn-error.log</code> in <code>logs</code> in the project directory.</p>
<p>Reread Supervisor’s configuration file and restart the service by running these commands:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> supervisorctl reread</span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> supervisorctl update</span></code></pre></div>
<p>Finally, you can check the status of the program by running this command:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> supervisorctl status fastapi-app</span></code></pre></div>
<p>If everything went well, the <code>fastapi-app</code> service status should be set to <code>RUNNING</code>.</p>
<p>You can also test it by opening a new terminal window, connecting to the server, and issuing a GET request using <code>curl</code>:</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb29-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--unix-socket</span> /home/fastapi-user/fastapi-nginx-gunicorn/run/gunicorn.sock localhost</span></code></pre></div>
<p>You should see the following output:</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"message"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's working!"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Finally, if you make changes to the code, you can restart the service to apply to changes by running this command:</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> supervisorctl restart fastapi-app</span></code></pre></div>
<p>Way to go! You’ve got an ASGI server running using Gunicorn and Uvicorn. Next, you’ll set up a reverse proxy server using NGINX.</p>
</section>
</section>
<section id="step-5-configure-nginx" class="level2">
<h2 class="anchored" data-anchor-id="step-5-configure-nginx">Step 5: Configure NGINX</h2>
<p>Create a new NGINX configuration file for your project:</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> vim /etc/nginx/sites-available/fastapi-app</span></code></pre></div>
<p>Open the NGINX configuration file and paste the following content:</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb33-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">upstream</span> app_server {</span>
<span id="cb33-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">server</span> unix:/home/fastapi-user/fastapi-nginx-gunicorn/run/gunicorn.sock fail_timeout=0<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb33-3"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb33-4"></span>
<span id="cb33-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">server</span> {</span>
<span id="cb33-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">listen</span> 80<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb33-7"></span>
<span id="cb33-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add here the ip address of your server</span></span>
<span id="cb33-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or a domain pointing to that ip (like example.com or www.example.com)</span></span>
<span id="cb33-10">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">server_name</span> XXXX<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb33-11"></span>
<span id="cb33-12">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">keepalive_timeout</span> 5<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb33-13">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">client_max_body_size</span> 4G<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb33-14"></span>
<span id="cb33-15">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">access_log</span> /home/fastapi-user/fastapi-nginx-gunicorn/logs/nginx-access.log<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb33-16">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">error_log</span> /home/fastapi-user/fastapi-nginx-gunicorn/logs/nginx-error.log<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb33-17"></span>
<span id="cb33-18">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">location</span> / {</span>
<span id="cb33-19">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">proxy_set_header</span> X-Forwarded-For <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$proxy_add_x_forwarded_for</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb33-20">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">proxy_set_header</span> Host <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$http_host</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb33-21">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">proxy_redirect</span> off<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb33-22"></span>
<span id="cb33-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">!-f</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$request_filename</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb33-24">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">proxy_pass</span> http://app_server<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb33-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb33-26">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb33-27">    <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb33-28"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This is the NGINX configuration file. Here’s how it works:</p>
<ul>
<li><strong>Lines 1 to 3</strong> define a cluster of servers called <code>app_server</code> that NGINX will proxy requests to. The requests are redirected to the Unix socket file located at <code>/home/fastapi-user/fastapi-nginx-gunicorn/run/gunicorn.sock</code>. Setting <code>fail_timeout=0</code> tells NGINX not to consider the server as failed even if it does not respond.</li>
<li><strong>Lines 1 to 5</strong> define the configuration for the virtual server that NGINX will use to serve requests. In this case, it listens on port 80. Replace XXXX by the IP or the site’s name.</li>
<li><strong>Lines 12 and 13</strong> specify <code>keepalive_timeout</code> to set the maximum amount of time that a client can keep a persistent connection open, and <code>client_max_body_size</code> to set a limit to size of the client request body that NGINX will allow.</li>
<li><strong>Lines 15 and 16</strong> specify the locations where NGINX will write its access and error logs.</li>
<li><strong>Lines 18 to 27</strong> defines how NGINX will handle requests to the root directory <code>/</code>. You provide some specifications to handle headers, and set a directive to proxy the requests to the <code>app_server</code> you defined earlier.</li>
</ul>
<p>Enable the configuration of your site by creating a symbolic link from the file in <code>sites-available</code> into <code>sites-enabled</code> by running this command:</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> ln <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /etc/nginx/sites-available/fastapi-app /etc/nginx/sites-enabled/</span></code></pre></div>
<p>Test that the configuration file is OK and restart NGINX:</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> nginx <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span></span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> systemctl restart nginx</span></code></pre></div>
<p>If everything went well, now you should be able to make a GET request successfully to the IP of your server from your browser or using <code>curl</code>. Once again, you should see the following output:</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"message"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's working!"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>You should have your FastAPI app running by now, as well as Gunicorn+Uvicorn as an ASGI server and NGINX in front of them as a reverse proxy.</p>
<section id="permissions-error" class="level3">
<h3 class="anchored" data-anchor-id="permissions-error">Permissions Error</h3>
<p>If you get a permission error telling you that NGINX cannot access the unix socket, you can add the <code>www-data</code> user (which typically is the user running the NGINX processes) to the <code>fastapi-user</code> group. You can use the following command:</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> usermod <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-aG</span> fastapi-user www-data</span></code></pre></div>
<p>Good job! If you haven’t bought a domain name for your API, you can stop reading here. If you have one, proceed to the next step to obtain an SSL certificate and enable HTTPS.</p>
</section>
</section>
<section id="optional-step-6-obtain-a-free-ssl-certificate-using-certbot" class="level2">
<h2 class="anchored" data-anchor-id="optional-step-6-obtain-a-free-ssl-certificate-using-certbot">(Optional) Step 6: Obtain a Free SSL Certificate Using Certbot</h2>
<p>This only applies if you have a domain for which you want to obtain an SSL certificate.</p>
<p>If you’re using Ubuntu, you can skip this step. Otherwise, you first need to install <code>snapd</code>:</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install snapd</span></code></pre></div>
<p>Next, make sure you have the latest version available:</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> snap install core<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> snap refresh core</span></code></pre></div>
<p>Install certbot and make sure the <code>cerbot</code> command is executable:</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> snap install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--classic</span> certbot</span>
<span id="cb40-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> ln <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /snap/bin/certbot /usr/bin/certbot</span></code></pre></div>
<p>Next, generate a certificate for your domain interactively by running the following command:</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> certbot <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--nginx</span></span></code></pre></div>
<p>Finally, Certbot will automatically handle the renewal of your certificate. To test that it works run the following:</p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> certbot renew <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dry-run</span></span></code></pre></div>
<p>If it worked as expected, you should see a <code>Congratulations, all simulated renewals succeeded...</code> message.</p>
<p>If everything went well, you should be able to make a successful get request using HTTPS.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>That’s all there is to it! This tutorial showed you how to use NGINX, Gunicorn, and Uvicorn to deploy a FastAPI application. FastAPI is one of the most popular Python web frameworks. It’s become the go-to option for deploying machine learning-powered web apps, so becoming acquainted with it is a wise career move.</p>
<p>In this article you’ve learned:</p>
<ul>
<li>Why and when should you use FastAPI, NGINX, Gunicorn, and Uvicorn.</li>
<li>How to <strong>set up Gunicorn+Uvicorn as an ASGI server</strong>.</li>
<li>How to <strong>use Supervisor to run Gunicorn.</strong></li>
<li>How to <strong>configure NGINX and generate a free SSL certificate using certbot.</strong></li>
</ul>
<p>If you have any questions or feedback, let me know in the comments!</p>
<p>All the code for this tutorial is <a href="https://github.com/dylanjcastillo/fastapi-nginx-gunicorn">available on GitHub</a>.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2023,
  author = {Castillo, Dylan},
  title = {How to {Securely} {Deploy} a {FastAPI} App with {NGINX} and
    {Gunicorn}},
  date = {2023-02-03},
  url = {https://dylancastillo.co/posts/fastapi-nginx-gunicorn.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2023" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2023. <span>“How to Securely Deploy a FastAPI App with
NGINX and Gunicorn.”</span> February 3, 2023. <a href="https://dylancastillo.co/posts/fastapi-nginx-gunicorn.html">https://dylancastillo.co/posts/fastapi-nginx-gunicorn.html</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <category>web</category>
  <guid>https://dylancastillo.co/posts/fastapi-nginx-gunicorn.html</guid>
  <pubDate>Fri, 03 Feb 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
