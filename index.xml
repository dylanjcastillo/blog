<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Dylan Castillo</title>
<link>https://dylancastillo.co/</link>
<atom:link href="https://dylancastillo.co/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<image>
<url>https://dylancastillo.co/images/social_media_card.webp</url>
<title>Dylan Castillo</title>
<link>https://dylancastillo.co/</link>
</image>
<generator>quarto-1.7.32</generator>
<lastBuildDate>Sun, 29 Jun 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>What is Retrieval Augmented Generation (RAG)?</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/what-is-rag.html</link>
  <description><![CDATA[ 




<p><a href="https://arxiv.org/abs/2005.11401">Retrieval Augmented Generation (RAG)</a> is the most popular approach to providing LLMs with external information before they generate a response.</p>
<p>RAG is a technique where you <strong>retrieve</strong> the information required to solve a user’s query, then <strong>augment</strong> the context of the LLM with that information, and <strong>generate</strong> a response. In this tutorial, you’ll learn why RAG is useful, when to use it, and how to build your own RAG pipeline, step-by-step, using Python.</p>
<p>Let’s get started!</p>
<section id="what-is-rag" class="level2">
<h2 class="anchored" data-anchor-id="what-is-rag">What is RAG?</h2>
<p>It’s a technique to improve LLM answers by providing them with external information before they generate a response. It consists of three steps:</p>
<ol type="1">
<li><strong>Retrieve:</strong> The system starts by searching a specific knowledge base for relevant information about the query.</li>
<li><strong>Augment:</strong> This retrieved information is added to context that’s used by the LLM to generate a response.</li>
<li><strong>Generate:</strong> The LLM uses both your question and the provided information to generate an answer.</li>
</ol>
<p>In addition to reducing costs and latency, RAG is useful because it reduces <a href="https://en.wikipedia.org/wiki/Hallucination_(artificial_intelligence)">hallucinations</a>, lets you use current data, and builds trust with users by (potentially) providing citations.</p>
</section>
<section id="vector-databases" class="level2">
<h2 class="anchored" data-anchor-id="vector-databases">Vector databases</h2>
<p>A vector database (VectorDB) is a database designed to store and query data as vector embeddings (numerical representations). So, provided with a user query, it’s the engine you use to find the most similar data in your database. It’s one of the most popular components of the retrieval step in RAG pipelines.</p>
<p>In recent years, many new vector databases have been created. But, in most cases, they had to <a href="https://qdrant.tech/articles/bm42/">re-discover</a> that many of the ideas in the old generation of vector databases such as BM25-based retrieval were still valid and useful.</p>
<p>Some popular vector databases are:</p>
<ol type="1">
<li><em>New generation:</em> <a href="https://qdrant.tech/">Qdrant</a>, <a href="https://www.trychroma.com/">Chroma</a>, <a href="https://www.pinecone.io/">Pinecone</a>, <a href="https://weaviate.io/">Weaviate</a>.</li>
<li><em>Old generation:</em> <a href="https://www.elastic.co/">Elasticsearch</a>/<a href="https://opensearch.org/">OpenSearch</a> and <a href="https://github.com/pgvector/pgvector">Postgres+PGVector</a></li>
</ol>
<p>In this tutorial, you’ll use Chroma. For client projects, I’ve used Elasticsearch, Postgres, Weaviate, and Qdrant. Many companies are already using Elasticsearch or Postgres, so it’s often easier to get started with them.</p>
<section id="why-use-a-vectordb" class="level3">
<h3 class="anchored" data-anchor-id="why-use-a-vectordb">Why use a VectorDB?</h3>
<p>If you have a small dataset, there’s no real reason to use a vector database. But if you’re dealing with thousands or millions of documents, you’ll need to use a vector database to efficiently retrieve the most relevant documents.</p>
<p>They’re useful because:</p>
<ol type="1">
<li>The <a href="https://arxiv.org/abs/2309.01431">more noise</a> in the context provided to the LLM, the more likely it is to produce bad output.</li>
<li>It takes more time to process a longer context</li>
<li>It costs more to process a longer context</li>
</ol>
</section>
<section id="retrieval" class="level3">
<h3 class="anchored" data-anchor-id="retrieval">Retrieval</h3>
<p>Retrieval is the process of finding the most relevant documents in the vector database. There are two main approaches when dealing with text-based data: term-based retrieval and embedding-based retrieval.</p>
<section id="term-based-retrieval" class="level4">
<h4 class="anchored" data-anchor-id="term-based-retrieval">Term-based retrieval</h4>
<p>Term-based retrieval is a technique that uses the terms in the query to find the most relevant documents in the vector database.</p>
<p>It’s based on the following ideas:</p>
<ol type="1">
<li><strong>TF-IDF:</strong> Counts how often a term appears in this document (TF). Measures how rare the word is across all documents (IDF). Highlights terms important and unique to this specific document.</li>
<li><strong>Okapi BM25:</strong> Expands TF-IDF to introduce a weighting mechanism for term saturation and document length.</li>
</ol>
</section>
<section id="embedding-based-retrieval" class="level4">
<h4 class="anchored" data-anchor-id="embedding-based-retrieval">Embedding-based retrieval</h4>
<p>Embedding-based retrieval is a technique that uses the embedding of the query to find the most relevant documents in the vector database.</p>
<p>For small datasets, you can use k Nearest Neighbors (k-NN) approach to find the most relevant documents, in which you calculate the similarity score between the query vector and every other vector stored in the VectorDB. Sort all the vectors based on these similarity scores and return the ‘k’ most similar vectors (relative to the query).</p>
<p>For larger datasets, you can use Approximate Nearest Neighbors (ANN) such as Locality-Sensitive Hashing (LSH) or Hierarchical Navigable Small World (HNSW) to find the most relevant documents.</p>
</section>
</section>
</section>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>To follow this tutorial you’ll need to:</p>
<ol type="1">
<li>Sign up and generate an API key in <a href="https://platform.openai.com/docs/overview">OpenAI</a>.</li>
<li>Set the API key as an environment variable called <code>OPENAI_API_KEY</code>.</li>
<li>Create a virtual environment in Python and install the requirements:</li>
<li>Download the <a href="../_extras/what-is-rag/bbva.pdf">sample PDF file</a></li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv venv</span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> venv/bin/activate</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install langchain chromadb langchain-openai langchain-community python-dotenv pypdf jupyter</span></code></pre></div>
<p>Once you’ve completed the steps above, you can run copy and paste the code from the next sections. You can also download the notebook from <a href="../posts/what-is-rag.html">here</a>.</p>
</section>
<section id="rag-without-vector-database" class="level2">
<h2 class="anchored" data-anchor-id="rag-without-vector-database">RAG without vector database</h2>
<p>Let’s go through an example without a VectorDB. We’ll simply <em>augment</em> with the full text of the document.</p>
<p>First, import the necessary libraries and load the required variables from the .env file.</p>
<div id="cell-4" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> chromadb</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> chromadb.utils.embedding_functions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAIEmbeddingFunction</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_community.document_loaders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PyPDFLoader</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.messages <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HumanMessage, SystemMessage</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_text_splitters <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RecursiveCharacterTextSplitter</span>
<span id="cb2-10"></span>
<span id="cb2-11">load_dotenv()</span></code></pre></div>
</div>
<p>This code will import the necessary libraries and load the required variables from the .env file.</p>
<section id="read-the-document" class="level3">
<h3 class="anchored" data-anchor-id="read-the-document">Read the document</h3>
<p>Next, we’ll use a langchain DocumentLoader to load the document. Since, we’re dealing with a PDF file, we’ll use the PyPDFLoader.</p>
<p>There are many DocumentLoaders available in langchain. You can find the full list <a href="https://python.langchain.com/docs/integrations/document_loaders/">here</a>.</p>
<div id="cell-8" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../_extras/what-is-rag/bbva.pdf"</span></span>
<span id="cb3-2">loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PyPDFLoader(file_path)</span>
<span id="cb3-3">pages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> page <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> loader.lazy_load():</span>
<span id="cb3-6">    pages.append(page)</span></code></pre></div>
</div>
<p>A document loader is a class that processes a document and returns a list of Document objects. In the case of the PyPDFLoader, it will read each page of the PDF file and return the text of each page with some additional metadata.</p>
<p>A single page will look like this:</p>
<div id="cell-10" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">pages[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].model_dump()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>{'id': None,
 'metadata': {'producer': 'Adobe PDF Library 15.0',
  'creator': 'Adobe InDesign 16.1 (Windows)',
  'creationdate': '2021-03-24T14:51:54+01:00',
  'moddate': '2021-03-24T14:51:54+01:00',
  'trapped': '/False',
  'source': '../_extras/what-is-rag/bbva.pdf',
  'total_pages': 4,
  'page': 0,
  'page_label': '1'},
 'page_content': "EDICIÓN AQUA PREP 01-01\nBANCO BILBAO VIZCAYA ARGENTARIA, S.A. - Plaza de San Nicolás, 4 - 48005 BILBAO\nReg. Mer. Vizcaya -T omo 3858, Folio 1, Hoja BI-17 BIS-A, Inscripción 1035ª C.I.F.: A48265169\n1 / 4\nThis document contains the Pre-contractual information and the Prior General Information of the Aqua Pre-paid Card contract \n(hereinafter, the Card) in accordance with the provisions of the Ministerial Order ECE/1263/2019, on the transparency of \ninformation conditions applicable to payment services, and Bank of Spain Circular 5/2012, on the transparency of banking services \nand responsibility in the granting of loans.\nThe information highlighted in bold is especially important, in accordance with Circular 5/2012\n1. ON THE PAYMENT SERVICE PROVIDER\n1.1 Details and registration\nBANCO BILBAO VIZCAYA ARGENTARIA, S.A.\nAddress: Plaza San Nicolás, 4 - 48005 BILBAO. \nPhone number: 900 102 801\nWebsite address: www.bbva.es\nRegistered in the Biscay Commercial Register, Volume 2083, \nFolio 1, Sheet BI-17-A, Entry 1\n1.2 Supervisory Authorities:\nBanco de España (Registry 0182)\n[Spanish National Securities Market Commission]\n2. ON THE USE OF THE PAYMENT SERVICES\n2.1 Main characteristics: PREPAID CARD .\nThe Holder may specify that the card be physical or virtual. \nT erms and conditions governing the availability of funds: in \nother words, when and how the holder will obtain the money:\na) The Card, against a balance previously loaded on it, \nmay be used to purchase goods or services in any of \nthe physical or virtual establishments affiliated with the \ncard systems to which the Card belongs and that are \nshown on it.\nb) T o make online payments with the Card, the Account \nHolder must consult the details pertaining to the card \nnumber, expiration date and CVV via the BBVA website \nor mobile app.\nc) Withdraw money from ATMs, Bank branches and \nany other entities that allow it against the balance \npreviously loaded on it.\nT ransactions carried out with the Card will reduce the \navailable balance.\nUnder no circumstances may transactions be carried out \nin excess of the current unused loaded balance at any time \n(available balance).\n2.2 Conducting transactions. Consent.\nT o withdraw money or pay with the Card in physical \nestablishments, you must present the Card and enter your \npersonal identification number (PIN).\nThe Card's contactless technology can be used to pay or \nwithdraw cash with the Card without having to enter the PIN for \ntransactions under 50 euros.\nFor online shop purchases, you must identify yourself in the \nmanner indicated by the Bank, enter the security password and \nfollow the procedure specified by the Bank..\n2.3 Execution period\nThe transactions will be charged to the Direct Debit Account on \nthe date on which they were executed.\nPre-contractual information and \ninformation  booklet  prior to \nconcluding the payment services \ncontract\nAQUA PRE-PAID CARD",
 'type': 'Document'}</code></pre>
</div>
</div>
<p>You can see that in addition to the page content, it includes metadata about the source file, the page number, etc.</p>
<p>This document is about the conditions of some specific banking product. We’ll use it to answer a question about it.</p>
</section>
<section id="augment-context" class="level3">
<h3 class="anchored" data-anchor-id="augment-context">Augment context</h3>
<p>Now that we have all the pages of the PDF available as a text, let’s build the context we’ll use to generate a response.</p>
<p>We’ll define a system and a user prompt. In the system prompt, we’ll define the role of the assistant and in the user prompt, we’ll provide the user question and the documents.</p>
<div id="cell-14" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">system_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You are a helpful assistant that can answer questions about the provided context.</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Please cite the page number used to answer the question. Write the page number in the format "Page X" at the end of your answer. </span></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">If the answer is not found in the context, please say so.</span></span>
<span id="cb6-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-8">user_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Please answer the following question based on the context provided:</span></span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Question: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span></span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Documents:</span></span>
<span id="cb6-14"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{documents}</span></span>
<span id="cb6-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-16"></span>
<span id="cb6-17">pages_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb6-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, page <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(pages):</span>
<span id="cb6-19">    pages_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"--- PAGE </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ---</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>page<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>page_content<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
</div>
<p>We’ve set up the system and user prompt, and a a variable that stores the pages we extracted as a single string. When we make a request to the model, we’ll combine all of these into messages and send them to the model.</p>
<p>Now, we’re ready to generate a response.</p>
</section>
</section>
<section id="generate-response" class="level2">
<h2 class="anchored" data-anchor-id="generate-response">Generate response</h2>
<p>To generate a response we’ll use <code>gpt-4.1-mini</code> and combine the system and user prompts we’ve built to augment the model’s context.</p>
<div id="cell-18" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4.1-mini"</span>, temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_response(context_vars: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb7-4">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb7-5">        SystemMessage(content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>system_prompt),</span>
<span id="cb7-6">        HumanMessage(content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>user_prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>context_vars)),</span>
<span id="cb7-7">    ]</span>
<span id="cb7-8">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.invoke(messages)</span>
<span id="cb7-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response.content</span>
<span id="cb7-10"></span>
<span id="cb7-11"></span>
<span id="cb7-12">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the main idea of the document?"</span></span>
<span id="cb7-13">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_response({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: question, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"documents"</span>: pages_str})</span>
<span id="cb7-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The main idea of the document is to provide the pre-contractual and general information regarding the Aqua Pre-paid Card offered by Banco Bilbao Vizcaya Argentaria, S.A. (BBVA). It outlines the terms and conditions of the card, including its features, usage, fees, security measures, responsibilities of the cardholder and the bank, contract duration, amendments, termination, applicable law, dispute resolution procedures, and other important legal aspects. The document aims to ensure transparency and inform potential cardholders about their rights and obligations before entering into the contract. 

Page 1 to Page 4</code></pre>
</div>
</div>
<p>In this code, we’ve combined the system, user prompt, the pages extracted from the document, and a user question (“What is the main idea of the document?”) into messages the model can understand.</p>
<p>If you run the code, you’ll get an accurate answer from the model. Try running it with a different question.</p>
<div id="cell-20" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the daily transaction limits?"</span></span>
<span id="cb9-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_response({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: question, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"documents"</span>: pages_str})</span>
<span id="cb9-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The daily transaction limits for the Aqua Pre-paid Card are as follows: The daily purchase limit will be determined by the Card's balance and up to a maximum of 1,000 euros per day. The Holder and the Bank may modify the initially specified limits. Additionally, the monthly limit for collecting lottery and gambling prizes is ten thousand euros. (Page 2)</code></pre>
</div>
</div>
<p>As long as the document contains the information you need, you will likely get an accurate answer from the model.</p>
<p>But you can do better. Right now, the model is using the full text of the document to answer the question. Most questions only require a few sentences from the document.</p>
<p>To answer the “What are the daily transaction limits?”, the model used 3,528 input tokens. While in reality, it only needed less than 500 input tokens.</p>
<p>For small documents such as this one, the difference isn’t a big deal. But when you’re dealing with thousands of documents and potentially millions of tokens, the difference can be significant in terms of costs, latency, and accuracy.</p>
<p>Let’s see how we can use a VectorDB to improve improve this.</p>
</section>
<section id="rag-with-vector-search" class="level2">
<h2 class="anchored" data-anchor-id="rag-with-vector-search">RAG with vector search</h2>
<p>You’ll need to start by doing two things: defining an embedding function, and creating a VectorDB.</p>
<p>In this example, we’ll use the OpenAIEmbeddingFunction to create embeddings and Chroma to store them.</p>
<div id="cell-24" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">openai_ef <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAIEmbeddingFunction(api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENAI_API_KEY"</span>))</span>
<span id="cb11-2">vector_db <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chromadb.PersistentClient()</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb11-5">    collection <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vector_db.delete_collection(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbva"</span>)</span>
<span id="cb11-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb11-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb11-8"></span>
<span id="cb11-9">collection <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vector_db.create_collection(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbva"</span>, embedding_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>openai_ef)</span></code></pre></div>
</div>
<p>In this code, you’ve set up the embedding function and created a VectorDB. The embedding function converts chunks of text from the document into vectors. The VectorDB stores these vectors and allows you to query them based on similarity to the question.</p>
<p>Next, you’ll need to split the pages into smaller chunks that you can query the VectorDB with.</p>
<section id="split-and-index-documents" class="level3">
<h3 class="anchored" data-anchor-id="split-and-index-documents">Split and index documents</h3>
<p>The RecursiveCharacterTextSplitter is a class that splits text into chunks of a specified size. It’s a recursive approach that splits the text into smaller chunks using a hierarchy of delimiters (e.g., <code>"\\n\\n"</code>, <code>"\n"</code>, <code>"."</code>, etc.).</p>
<p>In this example, we’ll use a chunk size of 1,000 characters and an overlap of 200 characters. However, in practice bigger chunks seem to work better. Popular embedding functions can handle up to 8,192 tokens, which is ~32,000 characters. You might want to start there.</p>
<div id="cell-28" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">text_splitter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RecursiveCharacterTextSplitter(chunk_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, chunk_overlap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb12-2">all_splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_splitter.split_documents(pages)</span></code></pre></div>
</div>
<p>This code will split the documents and save those splits into <code>all_splits</code>. Then you need to add those chunks into your VectorDB.</p>
<p>ChromaDB provides you with a simple way to add chunks to your VectorDB:</p>
<div id="cell-30" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">collection.add(</span>
<span id="cb13-2">    documents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[split.page_content <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> split <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> all_splits],</span>
<span id="cb13-3">    metadatas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[split.metadata <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> split <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> all_splits],</span>
<span id="cb13-4">    ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(all_splits))],</span>
<span id="cb13-5">)</span></code></pre></div>
</div>
<p>This will add the chunks to your VectorDB. In addition to the chunks, this will add the metadata of each chunk and generate unique IDs for each chunk.</p>
</section>
<section id="query-the-database" class="level3">
<h3 class="anchored" data-anchor-id="query-the-database">Query the database</h3>
<p>Once the chunks are in the VectorDB, you can query them with the question.</p>
<div id="cell-34" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">collection.query(</span>
<span id="cb14-2">    query_texts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the daily transaction limits?"</span>],</span>
<span id="cb14-3">    n_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb14-4">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>{'ids': [['4']],
 'embeddings': None,
 'documents': [["EDICIÓN AQUA PREP 01-01\nBANCO BILBAO VIZCAYA ARGENTARIA, S.A. - Plaza de San Nicolás, 4 - 48005 BILBAO\nReg. Mer. Vizcaya -T omo 3858, Folio 1, Hoja BI-17 BIS-A, Inscripción 1035ª C.I.F.: A48265169\n2 / 4 \n2.4 T ransaction limits. \nThe daily purchase limit will be determined by the Card's \nbalance and up to a maximum of 1,000 euros per day. The \nHolder and the Bank may modify the initially specified limits. \nThe monthly limit for collecting lottery and gambling prizes is \nten thousand euros.\n2.5 T o sign up for the card, you do not need to take out \nany other accessory service.\n3. ON COSTS AND INTEREST AND EXCHANGE RATES\nMonthly top-up limit: Minimum of 6, maximum of 1000\nThe applicable fees for using the card may be:\na) Pre-paid card issue and maintenance fee: 5 euros.\nb) Fee for issuance of duplicates: 4 euros.\nc) Fee for using the card outside the Eurozone: 3% \napplicable to the exchange value in euros.\nd) Fees to withdraw cash against the card balance at ATMs:"]],
 'uris': None,
 'included': ['metadatas', 'documents', 'distances'],
 'data': None,
 'metadatas': [[{'page_label': '2',
    'source': '../_extras/what-is-rag/bbva.pdf',
    'producer': 'Adobe PDF Library 15.0',
    'total_pages': 4,
    'trapped': '/False',
    'creationdate': '2021-03-24T14:51:54+01:00',
    'page': 1,
    'creator': 'Adobe InDesign 16.1 (Windows)',
    'moddate': '2021-03-24T14:51:54+01:00'}]],
 'distances': [[0.3241901397705078]]}</code></pre>
</div>
</div>
<p>You can even query it with multiple questions at once:</p>
<div id="cell-36" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1">collection.query(</span>
<span id="cb16-2">    query_texts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the daily transaction limits?"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the maximum amount I can withdraw?"</span>],</span>
<span id="cb16-3">    n_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb16-4">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>{'ids': [['4'], ['4']],
 'embeddings': None,
 'documents': [["EDICIÓN AQUA PREP 01-01\nBANCO BILBAO VIZCAYA ARGENTARIA, S.A. - Plaza de San Nicolás, 4 - 48005 BILBAO\nReg. Mer. Vizcaya -T omo 3858, Folio 1, Hoja BI-17 BIS-A, Inscripción 1035ª C.I.F.: A48265169\n2 / 4 \n2.4 T ransaction limits. \nThe daily purchase limit will be determined by the Card's \nbalance and up to a maximum of 1,000 euros per day. The \nHolder and the Bank may modify the initially specified limits. \nThe monthly limit for collecting lottery and gambling prizes is \nten thousand euros.\n2.5 T o sign up for the card, you do not need to take out \nany other accessory service.\n3. ON COSTS AND INTEREST AND EXCHANGE RATES\nMonthly top-up limit: Minimum of 6, maximum of 1000\nThe applicable fees for using the card may be:\na) Pre-paid card issue and maintenance fee: 5 euros.\nb) Fee for issuance of duplicates: 4 euros.\nc) Fee for using the card outside the Eurozone: 3% \napplicable to the exchange value in euros.\nd) Fees to withdraw cash against the card balance at ATMs:"],
  ["EDICIÓN AQUA PREP 01-01\nBANCO BILBAO VIZCAYA ARGENTARIA, S.A. - Plaza de San Nicolás, 4 - 48005 BILBAO\nReg. Mer. Vizcaya -T omo 3858, Folio 1, Hoja BI-17 BIS-A, Inscripción 1035ª C.I.F.: A48265169\n2 / 4 \n2.4 T ransaction limits. \nThe daily purchase limit will be determined by the Card's \nbalance and up to a maximum of 1,000 euros per day. The \nHolder and the Bank may modify the initially specified limits. \nThe monthly limit for collecting lottery and gambling prizes is \nten thousand euros.\n2.5 T o sign up for the card, you do not need to take out \nany other accessory service.\n3. ON COSTS AND INTEREST AND EXCHANGE RATES\nMonthly top-up limit: Minimum of 6, maximum of 1000\nThe applicable fees for using the card may be:\na) Pre-paid card issue and maintenance fee: 5 euros.\nb) Fee for issuance of duplicates: 4 euros.\nc) Fee for using the card outside the Eurozone: 3% \napplicable to the exchange value in euros.\nd) Fees to withdraw cash against the card balance at ATMs:"]],
 'uris': None,
 'included': ['metadatas', 'documents', 'distances'],
 'data': None,
 'metadatas': [[{'source': '../_extras/what-is-rag/bbva.pdf',
    'page': 1,
    'total_pages': 4,
    'creator': 'Adobe InDesign 16.1 (Windows)',
    'creationdate': '2021-03-24T14:51:54+01:00',
    'moddate': '2021-03-24T14:51:54+01:00',
    'producer': 'Adobe PDF Library 15.0',
    'page_label': '2',
    'trapped': '/False'}],
  [{'page_label': '2',
    'trapped': '/False',
    'source': '../_extras/what-is-rag/bbva.pdf',
    'creator': 'Adobe InDesign 16.1 (Windows)',
    'total_pages': 4,
    'creationdate': '2021-03-24T14:51:54+01:00',
    'moddate': '2021-03-24T14:51:54+01:00',
    'producer': 'Adobe PDF Library 15.0',
    'page': 1}]],
 'distances': [[0.3241901397705078], [0.416978657245636]]}</code></pre>
</div>
</div>
<p>Now, let’s add the VectorDB into our RAG pipeline.</p>
</section>
<section id="rag-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="rag-pipeline">RAG pipeline</h3>
<p>First, start by defining a function that does the retrieval of the most relevant documents.</p>
<div id="cell-40" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_relevant_docs(question: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, top_k: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb18-2">    relevant_docs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collection.query(query_texts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>question, n_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>top_k)</span>
<span id="cb18-3">    documents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> relevant_docs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"documents"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb18-4">    metadatas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> relevant_docs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metadatas"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb18-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [</span>
<span id="cb18-6">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"page_content"</span>: doc, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Document"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metadata"</span>: metadata}</span>
<span id="cb18-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> doc, metadata <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(documents, metadatas)</span>
<span id="cb18-8">    ]</span></code></pre></div>
</div>
<p>This function will take a question and return the <code>top_k</code> most relevant chunks from the document. Here’s an example:</p>
<div id="cell-42" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">get_relevant_docs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the daily transaction limits?"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>[{'page_content': "EDICIÓN AQUA PREP 01-01\nBANCO BILBAO VIZCAYA ARGENTARIA, S.A. - Plaza de San Nicolás, 4 - 48005 BILBAO\nReg. Mer. Vizcaya -T omo 3858, Folio 1, Hoja BI-17 BIS-A, Inscripción 1035ª C.I.F.: A48265169\n2 / 4 \n2.4 T ransaction limits. \nThe daily purchase limit will be determined by the Card's \nbalance and up to a maximum of 1,000 euros per day. The \nHolder and the Bank may modify the initially specified limits. \nThe monthly limit for collecting lottery and gambling prizes is \nten thousand euros.\n2.5 T o sign up for the card, you do not need to take out \nany other accessory service.\n3. ON COSTS AND INTEREST AND EXCHANGE RATES\nMonthly top-up limit: Minimum of 6, maximum of 1000\nThe applicable fees for using the card may be:\na) Pre-paid card issue and maintenance fee: 5 euros.\nb) Fee for issuance of duplicates: 4 euros.\nc) Fee for using the card outside the Eurozone: 3% \napplicable to the exchange value in euros.\nd) Fees to withdraw cash against the card balance at ATMs:",
  'type': 'Document',
  'metadata': {'producer': 'Adobe PDF Library 15.0',
   'creationdate': '2021-03-24T14:51:54+01:00',
   'creator': 'Adobe InDesign 16.1 (Windows)',
   'moddate': '2021-03-24T14:51:54+01:00',
   'page': 1,
   'trapped': '/False',
   'source': '../_extras/what-is-rag/bbva.pdf',
   'page_label': '2',
   'total_pages': 4}}]</code></pre>
</div>
</div>
<p>After you’ve retrieved the relevant chunks, you’d want to combine them into a single string that you can pass to the model. You can use <code>get_context</code> to do that.</p>
<div id="cell-44" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_context(relevant_docs: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>]):</span>
<span id="cb21-2">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb21-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> doc <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> relevant_docs:</span>
<span id="cb21-4">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"--- PAGE </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>doc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'metadata'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'page'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ---</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>doc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'page_content'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb21-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> context</span></code></pre></div>
</div>
<div id="cell-45" class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1">docs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_relevant_docs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the daily transaction limits?"</span>, top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb22-2">get_context(docs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>"--- PAGE 1 ---\nEDICIÓN AQUA PREP 01-01\nBANCO BILBAO VIZCAYA ARGENTARIA, S.A. - Plaza de San Nicolás, 4 - 48005 BILBAO\nReg. Mer. Vizcaya -T omo 3858, Folio 1, Hoja BI-17 BIS-A, Inscripción 1035ª C.I.F.: A48265169\n2 / 4 \n2.4 T ransaction limits. \nThe daily purchase limit will be determined by the Card's \nbalance and up to a maximum of 1,000 euros per day. The \nHolder and the Bank may modify the initially specified limits. \nThe monthly limit for collecting lottery and gambling prizes is \nten thousand euros.\n2.5 T o sign up for the card, you do not need to take out \nany other accessory service.\n3. ON COSTS AND INTEREST AND EXCHANGE RATES\nMonthly top-up limit: Minimum of 6, maximum of 1000\nThe applicable fees for using the card may be:\na) Pre-paid card issue and maintenance fee: 5 euros.\nb) Fee for issuance of duplicates: 4 euros.\nc) Fee for using the card outside the Eurozone: 3% \napplicable to the exchange value in euros.\nd) Fees to withdraw cash against the card balance at ATMs:\n\n--- PAGE 2 ---\nBBVA app or website, or via the phone numbers shown on the \ncards, and in any case within a maximum period of thirteen \nmonths after the date of the debit entry.\n5.3 Liability of the Bank in the event of unauthorized \npayment transactions.\nIf an unauthorized payment transaction is carried out, the \nBank will refund the amount of the unauthorized transaction.\n5.4 Liability of the Holder in the event of unauthorized \ntransactions.\nThe Account Holder will be liable for losses arising from \nunauthorized payment transactions made with the Card up \nto a maximum of 50 euros.\nThe Holder will be liable without any limitations in the \nevent of fraud or gross negligence on their part in meeting \ntheir obligations as respects the security credentials and \nsafekeeping if this situation is not reported to the Bank \nwithout delay.\n5.5 Blocking the Card.\nThe Bank reserves the right to block the Card on objectively \njustified grounds related to the security measures taken\n\n--- PAGE 2 ---\nEDICIÓN AQUA PREP 01-01\nBANCO BILBAO VIZCAYA ARGENTARIA, S.A. - Plaza de San Nicolás, 4 - 48005 BILBAO\nReg. Mer. Vizcaya -T omo 3858, Folio 1, Hoja BI-17 BIS-A, Inscripción 1035ª C.I.F.: A48265169\n3 / 4 \nd) Notify the Bank of any loss, theft or copying of the \nCard or misappropriation of the PIN and/or passwords \nwithout undue delay as soon as they become aware \nof it, at any of the Bank's branches during customer \nservice hours or via the phone numbers shown on the \nCard.\n5.2 Notify the Bank of any unauthorized transactions \nor incorrectly executed payment transactions.\nThe Holder must notify the Bank as soon as they become \naware of the posting of any unauthorized transaction to the \nDirect Debit Account of the Card without undue delay at any \nbranch of the Bank during customer service hours, on the \nBBVA app or website, or via the phone numbers shown on the \ncards, and in any case within a maximum period of thirteen \nmonths after the date of the debit entry.\n\n"</code></pre>
</div>
</div>
<p>This will generate a string similar to the one we used in the previous example.</p>
<p>Finally, you can adapt <code>get_response</code> to use these new steps in the RAG pipeline.</p>
<div id="cell-47" class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_messages(question: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, relevant_docs: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb24-2">    context_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: question, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"documents"</span>: get_context(relevant_docs)}</span>
<span id="cb24-3">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb24-4">        SystemMessage(content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>system_prompt),</span>
<span id="cb24-5">        HumanMessage(content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>user_prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>context_vars)),</span>
<span id="cb24-6">    ]</span>
<span id="cb24-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> messages</span>
<span id="cb24-8"></span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_response(question: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb24-11">    relevant_docs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_relevant_docs(question)</span>
<span id="cb24-12">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_messages(question, relevant_docs)</span>
<span id="cb24-13">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.invoke(messages)</span>
<span id="cb24-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response.content</span>
<span id="cb24-15"></span>
<span id="cb24-16"></span>
<span id="cb24-17">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the daily transaction limits?"</span></span>
<span id="cb24-18">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_response(question)</span>
<span id="cb24-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The daily purchase limit for transactions is determined by the Card's balance and can be up to a maximum of 1,000 euros per day. Additionally, the monthly limit for collecting lottery and gambling prizes is ten thousand euros. The Holder and the Bank may modify the initially specified limits. 

(Page 1)</code></pre>
</div>
</div>
<p>And, you’re done! You’ve built a RAG pipeline that can answer questions about a document.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this post, you’ve learned about what RAG is, how it works, and how to implement it in Python. You’ve learned why you’d want to use it, and how to do it.</p>
<p>You’ve walked through the process of: - Extracting text from a PDF file - Creating embeddings for the chunks - Storing the embeddings in a VectorDB - Querying the VectorDB to find the most relevant chunks - Using the model to generate a response</p>
<p>Hope you find this article usefl. If you have any questions or comments, put them in the comments section below.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2025,
  author = {Castillo, Dylan},
  title = {What Is {Retrieval} {Augmented} {Generation} {(RAG)?}},
  date = {2025-06-29},
  url = {https://dylancastillo.co/posts/what-is-rag.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2025" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2025. <span>“What Is Retrieval Augmented Generation
(RAG)?”</span> June 29, 2025. <a href="https://dylancastillo.co/posts/what-is-rag.html">https://dylancastillo.co/posts/what-is-rag.html</a>.
</div></div></section></div> ]]></description>
  <category>llm</category>
  <category>rag</category>
  <category>python</category>
  <guid>https://dylancastillo.co/posts/what-is-rag.html</guid>
  <pubDate>Sun, 29 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Key parameters for LLMs</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/key-parameters-llms.html</link>
  <description><![CDATA[ 




<p>I recently did a workshop about building agents. During the workshop I discussed the key parameters for LLMs, so I thought it’d be useful to write a short post about it.</p>
<p>These are the parameters that you will usually use when building LLM-based products:</p>
<ul>
<li>Model</li>
<li>Messages/prompts</li>
<li>Temperature</li>
<li>Seed</li>
<li>Top-P Sampling</li>
<li>Logprobs</li>
<li>Logit biases</li>
<li>Max completion tokens</li>
<li>Response format</li>
<li>Streaming</li>
<li>Tools</li>
</ul>
<p>In the next sections, I’ll go over each of these parameters in more detail and provide some suggestions about how to use them.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Ech provider has a slightly different name for the same parameter, but the concept is the same. You’ll have to check the documentation of the provider you’re using to see the exact name of the parameter.</p>
</div>
</div>
<section id="model" class="level2">
<h2 class="anchored" data-anchor-id="model">Model</h2>
<p>When choosing a model, consider the following factors:</p>
<ul>
<li>Complexity of task: Am I solving a problem that requires reasoning capabilities? Or is it a simple task?</li>
<li>Speed: How important is it that the model replies quickly? Is this something that I can run on the background?</li>
<li>Cost: How much do I want to spend on this task?</li>
<li>Provider: Which providers do I have access to? Do I need to self-host?</li>
</ul>
<p>Right now, my go-to models are Gemini 2.5 Pro or Claude 4 for complex tasks. For simpler tasks, I use Gemini 2.5 Flash or OpenAI’s gpt-4.1 family.</p>
<p>The best way to pick a model is to start with the most capable models and then scale down to the simplest models that still capable of solving the task. Otherwise, you could end up spending a lot of time trying to solve an issue that you simply cannot solve reliably with smaller models.</p>
</section>
<section id="messagesprompts" class="level2">
<h2 class="anchored" data-anchor-id="messagesprompts">Messages/prompts</h2>
<p>The messages/prompts you send to the LLM will determine the context and instructions for the LLM to follow. I wrote a guide on <a href="https://dylancastillo.co/posts/prompt-engineering-101.html">prompt engineering</a> that covers the basics of how to write good prompts.</p>
</section>
<section id="temperature" class="level2">
<h2 class="anchored" data-anchor-id="temperature">Temperature</h2>
<p>The temperature parameter controls the randomness of the model’s output. A temperature of 0 will make the model more deterministic, while a temperature of 1 will make the model more random.</p>
<p>I wrote a <a href="https://dylancastillo.co/posts/seed-temperature-llms.html">post</a> about how temperature affects the output of LLMs. For tasks where consistency is important, use a temperature of 0. For tasks where creativity is important, use a temperature above 0. I’ve found that anything above 1.3-4 is too random.</p>
</section>
<section id="seed" class="level2">
<h2 class="anchored" data-anchor-id="seed">Seed</h2>
<p>The seed parameter is used to initialize the random number generator that is then used to sample the next token. If you want to maximize reproducibility, set a seed value.</p>
<p>This is only available in OpenAI, Gemini, and open-weight models. Check my <a href="https://dylancastillo.co/posts/seed-temperature-llms.html">post</a> for more details.</p>
</section>
<section id="top-p-sampling" class="level2">
<h2 class="anchored" data-anchor-id="top-p-sampling">Top-P Sampling</h2>
<p>Top-p sampling is a technique that limits the number of tokens that can be selected from the vocabulary by first selecting the smallest group of tokens whose combined probability ≥ P. For example, top P = 0.9 picks the next token from the smallest group of tokens that together cover at least 90% probability.</p>
<p>I rarely use this parameter.</p>
</section>
<section id="logit-biases" class="level2">
<h2 class="anchored" data-anchor-id="logit-biases">Logit biases</h2>
<p>Logits are the raw scores that the model assigns to each token. You can use biases to change the odds of a token being selected. Positive biases increase the odds of the token being selected, while negative biases do the opposite.</p>
<p>This is often used for document classification tasks or <a href="https://cookbook.openai.com/examples/search_reranking_with_cross-encoders">LLM-based rerankers</a>.</p>
</section>
<section id="logprobs" class="level2">
<h2 class="anchored" data-anchor-id="logprobs">Logprobs</h2>
<p>Logprobs are the logaritmic probabilities of the tokens. They are defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?logprob(w_i)%20=%20ln(P(w_i))%20=%20ln(%5Cfrac%7Be%5E%7Bz_i%7D%7D%7B%5Csum_%7Bj=1%7D%5E%7Bn%7D%20e%5E%7Bz_j%7D%7D)%20"></p>
<p>Where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?w_i"> is the <img src="https://latex.codecogs.com/png.latex?i">-th token in the vocabulary.</li>
<li><img src="https://latex.codecogs.com/png.latex?P(w_i)"> is the probability of the <img src="https://latex.codecogs.com/png.latex?i">-th token.</li>
<li><img src="https://latex.codecogs.com/png.latex?z_i"> is the logit of the <img src="https://latex.codecogs.com/png.latex?i">-th token.</li>
<li><img src="https://latex.codecogs.com/png.latex?n"> is the number of tokens in the vocabulary.</li>
</ul>
<p>This available for OpenAI models. Anthropic doesn’t provide them. Gemini provides a <a href="https://discuss.ai.google.dev/t/get-logprobs-at-output-token-level/54418/15">single request with logprobs per day</a> (yes, I’m not kidding 😅).</p>
<p>Open-weight models don’t provide logprobs. They provide logits instead, that you can use to calculate the probabilities of the tokens.</p>
</section>
<section id="max-completion-tokens" class="level2">
<h2 class="anchored" data-anchor-id="max-completion-tokens">Max completion tokens</h2>
<p>This parameter limits the number of tokens that the model can generate. This is useful to control costs and length of the output.</p>
</section>
<section id="response-format" class="level2">
<h2 class="anchored" data-anchor-id="response-format">Response format</h2>
<p>You can use this parameter to specify the format of the response. Anthropic, OpenAI, and Gemini support structured outputs in the form of JSON schemas. I’ve written multiple posts on this topic:</p>
<ul>
<li><a href="https://dylancastillo.co/posts/say-what-you-mean-sometimes.html">Structured outputs can hurt the performance of LLMs</a></li>
<li><a href="https://dylancastillo.co/posts/gemini-structured-outputs.html">The good, the bad, and the ugly of Gemini’s structured outputs</a></li>
<li><a href="https://dylancastillo.co/posts/llm-pydantic-order-matters.html">Structured outputs: don’t put the cart before the horse</a></li>
</ul>
<p>Open-weight models allow for more flexible structured output formats. For example, using <a href="https://dottxt-ai.github.io/outlines/latest/">outlines</a> lets you define custom regEx patterns to extract the data you need.</p>
</section>
<section id="streaming" class="level2">
<h2 class="anchored" data-anchor-id="streaming">Streaming</h2>
<p>This parameter is used to stream the response from the model. This improves the user experience as it allows you to see the output as it’s being generated.</p>
</section>
<section id="tools" class="level2">
<h2 class="anchored" data-anchor-id="tools">Tools</h2>
<p>Tools are a way to extend the capabilities of the model by providing it with external tools. This is critical for building agents.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This was a very short post about the key parameters for LLMs. I hope you found it useful.</p>
<p>Let me know if you have any questions or feedback.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2025,
  author = {Castillo, Dylan},
  title = {Key Parameters for {LLMs}},
  date = {2025-06-29},
  url = {https://dylancastillo.co/posts/key-parameters-llms.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2025" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2025. <span>“Key Parameters for LLMs.”</span> June 29,
2025. <a href="https://dylancastillo.co/posts/key-parameters-llms.html">https://dylancastillo.co/posts/key-parameters-llms.html</a>.
</div></div></section></div> ]]></description>
  <category>llm</category>
  <category>openai</category>
  <category>anthropic</category>
  <category>gemini</category>
  <category>python</category>
  <guid>https://dylancastillo.co/posts/key-parameters-llms.html</guid>
  <pubDate>Sun, 29 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Japanese is the most expensive language in terms of input tokens</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/til/counting-tokens.html</link>
  <description><![CDATA[ 




<p>OpenAI mentions in their documentation that <a href="https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them">1 token corresponds to roughly 4 characters</a>.</p>
<p>I was curious how this would work for different languages, so:</p>
<ol type="1">
<li>I took a small section of Paul Graham’s <a href="https://www.paulgraham.com/greatwork.html">How to Do Great Work</a></li>
<li>Translated it into 7 different languages: English, Spanish, French, German, Japanese, Chinese, and Hindi</li>
<li>Counted the tokens</li>
<li>compared the results.</li>
</ol>
<section id="code" class="level2">
<h2 class="anchored" data-anchor-id="code">Code</h2>
<p>Here’s the code:</p>
<div id="cell-2" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tiktoken</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_text(file_path):</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb1-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read()</span>
<span id="cb1-6"></span>
<span id="cb1-7">text_en <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../_extras/counting-tokens/en.md"</span>)</span>
<span id="cb1-8">text_es <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../_extras/counting-tokens/es.md"</span>)</span>
<span id="cb1-9">text_fr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../_extras/counting-tokens/fr.md"</span>)</span>
<span id="cb1-10">text_de <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../_extras/counting-tokens/de.md"</span>)</span>
<span id="cb1-11">text_jp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../_extras/counting-tokens/jp.md"</span>)</span>
<span id="cb1-12">text_zh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../_extras/counting-tokens/zh.md"</span>)</span>
<span id="cb1-13">text_hi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../_extras/counting-tokens/hi.md"</span>)</span>
<span id="cb1-14">text_ru <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../_extras/counting-tokens/ru.md"</span>)</span>
<span id="cb1-15">text_pt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../_extras/counting-tokens/pt.md"</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> count_tokens(text):</span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tiktoken.encoding_for_model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4o"</span>).encode(text))</span>
<span id="cb1-19"></span>
<span id="cb1-20">chars_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text_en),</span>
<span id="cb1-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"es"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text_es),</span>
<span id="cb1-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fr"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text_fr),</span>
<span id="cb1-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"de"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text_de),</span>
<span id="cb1-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jp"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text_jp),</span>
<span id="cb1-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zh"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text_zh),</span>
<span id="cb1-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hi"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text_hi),</span>
<span id="cb1-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ru"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text_ru),</span>
<span id="cb1-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text_pt),</span>
<span id="cb1-30">}</span>
<span id="cb1-31"></span>
<span id="cb1-32">tokens_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-33">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span>: count_tokens(text_en),</span>
<span id="cb1-34">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"es"</span>: count_tokens(text_es),</span>
<span id="cb1-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fr"</span>: count_tokens(text_fr),</span>
<span id="cb1-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"de"</span>: count_tokens(text_de),</span>
<span id="cb1-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jp"</span>: count_tokens(text_jp),</span>
<span id="cb1-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zh"</span>: count_tokens(text_zh),</span>
<span id="cb1-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hi"</span>: count_tokens(text_hi),</span>
<span id="cb1-40">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ru"</span>: count_tokens(text_ru),</span>
<span id="cb1-41">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>: count_tokens(text_pt),</span>
<span id="cb1-42">}</span></code></pre></div>
</div>
<p>This reads the text from the file, and uses <code>tiktoken</code> to count the tokens. I also counted the number of characters in the text.</p>
<p>Then I calculated the ratio of tokens to characters for each language.</p>
<div id="cell-4" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> lang <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"es"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"de"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zh"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hi"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ru"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>]:</span>
<span id="cb2-2">    chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chars_count[lang]</span>
<span id="cb2-3">    tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokens_count[lang]</span>
<span id="cb2-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> tokens<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> chars per token, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>chars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> chars, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tokens<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> tokens"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>en: 4.75 chars per token, 2053 chars, 432 tokens
es: 4.56 chars per token, 2271 chars, 498 tokens
fr: 4.69 chars per token, 2689 chars, 573 tokens
de: 4.46 chars per token, 2479 chars, 556 tokens
jp: 1.41 chars per token, 1081 chars, 767 tokens
zh: 1.33 chars per token, 707 chars, 531 tokens
hi: 3.51 chars per token, 2194 chars, 625 tokens
ru: 4.02 chars per token, 2275 chars, 566 tokens
pt: 4.63 chars per token, 2200 chars, 475 tokens</code></pre>
</div>
</div>
</section>
<section id="results" class="level2">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<p>I found this interesting:</p>
<ul>
<li>English is the most efficient language in terms of characters per token, with 4.75 characters per token.</li>
<li>Mandarin Chinese (1.33 characters per token) is the least efficient language in terms of characters per token, followed by Japanese (1.41 characters per token).</li>
<li>The same text in Japanese uses 77% more tokens than in English, making it the most expensive language in terms of input tokens.</li>
<li>Even though Chinese is less efficient than Japanese in terms of characters per token, it’s more efficient in terms of information conveyed per character. The article took 2053 characters in English, 707 characters in Chinese, and 1081 characters in Japanese. This explains why Chinese isn’t also the most expensive language.</li>
<li>Languages that use a latin alphabet (English, Spanish, French, German, Portuguese) are more efficient than languages that use a non-latin alphabet (Japanese, Chinese, Hindi, Russian). Russian is the most efficient language of these, with 4.02 characters per token.</li>
</ul>
</section>
<section id="limitations" class="level2">
<h2 class="anchored" data-anchor-id="limitations">Limitations</h2>
<p>This analysis has some clear limitations:</p>
<ol type="1">
<li>The text might not be a good example of the types of texts you’re working with.</li>
<li>The translations might not be good enough to truly reflect the information conveyed per character.</li>
</ol>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2025,
  author = {Castillo, Dylan},
  title = {Japanese Is the Most Expensive Language in Terms of Input
    Tokens},
  date = {2025-06-27},
  url = {https://dylancastillo.co/til/counting-tokens.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2025" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2025. <span>“Japanese Is the Most Expensive Language in
Terms of Input Tokens.”</span> June 27, 2025. <a href="https://dylancastillo.co/til/counting-tokens.html">https://dylancastillo.co/til/counting-tokens.html</a>.
</div></div></section></div> ]]></description>
  <category>til</category>
  <category>openai</category>
  <category>tiktoken</category>
  <guid>https://dylancastillo.co/til/counting-tokens.html</guid>
  <pubDate>Fri, 27 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Prompt engineering 101</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/prompt-engineering-101.html</link>
  <description><![CDATA[ 




<p>I’ve tried every trick in the book to get Large Language Models (LLMs) to do what I want them to do.</p>
<p>I’ve resorted to threats of physical violence. I’ve offered bribes. I’ve even made Cursor agents call me <a href="https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw">big daddy</a> to ensure they follow my repo’s rules<sup>1</sup>.</p>
<p>All this trial and error has taught me a trick or two about writing prompts. This is a key part of using LLMs, but it’s also one of the most hyped and abused techniques. There are so many AI influencers selling and sharing their “ultimate prompt” that it often feels closer to astrology than to engineering.</p>
<p>This article is a no-BS guide to help you get the basics right. It won’t solve all the problems in your agentic workflow or LLM-based applications, but will avoid you making obvious mistakes.</p>
<p>Let’s get started!</p>
<section id="what-is-a-prompt" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-prompt">What is a prompt?</h2>
<p>Prompts are instructions sent as text to an LLM. Most models work with two types of instructions:</p>
<ol type="1">
<li><strong>System/developer prompt</strong>: Sets the “big picture” or high-level rules for the entire conversation. Examples: “You are a helpful assistant.”; “Always answer in haiku.”</li>
<li><strong>User prompt</strong>: The actual question end-user types and any additional context. Examples: “What’s today’s weather in Dublin?”; “Summarize the following documents”</li>
</ol>
<p>The system prompt gives the assistant a “role”, while the user prompt requests specific content within that framework.</p>
<p>Prompts are usually provided as messages, which are a list of objects with a role and a content:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-2">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb1-3">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What's the weather in Tokyo?"</span>}</span>
<span id="cb1-4">]</span></code></pre></div>
<p>Then, these are passed through a <a href="https://huggingface.co/docs/transformers/en/chat_templating">chat template</a> and converted into a single string that is sent to the model. For example, this is the resulting message text used by <em>Qwen3</em>, after combining the system and user prompts:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource text number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">&lt;|im_start|&gt;system</span>
<span id="cb2-2">You are a helpful assistant.</span>
<span id="cb2-3">&lt;|im_end|&gt;</span>
<span id="cb2-4"></span>
<span id="cb2-5">&lt;|im_start|&gt;user</span>
<span id="cb2-6">What's the weather in Tokyo?</span>
<span id="cb2-7">&lt;|im_end|&gt;</span></code></pre></div>
<p>After you make the request, the model will respond with an <em>assistant</em> message that contains the model’s response<sup>2</sup>. It looks like this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource text number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1">&lt;|im_start|&gt;assistant</span>
<span id="cb3-2">The weather in Tokyo is sunny.</span>
<span id="cb3-3">&lt;|im_end|&gt;</span></code></pre></div>
<p>You’ll generally use the system and user prompts to instruct the model. But for some prompting techniques, such as few-shot prompting, people often use assistant messages to simulate model responses.</p>
</section>
<section id="components-of-a-good-prompt" class="level2">
<h2 class="anchored" data-anchor-id="components-of-a-good-prompt">Components of a good prompt</h2>
<p>There are many useful free resources online you can use to learn more about prompt engineering. I recommend <a href="https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/overview#prompt-engineering-tutorial">this article</a> by Anthropic or <a href="https://platform.openai.com/docs/guides/text?api-mode=responses">this one</a> by OpenAI.</p>
<p>Most of the advice boils down to these 6 principles:</p>
<ol type="1">
<li>Be clear and specific</li>
<li>Provide examples</li>
<li>Let models think</li>
<li>Structure prompts into sections and use clear delimiters</li>
<li>Split complex tasks into smaller steps</li>
<li>Repeat instructions when the context is long</li>
</ol>
<p>Let’s go through each of these principles in more detail.</p>
<section id="principle-1-be-clear-and-specific" class="level3">
<h3 class="anchored" data-anchor-id="principle-1-be-clear-and-specific">Principle 1: Be clear and specific</h3>
<p>This is the most important principle. If you cannot describe in detail the task you want to perform, the model will not be able to perform it. Whenever you write a prompt, ask yourself: “If I didn’t have any background knowledge in this domain, could I complete this task based on the text that I just wrote in this prompt?”</p>
<p>In addition to describing the task, you should also provide a role for the model. For example, if you’re classifying documents you can use a role like “You’re an expert in document classification” or if you’re dealing with financial data you can use a role like “You’re an expert in financial analysis”.</p>
<p>Here’s an example of a clear and specific prompt:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource text number-lines code-with-copy"><code class="sourceCode"><span id="cb4-1">You're an expert in business writing. Please review and improve this email by addressing the following issues:</span>
<span id="cb4-2"></span>
<span id="cb4-3">- Fix any grammatical errors and typos</span>
<span id="cb4-4">- Improve clarity and conciseness</span>
<span id="cb4-5">- Ensure professional tone throughout</span>
<span id="cb4-6">- Strengthen the subject line to be more specific</span>
<span id="cb4-7">- Add a clear call-to-action if missing</span>
<span id="cb4-8">- Format for better readability (bullets, paragraphs, etc.)</span>
<span id="cb4-9"></span>
<span id="cb4-10">&lt;EMAIL CONTENT&gt;</span></code></pre></div>
<p>This information will let the LLM know which specific task you want it to perform. This should go in the system prompt.</p>
</section>
<section id="principle-2-provide-examples" class="level3">
<h3 class="anchored" data-anchor-id="principle-2-provide-examples">Principle 2: Provide examples</h3>
<p>One of the lowest hanging fruit in prompt engineering is to provide examples. It’s as simple as showing the model a few input and output pairs.</p>
<p>This technique is formally known as “few shot prompt”. It’s a simple but effective way to improve the <a href="https://arxiv.org/abs/2009.03300">quality of the output</a> in many tasks.</p>
<p>Here’s an example of a few-shot prompt:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource text number-lines code-with-copy"><code class="sourceCode"><span id="cb5-1">You are an expert in solving simple word puzzles using reasoning steps. Provided with a list of 4 names, you will concatenate the last letters into a word.</span>
<span id="cb5-2">Examples:</span>
<span id="cb5-3"></span>
<span id="cb5-4">**Example 1**:</span>
<span id="cb5-5"></span>
<span id="cb5-6">Input: 'Ian Peter Bernard Stephen'</span>
<span id="cb5-7"></span>
<span id="cb5-8">Output: 'NRDN'</span>
<span id="cb5-9"></span>
<span id="cb5-10">**Example 2**:</span>
<span id="cb5-11"></span>
<span id="cb5-12">Input: 'Javier Dylan Christopher Joseph'</span>
<span id="cb5-13"></span>
<span id="cb5-14">Output: 'RNRH'</span></code></pre></div>
<p>In my experience, it’s better to provide these examples directly in the system prompt because it’s easier to read and keep everything close together. However, as mentioned above, some people prefer to use assistant messages to provide examples.</p>
</section>
<section id="principle-3-let-models-think" class="level3">
<h3 class="anchored" data-anchor-id="principle-3-let-models-think">Principle 3: Let models think</h3>
<p>LLMs think in tokens. If you want them to achieve better results, you should let them use tokens to reason about the problem before generating the final answer.</p>
<p>This process is formally known as “Chain of Thought” (CoT) prompting. Similar to few shot prompts, it’s a powerful way to improve the <a href="https://arxiv.org/abs/2201.11903">quality of results</a> in many tasks.</p>
<p>A 0-shot CoT prompt means that you explicitly ask the model to think step by step to solve the problem but don’t provide any examples of how it should reason about it. A few-shot CoT prompt means that you provide examples of how the model should reason about the problem (e.g., 1-shot means you provide one example, 2-shot means you provide two examples, etc.).</p>
<p>Here are two examples of CoT prompts:</p>
<section id="shot-cot-prompt" class="level4">
<h4 class="anchored" data-anchor-id="shot-cot-prompt">0-Shot CoT Prompt</h4>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource text number-lines code-with-copy"><code class="sourceCode"><span id="cb6-1">**Question:** A cinema sold 120 tickets at $8 each. What was the total revenue?</span>
<span id="cb6-2"></span>
<span id="cb6-3">**Note:** think about your answer step by step</span></code></pre></div>
</section>
<section id="shot-cot-prompt-1" class="level4">
<h4 class="anchored" data-anchor-id="shot-cot-prompt-1">1-Shot CoT Prompt</h4>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource text number-lines code-with-copy"><code class="sourceCode"><span id="cb7-1">&lt;example&gt;</span>
<span id="cb7-2">**Question:** Emily buys 3 notebooks at $4 each and 2 pens at $1.50 each. What's her total cost?</span>
<span id="cb7-3">**Reasoning:**</span>
<span id="cb7-4"></span>
<span id="cb7-5">1. Cost of notebooks = 3 × $4 = $12</span>
<span id="cb7-6">2. Cost of pens = 2 × $1.50 = $3</span>
<span id="cb7-7">3. Total cost = $12 + $3 = $15</span>
<span id="cb7-8"></span>
<span id="cb7-9">**Answer:** $15</span>
<span id="cb7-10">&lt;/example&gt;</span>
<span id="cb7-11"></span>
<span id="cb7-12">**Question:** A cinema sold 120 tickets at $8 each. What was the total revenue?</span></code></pre></div>
<p>These days, most providers have options to let models think without explicitly asking them to do so in the prompt. With OpenAI models you can use models from the o-family (e.g., o3, o3-mini, o4-mini). For Anthropic and Gemini, you can configure Claude 3.7/4 or Gemini 2.5 models to use thinking tokens by setting a specific parameter. However, as I’m writing this, only Gemini gives you access to the full thinking tokens in the response. OpenAI will give you a summarized version of the thinking process and Anthropic will only give you the final answer.</p>
</section>
</section>
<section id="principle-4-structure-prompts-into-sections" class="level3">
<h3 class="anchored" data-anchor-id="principle-4-structure-prompts-into-sections">Principle 4: Structure prompts into sections</h3>
<p>It’s a common practice to structure system and user prompts into sections. Some people like to use markdown formatting to make the prompt more readable, others use xml tags. You can also use reverse backticks (```) to delimit code blocks or JSON objects. Regardless of the method you use, make sure to do it consistently.</p>
<p>I really haven’t checked if there is any hard evidence that proves this really improves performance because it just <em>feels right</em>. It also helps with readability. You will spend a lot of time iterating on prompts, so making them easy to read is already a good investment on its own.</p>
<section id="system-prompt" class="level4">
<h4 class="anchored" data-anchor-id="system-prompt">System prompt</h4>
<p>For system prompts, you can use the following structure:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource text number-lines code-with-copy"><code class="sourceCode"><span id="cb8-1">**Role and objective**</span>
<span id="cb8-2"></span>
<span id="cb8-3">You’re an expert document classifier. Your goal is to classify this document…</span>
<span id="cb8-4"></span>
<span id="cb8-5">**Rules**</span>
<span id="cb8-6"></span>
<span id="cb8-7">1. Documents that contain information about medical treatments should be classified as …</span>
<span id="cb8-8">2. Do not classify documents into multiple categories</span>
<span id="cb8-9">3. …</span>
<span id="cb8-10"></span>
<span id="cb8-11">**Examples**</span>
<span id="cb8-12"></span>
<span id="cb8-13">Input: [document text]</span>
<span id="cb8-14">Classification: [document category]</span>
<span id="cb8-15">…</span>
<span id="cb8-16"></span>
<span id="cb8-17">**Output**</span>
<span id="cb8-18"></span>
<span id="cb8-19">You should generate a JSON object with this structure: [JSON schema]</span>
<span id="cb8-20"></span>
<span id="cb8-21">**(Optional) Reiterate objective and elicit thinking**</span>
<span id="cb8-22"></span>
<span id="cb8-23">Your goal is to XYZ… Before writing your answers, write your reasoning step by step.</span></code></pre></div>
<p>The headers are for reference only, you can skip them if you want. You also don’t need to include all of these sections in your prompt.</p>
</section>
<section id="user-prompt" class="level4">
<h4 class="anchored" data-anchor-id="user-prompt">User prompt</h4>
<p>I’d recommend to keep user prompts short:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource text number-lines code-with-copy"><code class="sourceCode"><span id="cb9-1">**Context**</span>
<span id="cb9-2"></span>
<span id="cb9-3">Input: [document text]</span>
<span id="cb9-4"></span>
<span id="cb9-5">**Briefly reiterate objective**</span>
<span id="cb9-6"></span>
<span id="cb9-7">Please classify this document into a category.</span></code></pre></div>
<p>In it’s simplest form, you just provide the context the LLM needs to work with and reiterate the objective.</p>
</section>
</section>
<section id="principle-5-split-complex-tasks-into-smaller-steps" class="level3">
<h3 class="anchored" data-anchor-id="principle-5-split-complex-tasks-into-smaller-steps">Principle 5: Split complex tasks into smaller steps</h3>
<p>LLMs often get confused when the <a href="https://arxiv.org/abs/2307.03172">context is too long</a> and/or the instructions are complex.</p>
<p>For example, you might have a document classifier that precedes a conditional entity extraction. Instead of doing a single LLM call with a prompt that does the document classification and the entity extraction, you can split the task into two steps:</p>
<ol type="1">
<li>First, you classify the document into a category.</li>
<li>Then, you extract the entities from the document, based on the category.</li>
</ol>
<p>Here’s an example of the same task split into two steps.</p>
<section id="big-complex-prompt" class="level4">
<h4 class="anchored" data-anchor-id="big-complex-prompt">Big complex prompt</h4>
<p>This prompt tries (and likely fails) to do two complex tasks at once.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource text number-lines code-with-copy"><code class="sourceCode"><span id="cb10-1">You're an expert document classifier. First, classify the document into the following categories:</span>
<span id="cb10-2"></span>
<span id="cb10-3">- Medical</span>
<span id="cb10-4">- Financial</span>
<span id="cb10-5">- Legal</span>
<span id="cb10-6"></span>
<span id="cb10-7">Then, if the document is classified as "Medical", extract the following entities:</span>
<span id="cb10-8">...</span>
<span id="cb10-9"></span>
<span id="cb10-10">If the document is classified as "Financial", extract the following entities:</span>
<span id="cb10-11">...</span>
<span id="cb10-12"></span>
<span id="cb10-13">If the document is classified as "Legal", extract the following entities:</span>
<span id="cb10-14">...</span></code></pre></div>
</section>
<section id="smaller-simpler-prompts" class="level4">
<h4 class="anchored" data-anchor-id="smaller-simpler-prompts">Smaller, simpler prompts</h4>
<p>This second approach splits the task into two smaller prompts that do each task separately.</p>
<p><strong>Prompt 1: Document classification</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource text number-lines code-with-copy"><code class="sourceCode"><span id="cb11-1">You're an expert document classifier. First, classify the document into the following categories:</span>
<span id="cb11-2"></span>
<span id="cb11-3">- Medical</span>
<span id="cb11-4">- Financial</span>
<span id="cb11-5">- Legal</span></code></pre></div>
<p><strong>Prompt N: Entity extraction (one for each category)</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource text number-lines code-with-copy"><code class="sourceCode"><span id="cb12-1">You're an expert in entity extraction in the &lt;CATEGORY&gt; domain. Your goal is to extract the entities from the document.</span>
<span id="cb12-2">...</span></code></pre></div>
</section>
</section>
<section id="principle-6-with-long-contexts-repeat-instructions" class="level3">
<h3 class="anchored" data-anchor-id="principle-6-with-long-contexts-repeat-instructions">Principle 6: With long contexts, repeat instructions</h3>
<p>LLMs often get confused when the context is too long and the instructions are complex. When context gets above a certain length, it’s better to repeat the instructions at the bottom of the prompt. Anthropic has reported up to <a href="https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/overview#essential-tips-for-long-context-prompts">30% performance improvement</a> when using this technique.</p>
<p>You can use the following structure:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource text number-lines code-with-copy"><code class="sourceCode"><span id="cb13-1">You're an expert in entity extraction in the &lt;CATEGORY&gt; domain. Your goal is to classify the document into the following categories: "Medical", "Financial", "Legal".</span>
<span id="cb13-2"></span>
<span id="cb13-3">&lt;VERY LONG CONTEXT&gt;</span>
<span id="cb13-4"></span>
<span id="cb13-5">Remember, your goal is to classify the document into the following categories: "Medical", "Financial", "Legal".</span></code></pre></div>
<p>When dealing with long contexts, I generally reiterate the objective at the bottom of the system and user prompts.</p>
</section>
</section>
<section id="other-advanced-prompting-techniques" class="level2">
<h2 class="anchored" data-anchor-id="other-advanced-prompting-techniques">Other advanced prompting techniques</h2>
<p>After you’ve mastered the basics, you’re 90% of the way there. There are other more advanced techniques that might also be worth trying out:</p>
<ol type="1">
<li><strong>Exemplar Selection KNN (ES-KNN):</strong> Instead of having a fixed selection of examples, you can embed the user query and the examples, and then use a KNN algorithm to select the most relevant examples. This has shown to <a href="https://arxiv.org/abs/2506.05614">improve the quality of the results</a> in many tasks.</li>
<li><strong>Self-consistency (SC):</strong> You use the model to generate multiple responses and then select the most consistent one by marginalizing over the noise. This has shown to <a href="https://arxiv.org/abs/2203.11171">boost the performance</a> of CoT prompting.</li>
<li><strong>Thread of Thought (ThoT):</strong> It’s a <a href="https://arxiv.org/abs/2311.08734">two-tiered prompting system</a> that first asks the LLM to do an analytical dissection of the context, step by step, and summarizing intermediate results. Then, it uses another prompt to distill the analysis into a final answer.</li>
</ol>
<p>There are more advanced techniques that I’m not going to cover here. This <a href="https://arxiv.org/abs/2506.05614">paper</a> by E.G. Santana et al is a good starting point.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This article is a short guide to help you write better prompts. Good prompt engineering can be summarized in 6 key principles:</p>
<ol type="1">
<li>Be clear and specific</li>
<li>Provide examples</li>
<li>Let models think</li>
<li>Structure prompts into sections and use clear delimiters</li>
<li>Split complex tasks into smaller steps</li>
<li>Repeat instructions when the context is long</li>
</ol>
<p>These principles will not solve all the problems in your agentic workflow or LLM-based applications. But they will help you get started.</p>
<p>I hope you found this article useful. If you have any questions or feedback, leave a comment below.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>It didn’t work, but I felt much better about myself.↩︎</p></li>
<li id="fn2"><p>I removed the thinking tokens for brevity.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2025,
  author = {Castillo, Dylan},
  title = {Prompt Engineering 101},
  date = {2025-06-26},
  url = {https://dylancastillo.co/posts/prompt-engineering-101.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2025" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2025. <span>“Prompt Engineering 101.”</span> June 26,
2025. <a href="https://dylancastillo.co/posts/prompt-engineering-101.html">https://dylancastillo.co/posts/prompt-engineering-101.html</a>.
</div></div></section></div> ]]></description>
  <category>llm</category>
  <category>openai</category>
  <category>anthropic</category>
  <category>gemini</category>
  <category>python</category>
  <guid>https://dylancastillo.co/posts/prompt-engineering-101.html</guid>
  <pubDate>Thu, 26 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Controlling randomness in LLMs: Temperature and Seed</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/seed-temperature-llms.html</link>
  <description><![CDATA[ 




<p>Temperature and seed are commonly used parameters when interacting with Large Language Models (LLMs). They’re also a source of confusion for many people. In this post, I’ll show you what they are and how they work.</p>
<p>Temperature is a parameter that controls the randomness of the output by scaling the logits of the tokens before applying the softmax function. Seed is also a parameter that controls the randomness of how the model selects tokens during text generation. It sets the initial state of the random number generator, which is then used for the sampling of the tokens during the generation process.</p>
<p>Temperature is available for most providers, while seed is only available for <a href="https://openai.com/api/">OpenAI</a>, Gemini on <a href="https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/inference">Vertex AI</a>, and open-weight models (that I know of).</p>
<p>Let’s get started.</p>
<section id="how-llms-generate-text" class="level2">
<h2 class="anchored" data-anchor-id="how-llms-generate-text">How LLMs generate text</h2>
<p>To understand how seed and temperature work, we first need to understand how LLMs generate text. Provided with a prompt, a model uses what’s called a <a href="https://huggingface.co/docs/transformers/en/generation_strategies">decoding strategy</a> to generate the next token.</p>
<p>There are many strategies, but for this post, we’ll focus on just two: <strong>greedy search</strong> and <strong>sampling</strong>.</p>
<p>In <strong>greedy search</strong>, the model picks the token with the highest probability at each step. In <strong>sampling</strong>, the model picks a token based on the probability distribution of the tokens in the vocabulary. In both cases, the model will calculate the probability of each token in the vocabulary<sup>1</sup>, and use that to pick the next token. Let’s see an example.</p>
<p>Take the following prompt:</p>
<blockquote class="blockquote">
<p>What’s the favorite dish of Chuck Norris?</p>
</blockquote>
<p>These might be the top 5 most likely next tokens:</p>
<table class="table">
<thead>
<tr class="header">
<th>Rank</th>
<th>Token</th>
<th>Probability</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>‘Dynamite’</td>
<td>0.5823</td>
</tr>
<tr class="even">
<td>2</td>
<td>‘Venom’</td>
<td>0.2891</td>
</tr>
<tr class="odd">
<td>3</td>
<td>‘Himself’</td>
<td>0.0788</td>
</tr>
<tr class="even">
<td>4</td>
<td>‘Radiation’</td>
<td>0.0354</td>
</tr>
<tr class="odd">
<td>5</td>
<td>‘You’</td>
<td>0.0144</td>
</tr>
</tbody>
</table>
<p>If the model uses <strong>greedy search</strong>, it will pick the token with the highest probability, which is ‘Dynamite’.</p>
<p>If it uses <strong>sampling</strong>, it will make a random selection based on those probabilities. So, the model has a 58% chance of picking ‘Dynamite’, a 29% chance of picking ‘Venom’, a 8% chance of picking ‘Himself’, a 4% chance of picking ‘Radiation’, and a 1% chance of picking ‘You’.</p>
</section>
<section id="temperature" class="level2">
<h2 class="anchored" data-anchor-id="temperature">Temperature</h2>
<p>Temperature is a parameter that usually goes from 0 to 1 or 0 to 2, and it’s used to influence the randomness of the output. It does so by scaling the logits of the tokens by the temperature value.</p>
<p>Logits are the raw scores that the model assigns to each token. To go from logits to probabilities, you must apply the softmax function:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BP%7D(w_i)%20=%20%5Ctext%7Bsoftmax%7D(z_i)%20=%20%5Cfrac%7Be%5E%7Bz_i%7D%7D%7B%5Csum_%7Bj=1%7D%5E%7Bn%7D%20e%5E%7Bz_j%7D%7D"></p>
<p>Where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?P(w_i)"> is the probability of token <img src="https://latex.codecogs.com/png.latex?w_i"></li>
<li><img src="https://latex.codecogs.com/png.latex?z_i"> is the logit for token <img src="https://latex.codecogs.com/png.latex?w_i"></li>
<li><img src="https://latex.codecogs.com/png.latex?n"> is the total number of possible tokens</li>
</ul>
<p>This is the non-scaled version of the probabilities. If you use Temperature (<img src="https://latex.codecogs.com/png.latex?T">) to scale the logits, you will change the probabilities of the tokens, as shown below:</p>
<p><img src="https://latex.codecogs.com/png.latex?P(w_i)%20=%20%5Cfrac%7Be%5E%7Bz_i%20/%20T%7D%7D%7B%5Csum_%7Bj=1%7D%5E%7Bn%7D%20e%5E%7Bz_j%20/%20T%7D%7D"></p>
<p>Even though you cannot know for sure how proprietary providers (OpenAI, Anthropic, etc.) implement temperature, you can get a good idea of how it works by looking at <a href="https://github.com/huggingface/transformers/blob/6bdd4ec95264e5d8f219cfe4ee29ea9b42474bb7/src/transformers/generation/logits_process.py#L231"><code>TemperatureLogitWrapper</code></a> in the <code>transformers</code> library.</p>
<p>Let’s see a practical example of how temperature affects the probabilities of the tokens:</p>
<div id="cell-4" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3">tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dynamite'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Venom'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Himself'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Radiation'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'You'</span>]</span>
<span id="cb1-4">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>])</span>
<span id="cb1-5"></span>
<span id="cb1-6">temperatures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.999999999</span>]</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> temperature <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> temperatures:</span>
<span id="cb1-9">    probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> temperature) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(np.exp(logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> temperature))</span>
<span id="cb1-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Temperature: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>temperature<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What's the favorite dish of Chuck Norris?"</span>)</span>
<span id="cb1-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rank | Token      | Probability"</span>)</span>
<span id="cb1-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-----|------------|------------"</span>)</span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, (token, prob) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(tokens, probs), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb1-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:4d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:10s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">' | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sum of probabilities: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(probs)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<p>This code simulates the impact of different temperature values on the next token probability. Given some initial logits and assuming this is the full vocabulary, we can calculate the probabilities of the tokens for a given temperature.</p>
<p>For a temperature of <strong>0.1</strong>, you get the following probabilities:</p>
<table class="table">
<thead>
<tr class="header">
<th>Rank</th>
<th>Token</th>
<th>Probability</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>‘Dynamite’</td>
<td>0.9991</td>
</tr>
<tr class="even">
<td>2</td>
<td>‘Venom’</td>
<td>0.0009</td>
</tr>
<tr class="odd">
<td>3</td>
<td>‘Himself’</td>
<td>0.0000</td>
</tr>
<tr class="even">
<td>4</td>
<td>‘Radiation’</td>
<td>0.0000</td>
</tr>
<tr class="odd">
<td>5</td>
<td>‘You’</td>
<td>0.0000</td>
</tr>
</tbody>
</table>
<p>For a temperature of <strong>2</strong>, you get the following probabilities:</p>
<table class="table">
<thead>
<tr class="header">
<th>Rank</th>
<th>Token</th>
<th>Probability</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>‘Dynamite’</td>
<td>0.4038</td>
</tr>
<tr class="even">
<td>2</td>
<td>‘Venom’</td>
<td>0.2846</td>
</tr>
<tr class="odd">
<td>3</td>
<td>‘Himself’</td>
<td>0.1486</td>
</tr>
<tr class="even">
<td>4</td>
<td>‘Radiation’</td>
<td>0.0996</td>
</tr>
<tr class="odd">
<td>5</td>
<td>‘You’</td>
<td>0.0635</td>
</tr>
</tbody>
</table>
<p>You can see that for lower temperature values, the model becomes more deterministic. For temperature 0.1, the probability of picking ‘Dynamite’ is &gt;99.9%, while for temperature 2, it’s only 40%.</p>
<p>In essence, temperature impacts the randomness of the output by changing the probabilities of selecting the next token. This should give you a good idea of how temperature works. But let’s try it with a real LLM instead of a simulation.</p>
<p>First, let’s import the required libraries and load the model.</p>
<div id="cell-6" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForCausalLM, AutoTokenizer</span>
<span id="cb2-5"></span>
<span id="cb2-6">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unsloth/Qwen3-1.7B"</span></span>
<span id="cb2-7">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(model_name)</span>
<span id="cb2-8">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForCausalLM.from_pretrained(</span>
<span id="cb2-9">    model_name,</span>
<span id="cb2-10">    torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span>,</span>
<span id="cb2-11">    device_map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span></span>
<span id="cb2-12">)</span></code></pre></div>
</div>
<p>For the sake of this example, we’ll use <code>unsloth/Qwen3-1.7B</code>. But what you see here is applicable to most LLMs. We’ll use <code>generate_text</code> as our text generation function.</p>
<div id="cell-8" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_text(prompt, temperature, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, print_top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> seed:</span>
<span id="cb3-3">        torch.manual_seed(seed)</span>
<span id="cb3-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available():</span>
<span id="cb3-5">            torch.cuda.manual_seed(seed)</span>
<span id="cb3-6"></span>
<span id="cb3-7">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb3-8">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: prompt}</span>
<span id="cb3-9">    ]</span>
<span id="cb3-10">    text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.apply_chat_template(</span>
<span id="cb3-11">        messages,</span>
<span id="cb3-12">        tokenize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb3-13">        add_generation_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb3-14">        enable_thinking<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-15">    )</span>
<span id="cb3-16">    model_inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer([text], return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>).to(model.device)</span>
<span id="cb3-17"></span>
<span id="cb3-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> temperature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-19">        model_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-20">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"do_sample"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb3-21">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temperature"</span>: temperature <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> temperature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.9999999</span>,</span>
<span id="cb3-22">        }</span>
<span id="cb3-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-24">        model_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-25">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"do_sample"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb3-26">        }</span>
<span id="cb3-27">    outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.generate(</span>
<span id="cb3-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>model_inputs,</span>
<span id="cb3-29">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>model_params,</span>
<span id="cb3-30">        max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb3-31">        output_scores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb3-32">        return_dict_in_generate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb3-33">        pad_token_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tokenizer.eos_token_id</span>
<span id="cb3-34">    )</span>
<span id="cb3-35"></span>
<span id="cb3-36">    output_token_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs.sequences[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tolist()</span>
<span id="cb3-37">    selected_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.decode([output_token_id])</span>
<span id="cb3-38"></span>
<span id="cb3-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> print_top_k:</span>
<span id="cb3-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> selected_token</span>
<span id="cb3-41">    </span>
<span id="cb3-42">    probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.softmax(outputs.scores[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-43">    top_k_probs, top_k_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.topk(probs, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb3-44"></span>
<span id="cb3-45">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top-10 most likely tokens:"</span>)</span>
<span id="cb3-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, (prob, idx) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(top_k_probs, top_k_indices)):</span>
<span id="cb3-47">        token_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.decode([idx.item()])</span>
<span id="cb3-48">        is_selected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"← SELECTED"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> idx.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> output_token_id <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb3-49">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>token_text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">' (prob: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, logit: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>outputs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>scores[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][idx.item()]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_selected<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-50"></span>
<span id="cb3-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> selected_token</span></code></pre></div>
</div>
<p>On a high-level, this function takes a prompt, a temperature value, and a seed, and returns the top 10 most likely tokens with their probabilities and logits. The implementation looks a bit complicated, so let’s break it down.</p>
<ol type="1">
<li><p><strong>Lines 2 to 16</strong>: It takes a prompt, a temperature value, and optionally a seed. If a seed is provided, it sets the random number generator to that value. Then, it processes the prompt to create the required input for the model.</p></li>
<li><p><strong>Lines 18 to 37</strong>: It chooses to sample from the model or not, based on the temperature value. If temperature is 0, the model will use to a greedy search strategy.</p></li>
<li><p><strong>Lines 39 to 50</strong>: It returns the completion token and optinally prints the top 10 most likely tokens with their probabilities and logits.</p></li>
</ol>
<p>Similar to what you saw in the previous example, you can try low and high temperature values.</p>
<p>This is what you get for a temperature of 0.1:</p>
<div id="cell-10" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tell me a joke about dogs"</span>, temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, print_top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Top-10 most likely tokens:
  1. 'Why' (prob: 1.0000, logit: 330.0000) ← SELECTED
  2. '!' (prob: 0.0000, logit: -inf) 
  3. '"' (prob: 0.0000, logit: -inf) 
  4. '#' (prob: 0.0000, logit: -inf) 
  5. '$' (prob: 0.0000, logit: -inf) 
  6. '%' (prob: 0.0000, logit: -inf) 
  7. '&amp;' (prob: 0.0000, logit: -inf) 
  8. ''' (prob: 0.0000, logit: -inf) 
  9. '(' (prob: 0.0000, logit: -inf) 
  10. ')' (prob: 0.0000, logit: -inf) </code></pre>
</div>
</div>
<div id="cell-11" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tell me a joke about dogs"</span>, temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.99</span>, print_top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Top-10 most likely tokens:
  1. 'Why' (prob: 0.5742, logit: 16.5829) ← SELECTED
  2. 'Sure' (prob: 0.3939, logit: 16.2060) 
  3. 'Here' (prob: 0.0319, logit: 13.6935) 
  4. '!' (prob: 0.0000, logit: -inf) 
  5. '"' (prob: 0.0000, logit: -inf) 
  6. '#' (prob: 0.0000, logit: -inf) 
  7. '$' (prob: 0.0000, logit: -inf) 
  8. '%' (prob: 0.0000, logit: -inf) 
  9. '&amp;' (prob: 0.0000, logit: -inf) 
  10. ''' (prob: 0.0000, logit: -inf) </code></pre>
</div>
</div>
<p>You should see similar results. For the “Tell me a joke about dogs” prompt, when using a temperature of 0.1, the model had ~100% probability of picking ‘Why’, while for temperature 2, it’s only 57%.</p>
<p>Note, that when temperature is 0, the model will use to a greedy search strategy, which is the same as picking the most likely token. So no sampling is done and results are deterministic.</p>
</section>
<section id="seed" class="level2">
<h2 class="anchored" data-anchor-id="seed">Seed</h2>
<p>The seed parameter controls the randomness of how a model selects tokens. It sets the initial state for the random number generator used in the token sampling process.</p>
<p>Let’s revisit the example from the previous section to see this in action. By setting the seed to a fixed value, you ensure the generation process is deterministic. This means you will get an identical result on every run, provided all other parameters (like temperature) remain the same in those runs.</p>
<p>We can start by setting our seed to 42 and temperature to 1 to verify which token is generated.</p>
<div id="cell-15" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">generate_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tell me a joke about dogs"</span>, temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, print_top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Top-10 most likely tokens:
  1. 'Why' (prob: 0.6792, logit: 33.0000) 
  2. 'Sure' (prob: 0.3208, logit: 32.2500) ← SELECTED
  3. '!' (prob: 0.0000, logit: -inf) 
  4. '"' (prob: 0.0000, logit: -inf) 
  5. '#' (prob: 0.0000, logit: -inf) 
  6. '$' (prob: 0.0000, logit: -inf) 
  7. '%' (prob: 0.0000, logit: -inf) 
  8. '&amp;' (prob: 0.0000, logit: -inf) 
  9. ''' (prob: 0.0000, logit: -inf) 
  10. '(' (prob: 0.0000, logit: -inf) </code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>'Sure'</code></pre>
</div>
</div>
<p>In this case, the model selected “Sure” as the next token, even though its probability is lower than ‘Why’. Now, we can verify that this stays the same over multiple runs.</p>
<div id="cell-17" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb11-3">    token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tell me a joke about dogs"</span>, temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb11-4">    tokens.append(token)</span>
<span id="cb11-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(tokens)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(tokens))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'Sure'}</code></pre>
</div>
</div>
<p>This code runs the text generation process 100 times and verifies that “Sure” was picked in all runs. Next, we should verify that this consistency is lost when we omit the seed parameter.</p>
<div id="cell-19" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb13-3">    token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tell me a joke about dogs"</span>, temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-4">    tokens.append(token)</span>
<span id="cb13-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(tokens)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(tokens))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'Sure', 'Why'}</code></pre>
</div>
</div>
<p>In this case, you see that after the 100 generations, the model picked two different tokens: ‘Sure’ and ‘Why’. This is expected due to not setting a seed.</p>
<p>You can also use test this with a propietary model. Let’s try it with <code>gpt-4.1-nano</code> from OpenAI.</p>
<div id="cell-21" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> openai</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb15-4"></span>
<span id="cb15-5">load_dotenv()</span>
<span id="cb15-6"></span>
<span id="cb15-7">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> openai.OpenAI()</span>
<span id="cb15-8"></span>
<span id="cb15-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_text_openai(prompt, temperature, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, print_top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb15-10">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb15-11">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4.1-nano"</span>,</span>
<span id="cb15-12">        messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: prompt}],</span>
<span id="cb15-13">        temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>temperature,</span>
<span id="cb15-14">        seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed,</span>
<span id="cb15-15">        max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb15-16">        logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb15-17">        top_logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb15-18">    )</span>
<span id="cb15-19">    selected_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content</span>
<span id="cb15-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> print_top_k:</span>
<span id="cb15-21">        logprobs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].logprobs.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].top_logprobs</span>
<span id="cb15-22">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 most likely tokens:"</span>)</span>
<span id="cb15-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, token_info <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(logprobs):</span>
<span id="cb15-24">            token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> token_info.token</span>
<span id="cb15-25">            logprob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> token_info.logprob</span>
<span id="cb15-26">            prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(np.exp(logprob)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb15-27">            token_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">': </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>logprob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span></span>
<span id="cb15-28">            is_selected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"← SELECTED"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> token_info.token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> selected_token <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb15-29">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>token_text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_selected<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> selected_token</span></code></pre></div>
</div>
<p>Similar to the previous function, you provide a prompt, a temperature value, and a seed, and the model will return a completion token and will print the top 10 most likely tokens.</p>
<p>In this case, instead of providing you with the logits, OpenAI will provide you with <code>logprobs</code> which are the logaritmic probabilities of the tokens:</p>
<p><img src="https://latex.codecogs.com/png.latex?logprob(w_i)%20=%20ln(P(w_i))%20=%20ln(%5Cfrac%7Be%5E%7Bz_i%7D%7D%7B%5Csum_%7Bj=1%7D%5E%7Bn%7D%20e%5E%7Bz_j%7D%7D)%20"></p>
<p>First, let’s check the completion token we get for a temperature of 1 and a seed of 42.</p>
<div id="cell-23" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1">token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_text_openai(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tell me a joke about dogs"</span>, temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, print_top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Top 10 most likely tokens:
1. 'Why': 59.2600 (-0.5232) ← SELECTED
2. 'Sure': 40.7300 (-0.8982) 
3. ' Why': 0.0000 (-10.6482) 
4. ' sure': 0.0000 (-11.0232) 
5. ' why': 0.0000 (-11.2732) 
6. '为什么': 0.0000 (-11.6482) 
7. ' Sure': 0.0000 (-11.8982) 
8. 'Pourquoi': 0.0000 (-12.2732) 
9. 'why': 0.0000 (-12.3982) 
10. 'sure': 0.0000 (-12.6482) </code></pre>
</div>
</div>
<p>In this case, we get ‘Why’ as the completion token. You can see that the top 10 most likely tokens are not the same as the ones we got with <code>Qwen3-1.7B</code>. This is expected, as the model is different.</p>
<p>Then, we can try to generate 100 tokens with a temperature of 1 and a seed of 42.</p>
<div id="cell-25" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1">tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb18-3">    token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_text_openai(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tell me a joke about dogs"</span>, temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb18-4">    tokens.append(token)</span>
<span id="cb18-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(tokens)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(tokens))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'Why'}</code></pre>
</div>
</div>
<p>Similar to the previous example, we run 100 generations with the same seed and temperature and check if the completion token is the same.</p>
<p>This should <em>generally</em> work, but OpenAI doesn’t guarantee that the same seed will always produce the same output. It might occur that your request is handled by a model with a <a href="https://cookbook.openai.com/examples/reproducible_outputs_with_the_seed_parameter">different configuration</a>, and you’ll get different results.</p>
<p>You can also verify that not using a seed will result in different tokens.</p>
<div id="cell-27" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1">tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb20-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb20-3">    token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_text_openai(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tell me a joke about dogs"</span>, temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-4">    tokens.append(token)</span>
<span id="cb20-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(tokens)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb20-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(tokens))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'Sure', 'Why'}</code></pre>
</div>
</div>
<p>Now, you can see that the output is not the same in all runs. Some runs picked “Why”, and others picked “Sure”.</p>
<p>In essence, seed influences the output by setting the initial state of the random number generator, which is then used for the sampling of the tokens during the generation process.</p>
</section>
<section id="top-k-and-top-p" class="level2">
<h2 class="anchored" data-anchor-id="top-k-and-top-p"><code>top-k</code> and <code>top-p</code></h2>
<p>In addition to temperature, there are two other parameters that are commonly used to control the randomness of the output of a language model: <code>top-k</code> and <code>top-p</code>.</p>
<section id="top-k" class="level3">
<h3 class="anchored" data-anchor-id="top-k">top-k</h3>
<p>Top-k sampling is a technique that limits the number of tokens that can be selected from the vocabulary. It does so by keeping only the top-k tokens with the highest probabilities. This reduces the <a href="https://huyenchip.com/2024/01/16/sampling.html#top_k">computational workload</a> by getting the top-k logits and then calculating the softmax over these instead of using the complete vocabulary.</p>
<p>This parameter isn’t available for OpenAI models. They provide a <code>top_logprobs</code> parameter, but it’s not the same as top-k sampling. It’s a parameter that returns the top N most likely tokens with their logprobs, but it doesn’t change the sampling process.</p>
</section>
<section id="top-p" class="level3">
<h3 class="anchored" data-anchor-id="top-p">top-p</h3>
<p>Top-p sampling is a technique that limits the number of tokens that can be selected from the vocabulary. It does so including the smallest set of tokens whose combined probability ≥ P. For example, top P = 0.9 picks from the smallest group of tokens that together cover at least 90% probability.</p>
<p>This parameter is available for most providers.</p>
<div id="cell-30" class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1">generate_text_openai(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tell me a joke about dogs"</span>, top_p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span>, print_top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Top 10 most likely tokens:
1. 'Why': 59.2600 (-0.5232) ← SELECTED
2. 'Sure': 40.7300 (-0.8982) 
3. ' Why': 0.0000 (-10.6482) 
4. ' sure': 0.0000 (-11.0232) 
5. ' why': 0.0000 (-11.2732) 
6. '为什么': 0.0000 (-11.6482) 
7. ' Sure': 0.0000 (-11.8982) 
8. 'Pourquoi': 0.0000 (-12.2732) 
9. 'why': 0.0000 (-12.3982) 
10. 'sure': 0.0000 (-12.6482) </code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>'Why'</code></pre>
</div>
</div>
</section>
</section>
<section id="seed-and-temperature-in-practice" class="level2">
<h2 class="anchored" data-anchor-id="seed-and-temperature-in-practice">Seed and temperature in practice</h2>
<p>Now that you understand how seed and temperature work, here are some things to keep in mind when using them:</p>
<ol type="1">
<li><code>seed</code> is only available for <code>OpenAI</code>, <code>Gemini</code> on <code>Vertex AI</code>, and open-weight models.</li>
<li>To get the most deterministic output for a given prompt, set temperature to 0. This minimizes randomness.</li>
<li>If you want creative results that are still reproducible, set temperature to a value greater than 0 and use a fixed seed. This allows for varied outputs that you can generate again.</li>
<li>If you don’t need reproducible results and want unique outputs on every run, you can omit the seed parameter entirely.</li>
<li>Be aware that even if you set a temperature of 0 and a seed, outputs are not guaranteed to be identical. Providers <a href="https://platform.openai.com/docs/advanced-usage#reproducible-outputs">might change model configurations</a> that might impact the output. For OpenAI models, you can monitor such changes by keeping track of the <a href="https://platform.openai.com/docs/api-reference/backward-compatibility">system_fingerprint</a> provided in the responses.</li>
</ol>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this post, we explored how the temperature and seed parameters control the output of Large Language Models.</p>
<p>You learned that temperature adjusts the level of randomness: low values (near 0) produce more predictable, deterministic outputs, while high values (near 1) encourage more creative and varied results. In contrast, the seed makes the generation process reproducible. While the specific seed value isn’t important, fixing it ensures you get the same output for a given prompt and set of parameters.</p>
<p>Finally, remember that while temperature is a near-universal setting, seed is only available (at the time of writing) for OpenAI, Gemini on Vertex AI, and open-weight models.</p>
<p>I hope you found this post useful. If you have any questions, let me know in the comments below.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Modern LLMs often have a vocabulary of 100k+ tokens↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2025,
  author = {Castillo, Dylan},
  title = {Controlling Randomness in {LLMs:} {Temperature} and {Seed}},
  date = {2025-06-25},
  url = {https://dylancastillo.co/posts/seed-temperature-llms.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2025" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2025. <span>“Controlling Randomness in LLMs:
Temperature and Seed.”</span> June 25, 2025. <a href="https://dylancastillo.co/posts/seed-temperature-llms.html">https://dylancastillo.co/posts/seed-temperature-llms.html</a>.
</div></div></section></div> ]]></description>
  <category>llm</category>
  <category>openai</category>
  <category>python</category>
  <guid>https://dylancastillo.co/posts/seed-temperature-llms.html</guid>
  <pubDate>Wed, 25 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>2024: Personal Snapshot</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/2024-personal-snapshot.html</link>
  <description><![CDATA[ 




<p>This is my annual review. I use it as a way to reflect on the past year and get a snapshot of “who I am” at the time of writing.</p>
<p>If it’s me rereading this, welcome back. This is Dylan from 2024.</p>
<p>In previous snapshots, I listed what went well and what didn’t. This year, I’m trying something new: a chronological approach. 2024 went through three distinct phases, and I found it easier to reflect on each one.</p>
<section id="early-2024" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="early-2024">Early 2024</h2>
<p>This was my “I’m lost, and I don’t know what to do” phase.</p>
<p>In my last snapshot, I said that I was going to focus on building a consulting practice in 2024. Then I came up with a new product idea 😅 and spent a big chunk of the first two months of the year building a prototype.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2024-personal-snapshot/aitheneum.webp" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="At least I generated some cool AI book covers."><img src="https://dylancastillo.co/posts/images/2024-personal-snapshot/aitheneum.webp" class="img-fluid figure-img" alt="At least I generated some cool AI book covers."></a></p>
<figcaption class="margin-caption">At least I generated some cool AI book covers.</figcaption>
</figure>
</div>
<p><a href="https://aitheneum.iwanalabs.com/">AItheneum</a><sup>1</sup> is a tool that helps you read classic philosophy books by making them easier to understand using AI. I pitched it as a way to make classic books more accessible to modern readers.</p>
<p>I had fun working on it, but it wasn’t really solving anyone’s problem. It was a vitamin, not a painkiller. By the time I released it, it was clear nobody cared about it (not even me!).</p>
<p>During this time, I was also contributing to <a href="https://github.com/django-components/django-components">django-components</a> and half-assing talking to potential clients for freelance work and doing cold outreach to get clients. The former was fun, the latter wasn’t.</p>
<p>Later in the year, after reading Alex Hormozi’s <a href="https://www.amazon.com/100M-Leads-Strangers-Stuff-Acquisition-com-ebook/dp/B0CFDR3TYV">100M Leads</a>, I realized that cold outreach at this stage was mostly a waste of time. When you’re just starting out, you should rely on warm introductions or referrals. If you haven’t built credibility yet, you’ll waste a lot of time trying to convince strangers to work with you.</p>
<p>I essentially spent the first two months of the year focusing on the wrong things.</p>
<p>On a more positive note, I was also doing open mic sets almost every week. I’m not sure if this was “good”, but I had a lot of fun performing stand-up comedy.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2024-personal-snapshot/jokes.webp" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="My last stand-up set"><img src="https://dylancastillo.co/posts/images/2024-personal-snapshot/jokes.webp" class="img-fluid figure-img" alt="My last stand-up set"></a></p>
<figcaption class="margin-caption">My last stand-up set</figcaption>
</figure>
</div>
<p>As you might expect, I bombed a few times. But I also had a few good sets. A professional (but not famous) comedian even invited me to open for him at a show in a nearby city. I didn’t go, but it was flattering.</p>
<p>One thing that surprised me about stand-up comedy is that it follows a somewhat scientific process. Your joke is a hypothesis about what your audience will find funny. You test it by performing it in front of people. If it doesn’t work, you adjust it and test it again. You do this over and over until you find something that works.</p>
<p>The other thing I liked about it is that it’s very meritocratic. If you’re funny, you’ll get laughs. There’s no way to fake it. It’s very easy to figure out who’s good and who’s not. You might not like someone’s style, but if they’re good you cannot deny it.</p>
<p>However, after a few months, I realized it wasn’t sustainable:</p>
<ol type="1">
<li>To get good at stand-up, you have to make time for it. That means writing everyday, and performing as often as possible.</li>
<li>Open mics take a lot of time. To practice an 8 minute set, I’d often have to commute for 1 hour and stay for 1-2 hours of show (during which I did my 8 minutes).</li>
<li>As a beginner, you’ll only get spots during weekday evenings. Which isn’t great if you want to get enough sleep to be productive the next day.</li>
</ol>
<p>Even so, I didn’t fully decide to quit until we had a health crisis at home. My wife and I weren’t prioritizing our health in the first months of the year, and it took its toll.</p>
<p>Stand-up was fun, but it was distracting me from more important things. So I stopped.</p>
<p>I’m not sad or regretful about it, I’m happy that I’ve tried it and that I’ve learned that it’s not what I want to do right now. I’d love to return to it in the future, once I have less pressing things to focus on.</p>
</section>
<section id="mid-2024" class="level2">
<h2 class="anchored" data-anchor-id="mid-2024">Mid 2024</h2>
<p>This was the “work hard and mental health struggles” phase.</p>
<p>I worked with clients on AI projects in various industries, including legal, construction, consumer packaged goods, and finance. I also started blogging again.</p>
<p>I frequently put in 12-hour workdays and worked most weekends. I stopped going to the gym, and switched to home workouts. I rarely went to social events. Life passed by rapidly, and looking back, it all feels like a blur.</p>
<p>I struggled with my mental health. I experienced episodes of depression and anxiety.</p>
<p>Depression has been part of my life for the past twenty years. Though, I’m much better at dealing with it than I used to be. I’ve learned to recognize early warning signs and adjust my approach accordingly.</p>
<p>For that reason, I try to keep track of the “bad days”. Because when they occur too often, my brain is telling me I should take action. During this phase of the year, I had a lot more of those than I’d like.</p>
<p>Eventually, things settled down. I became more conscious of my own limits. I learned to regulate the intensity I put into things. I could push myself hard when I needed to, but also learned to feel comfortable with taking a break and not do anything when I needed to.</p>
<p>I also met some clients in person. While I’m a fan of remote work, seeing people face to face makes you more empathetic toward the people you’re working with. This was a lot more fun than I expected.</p>
<p>During this time I also hired external support to help me develop some of my product ideas and support my consulting work.</p>
</section>
<section id="late-2024" class="level2">
<h2 class="anchored" data-anchor-id="late-2024">Late 2024</h2>
<p>This was the “force myself to stay focused and in motion” phase.</p>
<p>The last few months were still intense, but less focused. I was working with clients while also making time to think about the future. I had a few moments of “what if I drop the consulting thing and go back to product development?”, but decided against it every time.</p>
<p>I did more sales outreach, managed multiple projects, and kept writing blog posts. I wrote a <a href="https://dylancastillo.co/posts/say-what-you-mean-sometimes.html">post about using Structured Outputs in LLMs</a> and fixed a security vulnerability in a <a href="https://github.com/instructor-ai/instructor/pull/1168">Python package</a> that gets more than 1M downloads per month.</p>
<p>I also traveled to Venezuela for the first time in eight years. It was both wonderful and unsettling.</p>
<p>During the first week of the trip, we stayed in a nice hotel in <a href="https://en.wikipedia.org/wiki/Margarita_Island">Margarita</a>, with great food, gym, pools, and a private beach. But if you talked with anyone working at the hotel, you’d learn they were making less than $200/month and did not routinely have access to clean water or electricity. After almost a decade of living in Europe, it felt strange to witness once again such a disparity.</p>
<p>I also met old friends and family there. It made me nostalgic for my childhood and university days, but it also made me realize how much I’ve changed since then. When I was a teenager, I often thought I might end up alone and without friends, as I had extreme social anxiety. Now I’m married, have a great group of friends, and can even tell jokes in public!</p>
<p>After I came back from Venezuela, I started going through more academic research and refreshing my <a href="https://mathacademy.com/">math skills</a>. I’ve always felt that some of my base math skills were lacking and I wanted to fix that. So far, it’s going great.</p>
<p>My father-in-law also moved with us for this part of the year. It was a big change for us, but it’s been a great experience.</p>
</section>
<section id="stats-photos" class="level2">
<h2 class="anchored" data-anchor-id="stats-photos">Stats &amp; Photos</h2>
<p>Here are the stats for the year:</p>
<ul>
<li><strong>💻 Code and blogging</strong>:
<ul>
<li>I committed code on 322 out of 365 days.</li>
<li>I wrote 14 blog posts.</li>
</ul></li>
<li><strong>💰 Financials</strong>:
<ul>
<li>Revenue doubled from last year. So far, my best year.</li>
<li>Costs increased by 155% from last year.</li>
<li>66% of my revenue comes from time-based billing (daily, hourly).</li>
<li>My biggest client represented 33% of my revenue.</li>
</ul></li>
<li><strong>📝 Sales</strong>:
<ul>
<li>I worked on 9 projects with 7 different clients.</li>
<li>I got 3 new clients.</li>
<li>Success rate of proposals: 67%.</li>
</ul></li>
<li><strong>💪 Health &amp; Fitness</strong>:
<ul>
<li>112 strength training sessions (2.2 sessions/week).</li>
<li>3,488 minutes of cardio (~60 minutes/week).</li>
<li>VO2 max: 46 ml/kg/min.</li>
<li>RHR: 57 bpm.</li>
</ul></li>
</ul>
<p>These are some photos from the year:</p>
<div class="custom-gallery-container" data-images="[
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/27394352-8BDD-47EF-AB8D-5B7EEABDD1BE_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;A good stand-up set&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/9BAE2624-4DB5-4D53-8F74-922E25AE2E11_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;A so-so stand-up set&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/281F5B0F-07D6-478C-83E9-73D136A31088_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;The day Edu and Leo decided to never do Airsoft again&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/24E61471-8D7B-4F37-992C-F3428FB46DCA_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Morocco ❤️&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/4BCF78E3-3FE8-475B-AFB2-D2E9AC358234_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Old friends 1&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/0CA7E896-69E6-4A2D-BC49-67B3DB5F6618_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Primos&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/6D90D345-B819-4AD3-865E-249B86EAB6D3_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Home team&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/08C29CCA-8FCF-4794-8A13-FA31F97CA59F_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Venezuela, family 1&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/FDC40C8A-EA95-42D5-A927-8ED1801AD182_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Venezuela, Margarita 😎&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/AE334898-D23D-4F3D-9004-FC1B489A33C9_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Venezuela, old friends 2&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/451B688D-070E-4E92-BB27-25170A8973A4_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Venezuela, old friends 3&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/D38E3BF7-4BAC-47B2-83BB-E2CD7216D2E3_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Venezuela, humming-birds 🐦&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/EC982C3C-B649-4FE9-8E31-812AB9888C32_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Venezuela, Home&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/D7F82391-78E2-4BDA-8B17-5584DF01F911_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Venezuela, Zena ❤️&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/F8ECF562-9F0B-4B9E-9B0C-B922D0B826A9_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Venezuela, Napo's getting old 😢&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/CE02055B-B5A9-454A-9736-B2D86DD17AA7_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;The Colombiano Libertario&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/29408D6A-A961-4004-853A-2959C7A5E636_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;High 🥩 Poker&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/A3D6DCF0-D65B-40C6-A630-FA219AAC0981_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Tía Mary ❤️&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/2EB0D748-F8AF-49F9-BEF0-3906D7AB017E_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Family 2&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/PHOTO-2024-12-20-10-02-34.jpg&quot;, &quot;caption&quot;: &quot;Old friends 4&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/609AB45C-8EFC-4DC6-9BFD-241245DD2269_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Friends (Luciano's farewell 🇦🇷)&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/20A01D83-C0AB-4460-9484-6F32A72E703D_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Family 3&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/E7FECC11-00B8-4124-9519-82F9ED68C0ED_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;The Dukes of Bocangel ❤️&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/6D91F2D8-D302-4467-A3DC-681CD5D372AE_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Karaoke 😂&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/2B2543F7-F99E-4D44-BCEA-45AB683A55BF_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Last run of the year 1&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/89B92C0E-C70F-4660-A0A4-3DA2EEA54B63_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;Last run of the year 2&quot;},
       {&quot;url&quot;: &quot;https://s3.eu-west-1.amazonaws.com/images.dylancastillo.co/2024-personal-snapshot/C9917576-0866-46C3-A500-1E680A24E24F_1_105_c.jpeg&quot;, &quot;caption&quot;: &quot;❤️&quot;}
     ]">
<img class="gallery-image" src="" alt="">
<div class="gallery-caption">

</div>
</div>
<p>I don’t like taking pictures, but looking back, I regret not capturing more key moments from the year. That’s a small lesson I’ll take into next year.</p>
</section>
<section id="lessons-learned" class="level2">
<h2 class="anchored" data-anchor-id="lessons-learned">Lessons Learned</h2>
<p>The three biggest lessons I took away from 2024 are focus, intensity, and action.</p>
<p><strong>Focus</strong> is about figuring out what are the right things to prioritize. It’s easy to say that, but it’s hard to do. Life is full of distractions, and it’s easy to get lost in the noise.</p>
<p>When I’m not sure what to do, I use one heuristic that works well: I prioritize things that will help me on my way regardless of their outcome. For example, if I dedicate more time to writing technical posts, I learn through the act of writing, but I also attract clients who are interested in those posts. The same with sales: I might not get a client from a sales call, but I learn a lot about the process and get better at it. So, regardless of the outcome, I win.</p>
<p><strong>Intensity</strong> is about working hard and taking ownership. This year I handled more work than ever. My brain fought back. At times I felt anxious, depressed, out of energy, and unable to focus. Eventually, my brain accepted that I wouldn’t back down. It stopped fighting against me and began working for me.</p>
<p>It’s not pretty. It’s deeply uncomfortable. But it’s worth it.</p>
<p><strong>Action</strong> is about staying in motion. Being too busy is better than being too idle. When you’re busy, you’re constantly learning, forced to prioritize, and often become more creative under pressure.</p>
<p>I used to think that being “too busy” would prevent me from focusing on the right things. But I eventually realized it was the other way around. The busier I got, the clearer my priorities became. I learned more, and the better I became at what I was doing, the more time I had for the things I really wanted to do.</p>
<p>Being busy made me better and more productive.</p>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s Next?</h2>
<p>I’ve realized I’m not great at predicting what I’ll want to do, nor am I a great planner.</p>
<p>Right now, my biggest priority is growing my consulting practice. I also finally found a painkiller product idea that I’ve been slowly working on. If I find enough traction, I’ll pivot to it. But until then, my focus is on consulting.</p>
<p>The only thing I’m sure is that I’ll keep myself busy.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>yes, I know, what a terrible name.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2025,
  author = {Castillo, Dylan},
  title = {2024: {Personal} {Snapshot}},
  date = {2025-01-05},
  url = {https://dylancastillo.co/posts/2024-personal-snapshot.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2025" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2025. <span>“2024: Personal Snapshot.”</span> January
5, 2025. <a href="https://dylancastillo.co/posts/2024-personal-snapshot.html">https://dylancastillo.co/posts/2024-personal-snapshot.html</a>.
</div></div></section></div> ]]></description>
  <category>personal-snapshot</category>
  <guid>https://dylancastillo.co/posts/2024-personal-snapshot.html</guid>
  <pubDate>Sun, 05 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The good, the bad, and the ugly of Gemini’s structured outputs</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/gemini-structured-outputs.html</link>
  <description><![CDATA[ 




<p>For a long time, I didn’t pay much attention to the idea that structured outputs could have an impact on the performance of LLMs. But after reading <a href="https://arxiv.org/abs/2408.02442">Let Me Speak Freely?</a> and <a href="https://blog.dottxt.co/say-what-you-mean.html">.txt’s rebuttal</a>, I started to question my assumptions.</p>
<p>I decided to run some benchmarks myself using popular proprietary models, starting with <a href="https://dylancastillo.co/posts/say-what-you-mean-sometimes.html"><em>GPT-4o-mini</em></a>. During my analysis, I found that structured outputs did, in fact, decrease performance on some tasks.</p>
<p>After that, I was curious to see if the same was true for <em>Gemini 1.5 Flash</em>. This time, the answer wasn’t so straightforward, which is why I decided to write a separate post about it. In the process, I ran into an issue in Gemini’s Generative AI SDK that can break your application if you’re not careful.</p>
<p>In this article, I’ll share the results from running various benchmarks for <em>Gemini 1.5 Flash</em> comparing structured and unstructured outputs and the learnings I had along the way.</p>
<p>You can find the full code to run the benchmarks in this <a href="https://github.com/dylanjcastillo/blog/tree/main/_extras/gemini-structured-outputs">GitHub repository</a>.</p>
<section id="results-tldr" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="results-tldr">Results (TLDR)</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Google recently released a new <a href="https://github.com/googleapis/python-genai">Python SDK for Gemini</a>, which seems to address the automatically sorting keys issue.</p>
</div>
</div>
<p>If you’re in a hurry, here are my key findings:</p>
<ul>
<li><strong>The good</strong>: Overall, Gemini’s structured outputs performed on par with unstructured outputs.<sup>1</sup></li>
<li><strong>The bad</strong>: This only holds for the less rigid interpretation of “structured outputs”. When testing constrained decoding specifically, Gemini’s structured outputs performed worse than unstructured outputs.</li>
<li><strong>The ugly</strong>: Function calling and constrained decoding have a big design flaw. The order of the keys specified in the schema is not preserved when using the <a href="https://ai.google.dev/">Generative AI Python SDK</a>. This will break chain-of-thought reasoning in your applications unless you use a workaround (that only works for constrained decoding).</li>
</ul>
<p>The figure below shows the overall results for <em>Gemini 1.5 Flash</em>:</p>
<div id="cell-fig-gemini-flash-best" class="cell page-columns page-full" data-execution_count="1">
<div id="fig-gemini-flash-best" class="cell-output cell-output-display quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-gemini-flash-best-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div>                            <div id="8839e563-ec82-440c-897f-8c2d34e8d122" class="plotly-graph-div" style="height:400px; width:100%;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("8839e563-ec82-440c-897f-8c2d34e8d122")) {                    Plotly.newPlot(                        "8839e563-ec82-440c-897f-8c2d34e8d122",                        [{"hoverinfo":"skip","name":"Natural Language","text":["94.84","82.67","97.15"],"textfont":{"size":10},"textposition":"outside","texttemplate":"%{text:.2f}%","x":["GSM8k","Last Letter","Shuffled Objects"],"y":[94.84,82.67,97.15],"type":"bar"},{"hoverinfo":"skip","name":"JSON-Schema","text":["93.63","81.33","86.18"],"textfont":{"size":10},"textposition":"outside","texttemplate":"%{text:.2f}%","x":["GSM8k","Last Letter","Shuffled Objects"],"y":[93.63,81.33,86.18],"type":"bar"},{"hoverinfo":"skip","name":"JSON-Prompt","text":["94.16","82.0","98.37"],"textfont":{"size":10},"textposition":"outside","texttemplate":"%{text:.2f}%","x":["GSM8k","Last Letter","Shuffled Objects"],"y":[94.16,82.0,98.37],"type":"bar"}],                        {"template":{"data":{"barpolar":[{"marker":{"line":{"color":"rgb(17,17,17)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"bar":[{"error_x":{"color":"#f2f5fa"},"error_y":{"color":"#f2f5fa"},"marker":{"line":{"color":"rgb(17,17,17)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"carpet":[{"aaxis":{"endlinecolor":"#A2B1C6","gridcolor":"#506784","linecolor":"#506784","minorgridcolor":"#506784","startlinecolor":"#A2B1C6"},"baxis":{"endlinecolor":"#A2B1C6","gridcolor":"#506784","linecolor":"#506784","minorgridcolor":"#506784","startlinecolor":"#A2B1C6"},"type":"carpet"}],"choropleth":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"choropleth"}],"contourcarpet":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"contourcarpet"}],"contour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"contour"}],"heatmapgl":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmapgl"}],"heatmap":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmap"}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2dcontour"}],"histogram2d":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2d"}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"mesh3d":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"mesh3d"}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"parcoords"}],"pie":[{"automargin":true,"type":"pie"}],"scatter3d":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatter3d"}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattercarpet"}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergeo"}],"scattergl":[{"marker":{"line":{"color":"#283442"}},"type":"scattergl"}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattermapbox"}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolargl"}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolar"}],"scatter":[{"marker":{"line":{"color":"#283442"}},"type":"scatter"}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterternary"}],"surface":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"surface"}],"table":[{"cells":{"fill":{"color":"#506784"},"line":{"color":"rgb(17,17,17)"}},"header":{"fill":{"color":"#2a3f5f"},"line":{"color":"rgb(17,17,17)"}},"type":"table"}]},"layout":{"annotationdefaults":{"arrowcolor":"#f2f5fa","arrowhead":0,"arrowwidth":1},"autotypenumbers":"strict","coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#f2f5fa"},"geo":{"bgcolor":"rgb(17,17,17)","lakecolor":"rgb(17,17,17)","landcolor":"rgb(17,17,17)","showlakes":true,"showland":true,"subunitcolor":"#506784"},"hoverlabel":{"align":"left"},"hovermode":"closest","mapbox":{"style":"dark"},"margin":{"b":0,"l":0,"r":0,"t":30},"paper_bgcolor":"rgb(17,17,17)","plot_bgcolor":"rgb(17,17,17)","polar":{"angularaxis":{"gridcolor":"#506784","linecolor":"#506784","ticks":""},"bgcolor":"rgb(17,17,17)","radialaxis":{"gridcolor":"#506784","linecolor":"#506784","ticks":""}},"scene":{"xaxis":{"backgroundcolor":"rgb(17,17,17)","gridcolor":"#506784","gridwidth":2,"linecolor":"#506784","showbackground":true,"ticks":"","zerolinecolor":"#C8D4E3"},"yaxis":{"backgroundcolor":"rgb(17,17,17)","gridcolor":"#506784","gridwidth":2,"linecolor":"#506784","showbackground":true,"ticks":"","zerolinecolor":"#C8D4E3"},"zaxis":{"backgroundcolor":"rgb(17,17,17)","gridcolor":"#506784","gridwidth":2,"linecolor":"#506784","showbackground":true,"ticks":"","zerolinecolor":"#C8D4E3"}},"shapedefaults":{"line":{"color":"#f2f5fa"}},"sliderdefaults":{"bgcolor":"#C8D4E3","bordercolor":"rgb(17,17,17)","borderwidth":1,"tickwidth":0},"ternary":{"aaxis":{"gridcolor":"#506784","linecolor":"#506784","ticks":""},"baxis":{"gridcolor":"#506784","linecolor":"#506784","ticks":""},"bgcolor":"rgb(17,17,17)","caxis":{"gridcolor":"#506784","linecolor":"#506784","ticks":""}},"title":{"x":0.05},"updatemenudefaults":{"bgcolor":"#506784","borderwidth":0},"xaxis":{"automargin":true,"gridcolor":"#283442","linecolor":"#506784","ticks":"","title":{"standoff":15},"zerolinecolor":"#283442","zerolinewidth":2},"yaxis":{"automargin":true,"gridcolor":"#283442","linecolor":"#506784","ticks":"","title":{"standoff":15},"zerolinecolor":"#283442","zerolinewidth":2}}},"margin":{"l":50,"r":50,"t":50,"b":50,"pad":10},"yaxis":{"title":{"text":"Score (%)"},"range":[0,105],"fixedrange":true},"xaxis":{"title":{"text":"Task"},"fixedrange":true},"legend":{"orientation":"h","yanchor":"bottom","y":1.05,"xanchor":"center","x":0.5},"modebar":{"remove":["autoScale2d","autoscale","editInChartStudio","editinchartstudio","hoverCompareCartesian","hovercompare","lasso","lasso2d","orbitRotation","orbitrotation","pan","pan2d","pan3d","reset","resetCameraDefault3d","resetCameraLastSave3d","resetGeo","resetSankeyGroup","resetScale2d","resetViewMap","resetViewMapbox","resetViews","resetcameradefault","resetcameralastsave","resetsankeygroup","resetscale","resetview","resetviews","select","select2d","sendDataToCloud","senddatatocloud","tableRotation","tablerotation","toImage","toggleHover","toggleSpikelines","togglehover","togglespikelines","toimage","zoom","zoom2d","zoom3d","zoomIn2d","zoomInGeo","zoomInMap","zoomInMapbox","zoomOut2d","zoomOutGeo","zoomOutMap","zoomOutMapbox","zoomin","zoomout"]},"barmode":"group","height":400,"showlegend":true},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('8839e563-ec82-440c-897f-8c2d34e8d122');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
<figcaption class="quarto-float-caption-margin quarto-float-caption quarto-float-fig margin-caption" id="fig-gemini-flash-best-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Best results for Gemini 1.5 Flash.
</figcaption>
</figure>
</div>
</div>
<p>The figure above compares the performance of Gemini’s structured outputs to unstructured outputs. <strong>NL</strong> stands for <em>Natural Language</em>, which means the model writes the output in a free-form manner. In contrast, <strong>JSON-Prompt</strong> and <strong>JSON-Schema</strong> involve structured outputs that follow a predefined JSON schema.</p>
<p>For <strong>JSON-Prompt</strong>, the JSON schema is included in the prompt, instructing the model to generate JSON formatted output based on its MIME type configuration. <strong>JSON-Schema</strong> works similarly, but the schema is set directly in the model’s configuration instead of being included in the prompt.</p>
<p>When considering both <strong>JSON-Prompt</strong> and <strong>JSON-Schema</strong>, Gemini’s structured outputs performed comparably to unstructured outputs. However, with <strong>JSON-Schema</strong> alone (i.e., constrained decoding), performance drops compared to unstructured outputs. This difference is most evident in the <em>Shuffled Objects</em> task, where <strong>NL</strong> achieved a score of 97.15%, while <strong>JSON-Schema</strong> scored 86.18%.</p>
</section>
<section id="structured-outputs-101" class="level2">
<h2 class="anchored" data-anchor-id="structured-outputs-101">Structured outputs 101</h2>
<p>In case you’re not familiar with the concept, structured outputs are a group of methods that <a href="https://arxiv.org/abs/2404.07362">“ensure that the model outputs adhere to a specific structure”</a>. In Open weight models, a <em>structure</em> can mean anything from a JSON schema to a specific regex pattern. With proprietary models, it usually means a JSON schema.</p>
<p>In its less rigid interpretation, this includes any method that can generate LLM outputs adhering to a structured format, such as prompting, <a href="https://platform.openai.com/docs/guides/function-calling">function calling</a>, <a href="https://platform.openai.com/docs/guides/structured-outputs#json-mode">JSON mode</a>, or <a href="https://openai.com/index/introducing-structured-outputs-in-the-api/">constrained decoding</a>.</p>
<p>In its more rigid interpretation, this includes only constrained decoding, as it is the only method that will guarantee the output adheres to the schema you provide.</p>
</section>
<section id="study-design" class="level2">
<h2 class="anchored" data-anchor-id="study-design">Study design</h2>
<p>In Let Me Speak Freely?, Tam et al.&nbsp;evaluated structured and unstructured outputs across three reasoning tasks and six classification tasks. They used exact match to evaluate the reasoning tasks and accuracy to evaluate the classification tasks. They ran the experiments using the following models:</p>
<ol type="1">
<li><strong>Proprietary models</strong>: <em>gpt-3.5-turbo-0125</em>, <em>claude-3-haiku-20240307</em>, <em>gemini-1.5-flash</em>, and <em>gpt-4o-mini-2024-07-18</em>.</li>
<li><strong>Open-weight models</strong>: <em>LLaMA3-8B-Instruct</em>, and <em>Gemma-2-9B-Instruct</em>.</li>
</ol>
<p>For this article, I just focused on <em>Gemini 1.5 Flash</em> and the reasoning tasks. I already ran the benchmarks for <em>GPT-4o-mini</em> and <em>Llama3-8B-Instruct</em> in my <a href="https://dylancastillo.co/posts/say-what-you-mean-sometimes.html">previous post</a>.</p>
<p>I excluded the classification tasks because I believe structured outputs perform better in classification tasks, and this is also in line with the study’s original findings. So I just focused on the three reasoning tasks:</p>
<ol type="1">
<li><a href="https://huggingface.co/datasets/openai/gsm8k">GSM8K</a>: A dataset from of grade school math word problems.</li>
<li><a href="https://huggingface.co/datasets/ChilleD/LastLetterConcat">Last Letter</a>: A dataset of simple word puzzles that require concatening the last letters of a list of names.</li>
<li><a href="https://github.com/google/BIG-bench/tree/main/bigbench/benchmark_tasks/tracking_shuffled_objects">Shuffled Objects</a>: A dataset that requires reasoning about the state of a system after a sequence of shuffling operations.</li>
</ol>
<p>The rest of the article details the process of re-evaluating these benchmarks using <em>Gemini-1.5-Flash</em>.</p>
</section>
<section id="structured-outputs-with-gemini" class="level2">
<h2 class="anchored" data-anchor-id="structured-outputs-with-gemini">Structured outputs with Gemini</h2>
<p>Gemini has three ways of generating structured outputs:</p>
<ol type="1">
<li><a href="https://ai.google.dev/gemini-api/tutorials/extract_structured_data"><strong>Forced function calling (FC)</strong></a>: You force the model to call a “function” and that makes the model generate a JSON schema that matches the function’s arguments.</li>
<li><a href="https://ai.google.dev/gemini-api/docs/structured-output?lang=python#supply-schema-in-prompt"><strong>Schema in prompt (JSON-Prompt)</strong></a>: You include a JSON schema in the prompt, specify <code>mime_type='application/json'</code> and the model generates a response that matches the schema.</li>
<li><a href="https://ai.google.dev/gemini-api/docs/structured-output?lang=python#supply-schema-in-config"><strong>Schema in model configuration (JSON-Schema)</strong></a>: You provide a JSON schema in the model configuration, specify <code>mime_type='application/json'</code> in the request and the model generates a response that matches the schema. This is the only method that seems to use <a href="https://developers.googleblog.com/en/mastering-controlled-generation-with-gemini-15-schema-adherence/">controlled generation</a>.</li>
</ol>
<p>I’ve included <em>JSON-Prompt</em> and <em>JSON-Schema</em> in the analysis, but had to exclude <em>FC</em> because it’s not possible to use it for chain-of-thought reasoning, which is a requirement for the benchmarks.</p>
</section>
<section id="issues-with-geminis-structured-outputs" class="level2">
<h2 class="anchored" data-anchor-id="issues-with-geminis-structured-outputs">Issues with Gemini’s structured outputs</h2>
<p>When running the three benchmarks, I quickly ran into a performance issue with <em>FC</em> and <em>JSON-Schema</em>. In all tasks, both showed double-digit performance drops compared to <em>NL</em>.</p>
<p>This didn’t make a lot of sense, so I started investigating.</p>
<p>I was using the following response schema for all structured outputs:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Response(BaseModel):</span>
<span id="cb1-2">    reasoning: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb1-3">    answer: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span></code></pre></div>
<p>The prompts were similar to the one below, adjusted according to the task:</p>
<blockquote class="blockquote">
<p>You are an expert in solving grade school math tasks. You will be presented with a grade-school math word problem and be asked to solve it.</p>
<p>You will always respond with JSON matching the following schema:</p>
<p>[RESPONSE_SCHEMA]</p>
<p>First, provide your step by step reasoning in the “reasoning” field. Then, in the “answer” field, provide your final answer. Don’t include any other text in the “answer” field.</p>
</blockquote>
<p>I eventually realized that the performance drop in <em>JSON-Schema</em> was due to the keys in the schema being reversed when generating the response. I then noticed that Tam et al.&nbsp;briefly mentioned in Let Me Speak Freely? that <em>JSON-Schema</em> responses failed to produce valid JSON due to this exact problem, so they did not include it in their analysis.</p>
<p>I didn’t want to exclude it from the analysis, so I started looking for a way to control the order of the keys in the schema. I found that the order of the keys in the schema gets sorted alphabetically before the response is generated. To confirm this, I ran a test with 100 randomly generated schemas. Every resulting output had its keys sorted alphabetically, so it’s clear this is not by chance.</p>
<p>I also found that the Vertex AI documentation mentions a <a href="https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/control-generated-output"><code>propertyOrdering</code></a> parameter, which should allow control over the order of keys. However, this feature <a href="https://discuss.ai.google.dev/t/issue-with-key-ordering-in-controlled-generation-on-gemini-1-5/41737/3">doesn’t appear</a> <a href="https://github.com/google-gemini/generative-ai-python/issues/533">to work</a> with the Generative AI Python SDK.</p>
<p>Unable to use the <code>propertyOrdering</code> parameter, I resorted to a quick workaround: I named the keys in a way that forced the desired order alphabetically. Instead of using <code>reasoning</code> and <code>answer</code>, I used <code>reasoning</code> and <code>solution</code>. This preserved the chain-of-thought reasoning in the responses, and resolved the performance drop in <em>JSON-Schema</em>.</p>
<p>But <em>FC</em> was a different story. Unlike <em>JSON-Schema</em>, the order of the keys follow a less predictable pattern, and I couldn’t find a way to control it. So I decided to exclude <em>FC</em> from the analysis.</p>
</section>
<section id="benchmarks-of-gemini-1.5-flash" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="benchmarks-of-gemini-1.5-flash">Benchmarks of Gemini 1.5 Flash</h2>
<p>After applying the key ordering workaround, and additional improvements discussed in my <a href="https://dylancastillo.co/posts/say-what-you-mean-sometimes.html#replicating-.txts-rebuttal.html">previous post</a>, I recomputed the benchmarks.</p>
<p>The table below shows the results for Gemini 1.5 Flash compared to the original results from Tam et al.</p>
<div class="cell page-columns page-full" data-execution_count="2">
<div id="tbl-gemini-1.5-flash" class="cell quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-execution_count="2">
<figure class="quarto-float quarto-float-tbl figure page-columns page-full">
<div aria-describedby="tbl-gemini-1.5-flash-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output cell-output-display" data-execution_count="4">
<style type="text/css">
</style>

<table id="T_cfc97" class="do-not-create-environment cell table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="blank" data-quarto-table-cell-role="th">&nbsp;</th>
<th class="blank level0" data-quarto-table-cell-role="th">&nbsp;</th>
<th id="T_cfc97_level0_col0" class="col_heading level0 col0" data-quarto-table-cell-role="th">NL</th>
<th id="T_cfc97_level0_col1" class="col_heading level0 col1" data-quarto-table-cell-role="th">JSON-Prompt</th>
<th id="T_cfc97_level0_col2" class="col_heading level0 col2" data-quarto-table-cell-role="th">JSON-Schema</th>
</tr>
<tr class="even">
<th class="index_name level0" data-quarto-table-cell-role="th">Task</th>
<th class="index_name level1" data-quarto-table-cell-role="th">Method</th>
<th class="blank col0" data-quarto-table-cell-role="th">&nbsp;</th>
<th class="blank col1" data-quarto-table-cell-role="th">&nbsp;</th>
<th class="blank col2" data-quarto-table-cell-role="th">&nbsp;</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td rowspan="3" id="T_cfc97_level0_row0" class="row_heading level0 row0" data-quarto-table-cell-role="th">GSM8K</td>
<td id="T_cfc97_level1_row0" class="row_heading level1 row0" data-quarto-table-cell-role="th">Tam et al.</td>
<td id="T_cfc97_row0_col0" class="data row0 col0">89.33</td>
<td id="T_cfc97_row0_col1" class="data row0 col1">89.21</td>
<td id="T_cfc97_row0_col2" class="data row0 col2">47.78</td>
</tr>
<tr class="even">
<td id="T_cfc97_level1_row1" class="row_heading level1 row1" data-quarto-table-cell-role="th">Me, 0-shot</td>
<td id="T_cfc97_row1_col0" class="data row1 col0">93.71</td>
<td id="T_cfc97_row1_col1" class="data row1 col1">93.78</td>
<td id="T_cfc97_row1_col2" class="data row1 col2">93.03</td>
</tr>
<tr class="odd">
<td id="T_cfc97_level1_row2" class="row_heading level1 row2" data-quarto-table-cell-role="th">Me, 3-shot</td>
<td id="T_cfc97_row2_col0" class="data row2 col0">94.84</td>
<td id="T_cfc97_row2_col1" class="data row2 col1">94.16</td>
<td id="T_cfc97_row2_col2" class="data row2 col2">93.63</td>
</tr>
<tr class="even">
<td rowspan="3" id="T_cfc97_level0_row3" class="row_heading level0 row3" data-quarto-table-cell-role="th">Last Letter</td>
<td id="T_cfc97_level1_row3" class="row_heading level1 row3" data-quarto-table-cell-role="th">Tam et al.</td>
<td id="T_cfc97_row3_col0" class="data row3 col0">65.45</td>
<td id="T_cfc97_row3_col1" class="data row3 col1">77.02</td>
<td id="T_cfc97_row3_col2" class="data row3 col2">0.67</td>
</tr>
<tr class="odd">
<td id="T_cfc97_level1_row4" class="row_heading level1 row4" data-quarto-table-cell-role="th">Me, 0-shot</td>
<td id="T_cfc97_row4_col0" class="data row4 col0">82.67</td>
<td id="T_cfc97_row4_col1" class="data row4 col1">80.00</td>
<td id="T_cfc97_row4_col2" class="data row4 col2">81.33</td>
</tr>
<tr class="even">
<td id="T_cfc97_level1_row5" class="row_heading level1 row5" data-quarto-table-cell-role="th">Me, 3-shot</td>
<td id="T_cfc97_row5_col0" class="data row5 col0">80.00</td>
<td id="T_cfc97_row5_col1" class="data row5 col1">82.00</td>
<td id="T_cfc97_row5_col2" class="data row5 col2">80.67</td>
</tr>
<tr class="odd">
<td rowspan="3" id="T_cfc97_level0_row6" class="row_heading level0 row6" data-quarto-table-cell-role="th">Shuffled Obj.</td>
<td id="T_cfc97_level1_row6" class="row_heading level1 row6" data-quarto-table-cell-role="th">Tam et al.</td>
<td id="T_cfc97_row6_col0" class="data row6 col0">58.21</td>
<td id="T_cfc97_row6_col1" class="data row6 col1">65.07</td>
<td id="T_cfc97_row6_col2" class="data row6 col2">N/A</td>
</tr>
<tr class="even">
<td id="T_cfc97_level1_row7" class="row_heading level1 row7" data-quarto-table-cell-role="th">Me, 0-shot</td>
<td id="T_cfc97_row7_col0" class="data row7 col0">97.15</td>
<td id="T_cfc97_row7_col1" class="data row7 col1">92.28</td>
<td id="T_cfc97_row7_col2" class="data row7 col2">86.18</td>
</tr>
<tr class="odd">
<td id="T_cfc97_level1_row8" class="row_heading level1 row8" data-quarto-table-cell-role="th">Me, 3-shot</td>
<td id="T_cfc97_row8_col0" class="data row8 col0">92.68</td>
<td id="T_cfc97_row8_col1" class="data row8 col1">98.37</td>
<td id="T_cfc97_row8_col2" class="data row8 col2">84.96</td>
</tr>
</tbody>
</table>
</div>
</div>
<figcaption class="quarto-float-caption-margin quarto-float-caption quarto-float-tbl margin-caption" id="tbl-gemini-1.5-flash-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;1: Results for Gemini 1.5 Flash.
</figcaption>
</figure>
</div>
</div>
<p>Using a 0-shot prompt and 3-shot prompts, I was able to improve all the metrics on the tasks and methods Tam et al.&nbsp;used for their benchmarks. Which is great!</p>
<p><em>NL</em> and <em>JSON-Prompt</em> are tied, without a clear winner between them. Each method got a slight edge over in 3 out of 6 tasks. On the other hand, <em>JSON-Schema</em> performed worst than <em>NL</em> in 5 out of 6 tasks. Plus, in <em>Shuffled Objects</em>, it did so with a gap of more than 10 percentage points: 97.15% for <em>NL</em> vs.&nbsp;86.18% for <em>JSON-Schema</em>.</p>
<p>Tam et al.&nbsp;defined structured outputs as any method that “involves providing output in standardized formats like JSON or XML through format restriction.” which is in line with the less rigid interpretation of structured outputs. Using this definition, the results show no performance gap between structured and unstructured outputs. This directly contradicts the study’s original claim.</p>
<p>But if you take the also common interpretation that constrained decoding is the only form of structured generation, then the study’s original conclusion still applies: there is indeed a significant performance gap between structured and unstructured outputs.</p>
<p>Weird, I know. But that’s the way it is.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Results are mixed for Gemini 1.5 Flash.</p>
<p>The good news is that structured outputs perform on par with unstructured ones. The bad news is that this only holds if you adopt the more flexible definition of “structured outputs.” And the ugly news is that Gemini’s Generative AI SDK has a major issue in how it handles the order of keys in the provided schema.</p>
<p>Based on the results, I’d suggest the following when using Gemini:</p>
<ol type="1">
<li>Avoid FC for any tasks that require chain-of-thought reasoning.</li>
<li>Default to JSON-Prompt over JSON-Schema for reasoning tasks.</li>
</ol>
<p>Finally, I want to emphasize that I love working with structured outputs. They save a lot of time. But I know there are tasks where they might perform worse (or better!) than unstructured outputs. There’s not enough evidence to support one or the other, so what I should just run my own evals and decide based on that.</p>
<p>That’s the real takeaway: run your own evals and choose the approach that works best for you. Don’t blindly trust random posts online.</p>
<p>You can find the code to replicate my results in this <a href="https://github.com/dylanjcastillo/blog/tree/main/_extras/gemini-structured-outputs">GitHub repository</a>.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Assuming the less rigid interpretation of “structured outputs”.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {The Good, the Bad, and the Ugly of {Gemini’s} Structured
    Outputs},
  date = {2024-12-27},
  url = {https://dylancastillo.co/posts/gemini-structured-outputs.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“The Good, the Bad, and the Ugly of
Gemini’s Structured Outputs.”</span> December 27, 2024. <a href="https://dylancastillo.co/posts/gemini-structured-outputs.html">https://dylancastillo.co/posts/gemini-structured-outputs.html</a>.
</div></div></section></div> ]]></description>
  <category>llm</category>
  <category>gemini</category>
  <category>pydantic</category>
  <category>python</category>
  <guid>https://dylancastillo.co/posts/gemini-structured-outputs.html</guid>
  <pubDate>Fri, 27 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Structured outputs can hurt the performance of LLMs</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/say-what-you-mean-sometimes.html</link>
  <description><![CDATA[ 




<p>When I read <a href="https://arxiv.org/abs/2408.02442">Let Me Speak Freely?</a> by Tam et al.&nbsp;I thought they raised an interesting question: does constraining LLM outputs to structured formats impact the quality of their responses?</p>
<p>In both the original study and their recent update, Tam et al.&nbsp;concluded that is the case. They found that “structured generation constraints significantly impact LLM performance across various tasks”.</p>
<p>But the study had major flaws. The <a href="https://dottxt.co/">.txt</a> team wrote a very compelling <a href="https://dottxt.co/blog/let-me-speak-freely">rebuttal</a> to the paper. For <em>Llama-3-8B-Instruct</em>, they demonstrate that Tam, et al.&nbsp;results were mostly due to poor prompting, unfair comparisons and the improper use of an “AI parser” rather than the use of structured outputs.</p>
<p>I liked the rebuttal but it still left me wondering how well their results generalize. They focused on a single model<sup>1</sup>, which represents a small fraction of the LLMs powering applications in production today. Open-weight models offer more flexibility on how to <em>structure</em> your output, such as letting users specify <a href="https://dottxt-ai.github.io/outlines/latest/reference/generation/regex/">regex expressions</a> to constrain the output. Proprietary models lack this. Right now, JSON is the only structured output format guaranteed to work across most popular providers.</p>
<p>Given this constraint, would the .txt team’s results still hold?</p>
<p>Plus, both the original study and the rebuttal focused on tasks that might not be a good proxy for the full range of tasks people use LLMs for. Would the rebuttal results be different in settings outside of simple reasoning tasks?</p>
<p>So I decided to:</p>
<ol type="1">
<li>Replicate the results from .txt’s rebuttal using <em>LLaMA3-8B-Instruct</em>.</li>
<li>Replicate the same tasks using a proprietary model <em>GPT-4o-mini</em>.</li>
<li>Test results on a broader set of tasks such as <a href="https://livebench.ai/">LiveBench</a>.</li>
</ol>
<p>This article presents the results of the first two steps. All the code is available on <a href="https://github.com/dylanjcastillo/blog/tree/main/_extras/say-what-you-mean-sometimes">Github</a>.</p>
<section id="results" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<p>If you’re short on time, here are the key findings:</p>
<ol type="1">
<li>Tam et al.’s conclusions about structured outputs might still hold, even if they did not properly test for it. There are tasks where structured outputs perform worse than unstructured ones.</li>
<li>.txt’s rebuttal is accurate. It shows that structured outputs are as good or better than unstructured outputs for <em>LLaMA3-8B-Instruct</em> in the tasks considered. But a similar approach did not hold for <em>GPT-4o-mini</em> (and possibly other models).</li>
</ol>
<p>The figure below shows the results for <em>GPT-4o-mini</em> using .txt’s prompt fixes, along with additional improvements I made.</p>
<div id="cell-fig-gpt-4o-mini-best" class="cell page-columns page-full" data-execution_count="1">
<div id="fig-gpt-4o-mini-best" class="cell-output cell-output-display quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-gpt-4o-mini-best-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div>                            <div id="f57c9335-f6b7-416b-ba77-e8f2b57ff706" class="plotly-graph-div" style="height:400px; width:100%;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("f57c9335-f6b7-416b-ba77-e8f2b57ff706")) {                    Plotly.newPlot(                        "f57c9335-f6b7-416b-ba77-e8f2b57ff706",                        [{"hoverinfo":"skip","name":"Structured","text":["93.86","94.67","89.84"],"textposition":"outside","texttemplate":"%{text:.2f}%","x":["GSM8k","Last Letter","Shuffled Objects"],"y":[93.86,94.67,89.84],"type":"bar"},{"hoverinfo":"skip","name":"Unstructured","text":["94.31","92.0","95.12"],"textposition":"outside","texttemplate":"%{text:.2f}%","x":["GSM8k","Last Letter","Shuffled Objects"],"y":[94.31,92.0,95.12],"type":"bar"}],                        {"template":{"data":{"barpolar":[{"marker":{"line":{"color":"rgb(17,17,17)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"bar":[{"error_x":{"color":"#f2f5fa"},"error_y":{"color":"#f2f5fa"},"marker":{"line":{"color":"rgb(17,17,17)","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"carpet":[{"aaxis":{"endlinecolor":"#A2B1C6","gridcolor":"#506784","linecolor":"#506784","minorgridcolor":"#506784","startlinecolor":"#A2B1C6"},"baxis":{"endlinecolor":"#A2B1C6","gridcolor":"#506784","linecolor":"#506784","minorgridcolor":"#506784","startlinecolor":"#A2B1C6"},"type":"carpet"}],"choropleth":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"choropleth"}],"contourcarpet":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"contourcarpet"}],"contour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"contour"}],"heatmapgl":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmapgl"}],"heatmap":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmap"}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2dcontour"}],"histogram2d":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2d"}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"mesh3d":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"mesh3d"}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"parcoords"}],"pie":[{"automargin":true,"type":"pie"}],"scatter3d":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatter3d"}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattercarpet"}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergeo"}],"scattergl":[{"marker":{"line":{"color":"#283442"}},"type":"scattergl"}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattermapbox"}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolargl"}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolar"}],"scatter":[{"marker":{"line":{"color":"#283442"}},"type":"scatter"}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterternary"}],"surface":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"surface"}],"table":[{"cells":{"fill":{"color":"#506784"},"line":{"color":"rgb(17,17,17)"}},"header":{"fill":{"color":"#2a3f5f"},"line":{"color":"rgb(17,17,17)"}},"type":"table"}]},"layout":{"annotationdefaults":{"arrowcolor":"#f2f5fa","arrowhead":0,"arrowwidth":1},"autotypenumbers":"strict","coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#f2f5fa"},"geo":{"bgcolor":"rgb(17,17,17)","lakecolor":"rgb(17,17,17)","landcolor":"rgb(17,17,17)","showlakes":true,"showland":true,"subunitcolor":"#506784"},"hoverlabel":{"align":"left"},"hovermode":"closest","mapbox":{"style":"dark"},"margin":{"b":0,"l":0,"r":0,"t":30},"paper_bgcolor":"rgb(17,17,17)","plot_bgcolor":"rgb(17,17,17)","polar":{"angularaxis":{"gridcolor":"#506784","linecolor":"#506784","ticks":""},"bgcolor":"rgb(17,17,17)","radialaxis":{"gridcolor":"#506784","linecolor":"#506784","ticks":""}},"scene":{"xaxis":{"backgroundcolor":"rgb(17,17,17)","gridcolor":"#506784","gridwidth":2,"linecolor":"#506784","showbackground":true,"ticks":"","zerolinecolor":"#C8D4E3"},"yaxis":{"backgroundcolor":"rgb(17,17,17)","gridcolor":"#506784","gridwidth":2,"linecolor":"#506784","showbackground":true,"ticks":"","zerolinecolor":"#C8D4E3"},"zaxis":{"backgroundcolor":"rgb(17,17,17)","gridcolor":"#506784","gridwidth":2,"linecolor":"#506784","showbackground":true,"ticks":"","zerolinecolor":"#C8D4E3"}},"shapedefaults":{"line":{"color":"#f2f5fa"}},"sliderdefaults":{"bgcolor":"#C8D4E3","bordercolor":"rgb(17,17,17)","borderwidth":1,"tickwidth":0},"ternary":{"aaxis":{"gridcolor":"#506784","linecolor":"#506784","ticks":""},"baxis":{"gridcolor":"#506784","linecolor":"#506784","ticks":""},"bgcolor":"rgb(17,17,17)","caxis":{"gridcolor":"#506784","linecolor":"#506784","ticks":""}},"title":{"x":0.05},"updatemenudefaults":{"bgcolor":"#506784","borderwidth":0},"xaxis":{"automargin":true,"gridcolor":"#283442","linecolor":"#506784","ticks":"","title":{"standoff":15},"zerolinecolor":"#283442","zerolinewidth":2},"yaxis":{"automargin":true,"gridcolor":"#283442","linecolor":"#506784","ticks":"","title":{"standoff":15},"zerolinecolor":"#283442","zerolinewidth":2}}},"margin":{"l":50,"r":50,"t":50,"b":50,"pad":10},"yaxis":{"title":{"text":"Score (%)"},"range":[0,105],"fixedrange":true},"xaxis":{"title":{"text":"Task"},"fixedrange":true},"legend":{"orientation":"h","yanchor":"bottom","y":1.05,"xanchor":"center","x":0.5},"modebar":{"remove":["autoScale2d","autoscale","editInChartStudio","editinchartstudio","hoverCompareCartesian","hovercompare","lasso","lasso2d","orbitRotation","orbitrotation","pan","pan2d","pan3d","reset","resetCameraDefault3d","resetCameraLastSave3d","resetGeo","resetSankeyGroup","resetScale2d","resetViewMap","resetViewMapbox","resetViews","resetcameradefault","resetcameralastsave","resetsankeygroup","resetscale","resetview","resetviews","select","select2d","sendDataToCloud","senddatatocloud","tableRotation","tablerotation","toImage","toggleHover","toggleSpikelines","togglehover","togglespikelines","toimage","zoom","zoom2d","zoom3d","zoomIn2d","zoomInGeo","zoomInMap","zoomInMapbox","zoomOut2d","zoomOutGeo","zoomOutMap","zoomOutMapbox","zoomin","zoomout"]},"barmode":"group","height":400,"showlegend":true},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('f57c9335-f6b7-416b-ba77-e8f2b57ff706');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
<figcaption class="quarto-float-caption-margin quarto-float-caption quarto-float-fig margin-caption" id="fig-gpt-4o-mini-best-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Overall results for GPT-4o-mini.
</figcaption>
</figure>
</div>
</div>
<p>For <strong>GSM8K</strong> and <strong>Last Letter</strong>, structured and unstructured methods scored similarly. But for <strong>Shuffled Objects</strong>, unstructured outputs clearly surpassed a structured format.</p>
<p>The rest of the article will explain the approach I took to get these results.</p>
</section>
<section id="study-design" class="level2">
<h2 class="anchored" data-anchor-id="study-design">Study design</h2>
<p>Tam et al.&nbsp;evaluated structured and unstructured outputs across three reasoning tasks and six classification tasks. They used exact match to evaluate the reasoning tasks and accuracy to evaluate the classification tasks. They ran the experiments using the following models:</p>
<ol type="1">
<li><strong>Proprietary models</strong>: <em>gpt-3.5-turbo-0125</em>, <em>claude-3-haiku-20240307</em>, <em>gemini-1.5-flash</em>, and <em>gpt-4o-mini-2024-07-18</em>.</li>
<li><strong>Open-weight models</strong>: <em>LLaMA3-8B-Instruct</em>, and <em>Gemma-2-9B-Instruct</em>.</li>
</ol>
<p>.txt used a similar setup, but only focused on the reasoning tasks using <em>LLaMA3-8B-Instruct</em>. They did not include classification tasks because Tam et al.&nbsp;observed that structured outputs resulted in better performance in these tasks, so there was no need to test for it.</p>
<p>I also believe that structured outputs are better for classification tasks. So, I excluded them from my analysis as well.</p>
<p>The reasoning tasks were:</p>
<ol type="1">
<li><a href="https://huggingface.co/datasets/openai/gsm8k">GSM8K</a>: A dataset from of grade school math word problems.</li>
<li><a href="https://huggingface.co/datasets/ChilleD/LastLetterConcat">Last Letter</a>: A dataset of simple word puzzles that require concatening the last letters of a list of names.</li>
<li><a href="https://github.com/google/BIG-bench/tree/main/bigbench/benchmark_tasks/tracking_shuffled_objects">Shuffled Objects</a>: A dataset that requires reasoning about the state of a system after a sequence of shuffling operations.</li>
</ol>
<p>The rest of the article details the process of replicating .txt’s rebuttal on these tasks and evaluating the same tasks using <em>GPT-4o-mini</em>.</p>
</section>
<section id="replicating-.txts-rebuttal" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="replicating-.txts-rebuttal">Replicating .txt’s rebuttal</h2>
<p>.txt made it very easy to reproduce their results by sharing their <a href="https://github.com/dottxt-ai/demos/tree/main/say-what-you-mean">code on Github</a>. I just set up a machine at <a href="https://modal.com/">Modal</a> and ran the code.</p>
<p>While going through the code, I noticed some small issues with the prompts. So I decided to tweak them a bit.</p>
<p>Below are .txt’s original results compared to mine, after the prompt adjustments:</p>
<div class="cell page-columns page-full" data-execution_count="2">
<div id="tbl-llama-3-8b-instruct" class="cell quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-execution_count="2">
<figure class="quarto-float quarto-float-tbl figure page-columns page-full">
<div aria-describedby="tbl-llama-3-8b-instruct-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output cell-output-display" data-execution_count="35">
<style type="text/css">
</style>

<table id="T_83ac5" class="do-not-create-environment cell table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th id="T_83ac5_level0_col0" class="col_heading level0 col0" data-quarto-table-cell-role="th">Task</th>
<th colspan="2" id="T_83ac5_level0_col1" class="col_heading level0 col1" data-quarto-table-cell-role="th">.txt</th>
<th colspan="2" id="T_83ac5_level0_col3" class="col_heading level0 col3" data-quarto-table-cell-role="th">me, 3-shot</th>
</tr>
<tr class="even">
<th id="T_83ac5_level1_col0" class="col_heading level1 col0" data-quarto-table-cell-role="th"></th>
<th id="T_83ac5_level1_col1" class="col_heading level1 col1" data-quarto-table-cell-role="th">Unstructured</th>
<th id="T_83ac5_level1_col2" class="col_heading level1 col2" data-quarto-table-cell-role="th">Structured</th>
<th id="T_83ac5_level1_col3" class="col_heading level1 col3" data-quarto-table-cell-role="th">Unstructured</th>
<th id="T_83ac5_level1_col4" class="col_heading level1 col4" data-quarto-table-cell-role="th">Structured</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td id="T_83ac5_row0_col0" class="data row0 col0">GSM8K</td>
<td id="T_83ac5_row0_col1" class="data row0 col1">77.18</td>
<td id="T_83ac5_row0_col2" class="data row0 col2">77.79</td>
<td id="T_83ac5_row0_col3" class="data row0 col3">79.98</td>
<td id="T_83ac5_row0_col4" class="data row0 col4">79.45</td>
</tr>
<tr class="even">
<td id="T_83ac5_row1_col0" class="data row1 col0">Last Letter</td>
<td id="T_83ac5_row1_col1" class="data row1 col1">73.33</td>
<td id="T_83ac5_row1_col2" class="data row1 col2">77.33</td>
<td id="T_83ac5_row1_col3" class="data row1 col3">74.00</td>
<td id="T_83ac5_row1_col4" class="data row1 col4">78.00</td>
</tr>
<tr class="odd">
<td id="T_83ac5_row2_col0" class="data row2 col0">Shuffled Objects</td>
<td id="T_83ac5_row2_col1" class="data row2 col1">40.72</td>
<td id="T_83ac5_row2_col2" class="data row2 col2">44.35</td>
<td id="T_83ac5_row2_col3" class="data row2 col3">42.68</td>
<td id="T_83ac5_row2_col4" class="data row2 col4">43.90</td>
</tr>
</tbody>
</table>
</div>
</div>
<figcaption class="quarto-float-caption-margin quarto-float-caption quarto-float-tbl margin-caption" id="tbl-llama-3-8b-instruct-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;1: Results for LLaMA3-8B-Instruct.
</figcaption>
</figure>
</div>
</div>
<p>Except for <strong>Structured</strong> in the <strong>Shuffled Objects</strong> task, I was able to improve all the metrics. In <strong>GSM8K’s</strong> case, even reversing .txt’s result, with <strong>Unstructured</strong> outperforming <strong>Structured</strong> by a small margin.</p>
<p>But I don’t think this matters much.</p>
<p>Their conclusion still holds: structured outputs are either as good as or better than unstructured outputs, in the tasks considered.</p>
<p>I’ll explain the prompt changes I made below, so that you can judge for yourself if they make sense.</p>
<section id="formatting-few-shot-examples" class="level3">
<h3 class="anchored" data-anchor-id="formatting-few-shot-examples">Formatting few-shot examples</h3>
<p>In the <strong>GSM8K</strong> and <strong>Last Letter</strong> tasks, the few-shot prompt for both unstructured and structured used examples formatted as JSON objects and asked the LLM to produce the output in the same format, from which the answer was extracted.</p>
<p>That felt unfair. Even though you’re not formally constraining the LLM to produce a JSON object, you’re still asking it to format its response in somewhat unnatural way.</p>
<p>I adjusted the prompts to be as similar as possible for both unstructured and structured outputs while still trying to get the most out of each approach.</p>
<p>For example, in <strong>GSM8K</strong>, the unstructured prompt is:</p>
<blockquote class="blockquote">
<p>You are an expert in solving grade school math tasks. You will be presented with a grade-school math word problem and be asked to solve it. You will always respond in the following format:</p>
<p>&lt;str, reasoning about the answer&gt;</p>
<p>ANSWER: &lt;int, final answer&gt;</p>
<p>First, provide your step by step reasoning. Then, in ANSWER, provide an integer that corresponds to the correct answer to the question. Don’t include any other text in ANSWER.</p>
</blockquote>
<p>And the structured prompt is:</p>
<blockquote class="blockquote">
<p>You are an expert in solving grade school math tasks. You will be presented with a grade-school math word problem and be asked to solve it. You will always respond in the following format:</p>
<p>{“reasoning”: &lt;str, reasoning about the answer&gt;, “answer”: &lt;int, final answer&gt;}</p>
<p>First, provide your step by step reasoning in the “reasoning” field. Then, in the “answer” field, provide an integer that corresponds to the correct answer to the question. Don’t include any other text in the “answer” field.</p>
</blockquote>
<p>Finally, for all the tasks, I used a 3-shot prompt.</p>
</section>
<section id="clarifying-the-task" class="level3">
<h3 class="anchored" data-anchor-id="clarifying-the-task">Clarifying the task</h3>
<p>I also tried to make the prompts clearer. The description of the task in the original <strong>Last Letter</strong> prompt was:</p>
<blockquote class="blockquote">
<p>You are an expert in solving simple word puzzles using reasoning steps. Your specific task is going to be to take a list of 4 names and reason about the last letter of each ., then you will concatenate those letters into a word.</p>
</blockquote>
<p>I changed it to:</p>
<blockquote class="blockquote">
<p>You are an expert in solving word puzzles. Your specific task is going to be to take a list of 4 names, get the last letter of each and concatenate these letters into a word.</p>
</blockquote>
<p>The original prompt was reasonable, but I thought the new version was clearer. Through trial and error, I’ve learned that when working with LLMs, it’s best to be as clear and direct as possible.</p>
</section>
</section>
<section id="evaluating-gpt-4o-mini" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="evaluating-gpt-4o-mini">Evaluating GPT-4o-mini</h2>
<p>Using the same setup as before, I ran the same tasks with <code>gpt-4o-mini-2024-07-18</code>.</p>
<p>In the table below, you can see the results, including the original results from Tam et al.&nbsp;for comparison:</p>
<div class="cell page-columns page-full" data-execution_count="3">
<div id="tbl-gpt-4o-mini" class="cell quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-execution_count="3">
<figure class="quarto-float quarto-float-tbl figure page-columns page-full">
<div aria-describedby="tbl-gpt-4o-mini-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output cell-output-display" data-execution_count="36">
<style type="text/css">
</style>

<table id="T_769d4" class="do-not-create-environment cell table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="blank" data-quarto-table-cell-role="th">&nbsp;</th>
<th class="blank level0" data-quarto-table-cell-role="th">&nbsp;</th>
<th id="T_769d4_level0_col0" class="col_heading level0 col0" data-quarto-table-cell-role="th">NL</th>
<th id="T_769d4_level0_col1" class="col_heading level0 col1" data-quarto-table-cell-role="th">FRI</th>
<th id="T_769d4_level0_col2" class="col_heading level0 col2" data-quarto-table-cell-role="th">JSON-Mode</th>
<th id="T_769d4_level0_col3" class="col_heading level0 col3" data-quarto-table-cell-role="th">JSON-Schema</th>
</tr>
<tr class="even">
<th class="index_name level0" data-quarto-table-cell-role="th">Task</th>
<th class="index_name level1" data-quarto-table-cell-role="th">Method</th>
<th class="blank col0" data-quarto-table-cell-role="th">&nbsp;</th>
<th class="blank col1" data-quarto-table-cell-role="th">&nbsp;</th>
<th class="blank col2" data-quarto-table-cell-role="th">&nbsp;</th>
<th class="blank col3" data-quarto-table-cell-role="th">&nbsp;</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td rowspan="3" id="T_769d4_level0_row0" class="row_heading level0 row0" data-quarto-table-cell-role="th">GSM8K</td>
<td id="T_769d4_level1_row0" class="row_heading level1 row0" data-quarto-table-cell-role="th">Tam et al.</td>
<td id="T_769d4_row0_col0" class="data row0 col0">94.57</td>
<td id="T_769d4_row0_col1" class="data row0 col1">87.17</td>
<td id="T_769d4_row0_col2" class="data row0 col2">86.95</td>
<td id="T_769d4_row0_col3" class="data row0 col3">91.71</td>
</tr>
<tr class="even">
<td id="T_769d4_level1_row1" class="row_heading level1 row1" data-quarto-table-cell-role="th">Me, 0-shot</td>
<td id="T_769d4_row1_col0" class="data row1 col0">94.31</td>
<td id="T_769d4_row1_col1" class="data row1 col1">92.12</td>
<td id="T_769d4_row1_col2" class="data row1 col2">93.33</td>
<td id="T_769d4_row1_col3" class="data row1 col3">93.48</td>
</tr>
<tr class="odd">
<td id="T_769d4_level1_row2" class="row_heading level1 row2" data-quarto-table-cell-role="th">Me, 3-shot</td>
<td id="T_769d4_row2_col0" class="data row2 col0">93.86</td>
<td id="T_769d4_row2_col1" class="data row2 col1">92.72</td>
<td id="T_769d4_row2_col2" class="data row2 col2">93.25</td>
<td id="T_769d4_row2_col3" class="data row2 col3">92.95</td>
</tr>
<tr class="even">
<td rowspan="3" id="T_769d4_level0_row3" class="row_heading level0 row3" data-quarto-table-cell-role="th">Last Letter</td>
<td id="T_769d4_level1_row3" class="row_heading level1 row3" data-quarto-table-cell-role="th">Tam et al.</td>
<td id="T_769d4_row3_col0" class="data row3 col0">83.11</td>
<td id="T_769d4_row3_col1" class="data row3 col1">84.73</td>
<td id="T_769d4_row3_col2" class="data row3 col2">76.00</td>
<td id="T_769d4_row3_col3" class="data row3 col3">86.07</td>
</tr>
<tr class="odd">
<td id="T_769d4_level1_row4" class="row_heading level1 row4" data-quarto-table-cell-role="th">Me, 0-shot</td>
<td id="T_769d4_row4_col0" class="data row4 col0">87.33</td>
<td id="T_769d4_row4_col1" class="data row4 col1">88.00</td>
<td id="T_769d4_row4_col2" class="data row4 col2">90.00</td>
<td id="T_769d4_row4_col3" class="data row4 col3">87.33</td>
</tr>
<tr class="even">
<td id="T_769d4_level1_row5" class="row_heading level1 row5" data-quarto-table-cell-role="th">Me, 3-shot</td>
<td id="T_769d4_row5_col0" class="data row5 col0">92.00</td>
<td id="T_769d4_row5_col1" class="data row5 col1">94.67</td>
<td id="T_769d4_row5_col2" class="data row5 col2">90.00</td>
<td id="T_769d4_row5_col3" class="data row5 col3">93.33</td>
</tr>
<tr class="odd">
<td rowspan="3" id="T_769d4_level0_row6" class="row_heading level0 row6" data-quarto-table-cell-role="th">Shuffled Obj.</td>
<td id="T_769d4_level1_row6" class="row_heading level1 row6" data-quarto-table-cell-role="th">Tam et al.</td>
<td id="T_769d4_row6_col0" class="data row6 col0">82.85</td>
<td id="T_769d4_row6_col1" class="data row6 col1">81.46</td>
<td id="T_769d4_row6_col2" class="data row6 col2">76.43</td>
<td id="T_769d4_row6_col3" class="data row6 col3">81.77</td>
</tr>
<tr class="even">
<td id="T_769d4_level1_row7" class="row_heading level1 row7" data-quarto-table-cell-role="th">Me, 0-shot</td>
<td id="T_769d4_row7_col0" class="data row7 col0">95.12</td>
<td id="T_769d4_row7_col1" class="data row7 col1">79.67</td>
<td id="T_769d4_row7_col2" class="data row7 col2">81.71</td>
<td id="T_769d4_row7_col3" class="data row7 col3">89.84</td>
</tr>
<tr class="odd">
<td id="T_769d4_level1_row8" class="row_heading level1 row8" data-quarto-table-cell-role="th">Me, 3-shot</td>
<td id="T_769d4_row8_col0" class="data row8 col0">92.68</td>
<td id="T_769d4_row8_col1" class="data row8 col1">69.51</td>
<td id="T_769d4_row8_col2" class="data row8 col2">62.60</td>
<td id="T_769d4_row8_col3" class="data row8 col3">65.85</td>
</tr>
</tbody>
</table>
</div>
</div>
<figcaption class="quarto-float-caption-margin quarto-float-caption quarto-float-tbl margin-caption" id="tbl-gpt-4o-mini-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;2: Results for GPT-4o-mini.
</figcaption>
</figure>
</div>
</div>
<p><em>NL</em> stands for “Natural Language”, which would correspond to the <em>Unstructured</em> method in the previous table.</p>
<p><em>FRI</em> stands for “Format Restricting Instructions”, which is a JSON generated through the OpenAI’s <a href="https://platform.openai.com/docs/guides/function-calling">function calling</a>. <em>JSON-Mode</em> is a JSON generated through the OpenAI’s <a href="https://platform.openai.com/docs/guides/structured-outputs#json-mode">JSON mode</a>. <em>JSON-Schema</em> is a JSON generated using <a href="https://openai.com/index/introducing-structured-outputs-in-the-api/">constrained decoding</a>.</p>
<p><em>JSON-Schema</em> is the closest equivalent to <strong>Structured</strong> as referenced in the previous table. But, in real-life applications, you don’t really care about how the output was generated. You just want to get the output in the format you want. So, for the sake of comparison, I will consider the three other methods equivalent to <strong>Structured</strong> as well.</p>
<section id="adjusting-for-proprietary-models" class="level3">
<h3 class="anchored" data-anchor-id="adjusting-for-proprietary-models">Adjusting for proprietary models</h3>
<p>In this case, I allowed for 3 retries in the case of parsing errors. I allowed for this because function calling had high error rates in the zero-shot prompting scenario.</p>
<p>These retries primarily affected <strong>FRI</strong> results. This might make the comparisons in <strong>Last Letter</strong> biased in favor of structured outputs (<strong>FRI</strong> was the best method in this case). But since <strong>JSON-Schema</strong> also outperformed <strong>NL</strong> in this case, this adjustment does not alter the overall conclusions. The other methods maintained error rates of &lt;0.5% in <strong>GSM8K</strong> and 0% in <strong>Last Letter</strong> and <strong>Shuffled Objects</strong>.</p>
<p>I used slightly different parsing functions for <strong>Unstructured</strong> and <strong>Structured</strong> outputs. The <strong>Unstructured</strong> parser was more lenient, removing commas and periods at the end of responses. But I believe this remains a fair comparison given that in the <strong>Structured</strong> cases you provide a JSON schema which is more informative.</p>
</section>
<section id="analyzing-the-results" class="level3">
<h3 class="anchored" data-anchor-id="analyzing-the-results">Analyzing the results</h3>
<p>Similar to what the .txt team found, after adjusting the prompts, the performance of structured outputs increases substantially compared to Tam et al.</p>
<p>Except for <em>NL</em> in <strong>GSM8k</strong> and <em>FRI</em> in <strong>Last Letter</strong>, I was able to improve all the metrics for both unstructured and structured outputs using a 0-shot prompt. For 3-shot prompts, I improved <strong>GSM8k</strong> and <strong>Last Letter</strong> across all methods, and <em>NL</em> in <strong>Shuffled Objects</strong>.</p>
<p>For <strong>GSM8k</strong> and <strong>Last Letter</strong>, the results were very similar between unstructured and structured outputs. There was a slight edge for unstructured outputs in <strong>GSM8k</strong> and for structured outputs in <strong>Last Letter</strong>. In these cases, it’s not clear that one approach definitively outperforms the other.</p>
<p>On the other hand, <strong>Shuffled Objects</strong> shows a clear advantage for unstructured outputs over structured outputs. This was unexpected, and even after tweaking the prompts, I couldn’t fully close the gap.</p>
<p>Despite the issues in Tam et al.’s study, their conclusion appears to hold. In this particular scenario, using a fairly popular model with reasonable prompts, there is a significant difference in performance between structured and unstructured outputs.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>In <strong>GSM8k</strong> and <strong>Last Letter</strong>, few-shot prompting generally decreased performance. This is in line with <a href="https://python.useinstructor.com/blog/2024/09/26/bad-schemas-could-break-your-llm-structured-outputs/?h=bad+sc#modes-and-models">other analyses</a>.</p>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>You’re here because you want to know whether to use structured or unstructured outputs. As a developer, I’m glad to say the answer is: <a href="https://www.reddit.com/r/orlybooks/comments/50meb5/it_depends/">it depends</a>.</p>
<p>I love using structured outputs in my daily work, because it makes it much easier to work with the output of LLMs. I always encourage <a href="https://iwanalabs.com/">clients</a> who aren’t using them yet to give them a try.</p>
<p>That said, until there’s stronger evidence showing that both approaches are equivalent, the best course of action is to test things for yourself. Run your own <a href="https://hamel.dev/blog/posts/evals/">evals</a> and make a decision based on data.</p>
<p>I expect that in most cases, structured outputs will have similar performance to unstructured outputs. But, if you blindly assume that structured outputs are always equal to or better than unstructured ones, you might be missing out on easy performance gains.</p>
<p>Take the example of <strong>Shuffled Objects</strong> with <em>GPT-4o-mini</em>. You could potentially reduce the gap between the two methods by continuing improving the prompts or by switching to a more powerful model. But the costs, in terms of time and effort, might be more than simply switching to unstructured outputs.</p>
<p>And this cuts both ways. Unstructured outputs aren’t inherently better or worse than structured ones. Again, the right choice depends on your task, the model, and your prompt engineering skills. Test both approaches, identify if there are differences, and choose what works best.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Although, they’ve also <a href="https://blog.dottxt.co/performance-gsm8k.html">shared results</a> of other open-weight models using a different setup.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Structured Outputs Can Hurt the Performance of {LLMs}},
  date = {2024-12-08},
  url = {https://dylancastillo.co/posts/say-what-you-mean-sometimes.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Structured Outputs Can Hurt the
Performance of LLMs.”</span> December 8, 2024. <a href="https://dylancastillo.co/posts/say-what-you-mean-sometimes.html">https://dylancastillo.co/posts/say-what-you-mean-sometimes.html</a>.
</div></div></section></div> ]]></description>
  <category>llm</category>
  <category>openai</category>
  <category>pydantic</category>
  <category>python</category>
  <guid>https://dylancastillo.co/posts/say-what-you-mean-sometimes.html</guid>
  <pubDate>Sun, 08 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Transform any image to WebP from the terminal</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/til/transforming-images-to-webp.html</link>
  <description><![CDATA[ 




<p>I was annoyed by the file size of my photo in the <a href="https://dylanjcastillo.com/about/">About page</a>, because it was slowing down the page load.</p>
<p>Is it important? No.</p>
<p>Don’t I have better things to do on a Saturday afternoon? Yes.</p>
<p>But it’s like going to bed with the closet door open—you know there’s nothing in there, but you just can’t shake the feeling that the devil (or <a href="https://es.wikipedia.org/wiki/Diosdado_Cabello">Diosdado Cabello</a>) might jump out and kill you in your sleep unless you get up and shut it.</p>
<p>So I got o1-mini to write a simple script for me, and thought others might find it useful.</p>
<p>Here it is:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> img2webp()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the input file is provided or if help is requested</span></span>
<span id="cb1-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$#</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-lt</span> 1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--help"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-h"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb1-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Usage: img2webp input_image [quality]"</span></span>
<span id="cb1-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  input_image: Path to the input image file"</span></span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  quality: Quality of the output WebP image (0-100, default is 80)"</span></span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb1-10"></span>
<span id="cb1-11">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">input</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-12">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">quality</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:-</span>80<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default quality is 80 if not specified</span></span>
<span id="cb1-13">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">output</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${input</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>.<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.webp"</span></span>
<span id="cb1-14"></span>
<span id="cb1-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to WebP using ffmpeg</span></span>
<span id="cb1-16">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ffmpeg</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$input</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-qscale:v</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$quality</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$output</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-17"></span>
<span id="cb1-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the conversion was successful</span></span>
<span id="cb1-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$?</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-eq</span> 0 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb1-20">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Successfully converted '</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$input</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' to '</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$output</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' with quality </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$quality</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span></span>
<span id="cb1-21">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb1-22">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to convert '</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$input</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' to WebP."</span></span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb1-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span></code></pre></div>
<p>If you’re using MacOS, you first need to install <code>ffmpeg</code> using Homebrew:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install ffmpeg</span></code></pre></div>
<p>Then you can add it to your <code>.zshrc</code> and use it by running <code>img2webp &lt;path_to_image&gt; [quality]</code>.</p>
<p>Just as reference, keeping the same quality, I decreased my profile picture from 234KB to 36KB by just changing from PNG to WebP.</p>
<p>Hope you found this useful.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Transform Any Image to {WebP} from the Terminal},
  date = {2024-11-23},
  url = {https://dylancastillo.co/til/transforming-images-to-webp.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Transform Any Image to WebP from the
Terminal.”</span> November 23, 2024. <a href="https://dylancastillo.co/til/transforming-images-to-webp.html">https://dylancastillo.co/til/transforming-images-to-webp.html</a>.
</div></div></section></div> ]]></description>
  <category>til</category>
  <category>webp</category>
  <category>bash</category>
  <category>ffmpeg</category>
  <guid>https://dylancastillo.co/til/transforming-images-to-webp.html</guid>
  <pubDate>Sat, 23 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Structured outputs: don’t put the cart before the horse</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/llm-pydantic-order-matters.html</link>
  <description><![CDATA[ 




<p>Not long ago, you couldn’t reliably ask an LLM to provide you with a response using a specific format. Building tools that used LLM outputs was painful.</p>
<p>Then, through <a href="https://platform.openai.com/docs/guides/function-calling">function calling</a> and <a href="https://platform.openai.com/docs/guides/structured-outputs">structured outputs</a>, we could instruct LLMs to respond in specific formats<sup>1</sup>. So, extracting information from LLM outputs stopped being a problem.</p>
<p>But then I started noticing that structured outputs also had their <a href="https://arxiv.org/abs/2408.02442">own set</a> <a href="https://arxiv.org/abs/2403.06988">of problems</a>. Most importantly, the apparent rigidity of a Pydantic model can make you forget that underneath, you’re still dealing with an LLM. Setting up a response model for your API calls is not the same as setting up a response model for your LLM outputs.</p>
<p>For example, take the following question from the <a href="https://huggingface.co/datasets/livebench/reasoning">LiveBench</a> dataset:</p>
<blockquote class="blockquote">
<p>Suppose I have a physical, solid, equilateral triangle, and I make two cuts. The two cuts are from two parallel lines, and both cuts pass through the interior of the triangle. How many pieces are there after the cuts? Think step by step, and then put your answer in <strong>bold</strong> as a single integer (for example, <strong>0</strong>). If you don’t know, guess.</p>
</blockquote>
<p>Let’s say I write a simple system prompt and two Pydantic models to format the responses:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">system_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb1-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You're a helpful assistant. You will help me answer a question."</span></span>
<span id="cb1-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You will use this JSON schema for your response:"</span></span>
<span id="cb1-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{response_format}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-5">)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ResponseFormatA(BaseModel):</span>
<span id="cb1-8">    reasoning: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb1-9">    answer: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ResponseFormatB(BaseModel):</span>
<span id="cb1-12">    answer: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb1-13">    reasoning: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span></code></pre></div>
<p>Do you think that there will be a difference in performance between <code>ResponseFormatA</code> and <code>ResponseFormatB</code>? If so, which one do you think will perform better?</p>
<p>Not sure? Well, you’re in luck! Let’s run some experiments to find out.</p>
<section id="set-up-the-environment" class="level2">
<h2 class="anchored" data-anchor-id="set-up-the-environment">Set up the environment</h2>
<p>First, start by importing the necessary libraries:</p>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> asyncio <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Semaphore</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb2-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langsmith <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> traceable</span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langsmith.wrappers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wrap_openai</span>
<span id="cb2-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AsyncOpenAI</span>
<span id="cb2-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel</span>
<span id="cb2-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb2-15"></span>
<span id="cb2-16">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb2-17"></span>
<span id="cb2-18">load_dotenv()</span>
<span id="cb2-19"></span>
<span id="cb2-20">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrap_openai(AsyncOpenAI())</span></code></pre></div>
</div>
<p>This will set up all the necessary infrastructure to run the experiments. I like using <a href="https://www.langchain.com/langsmith">LangSmith</a> to track <a href="https://smith.langchain.com/public/11545ceb-70d3-4213-9f05-89891586b809/r?runtab=0">runs</a>.</p>
<p>To run the experiment, you need some data. I ended up using a subset of the <a href="https://huggingface.co/datasets/livebench/reasoning">reasoning questions</a> from LiveBench. You can download it and save it in the <code>data</code> directory.</p>
<p>Then, you can read it into a pandas <code>DataFrame</code>:</p>
<div id="cell-7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">data_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path().absolute().parent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"live_bench"</span></span>
<span id="cb3-2">reasoning_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reasoning"</span></span>
<span id="cb3-3">live_bench_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reasoning_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question.jsonl"</span></span>
<span id="cb3-4"></span>
<span id="cb3-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb3-6">    pd.read_json(live_bench_json, lines<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-7">    .query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"livebench_release_date == '2024-07-26'"</span>)</span>
<span id="cb3-8">    .assign(</span>
<span id="cb3-9">        turns_str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.turns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], </span>
<span id="cb3-10">        expects_integer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.turns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer"</span>, case<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb3-11">    )</span>
<span id="cb3-12">    .reset_index()</span>
<span id="cb3-13">    .rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data_point_id"</span>})</span>
<span id="cb3-14">)</span></code></pre></div>
</div>
<p>Next, define the system prompt and the Pydantic models you’ll use to format the responses:</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">system_prompt_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb4-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You're a helpful assistant. You will help me answer a question."</span></span>
<span id="cb4-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You will use this JSON schema for your response:"</span></span>
<span id="cb4-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{response_format}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-5">)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ResponseFormatA(BaseModel):</span>
<span id="cb4-8">    reasoning: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb4-9">    answer: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> </span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ResponseFormatB(BaseModel):</span>
<span id="cb4-12">    answer: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> </span>
<span id="cb4-13">    reasoning: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span></code></pre></div>
</div>
<p>In the system prompt you send to the LLM, you’ll replace <code>{response_format}</code> with the JSON schema of the response format you want to use.</p>
<p>Then, let’s define a few helper functions to run the experiment:</p>
<div id="cell-11" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> validate_response(response_json, response_format):</span>
<span id="cb5-2">    response_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response_json)</span>
<span id="cb5-3">    expected_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(response_format.model_json_schema()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>].keys())</span>
<span id="cb5-4">    actual_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(response_dict.keys())</span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> actual_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> expected_keys:</span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Response keys </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>actual_keys<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> do not match expected keys </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>expected_keys<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response_format.model_validate_json(response_json)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@traceable</span></span>
<span id="cb5-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> process_row(</span>
<span id="cb5-11">    row: pd.Series, </span>
<span id="cb5-12">    response_format: ResponseFormatA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> ResponseFormatB, </span>
<span id="cb5-13">    semaphore: Semaphore</span>
<span id="cb5-14">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> ResponseFormatA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> ResponseFormatB:</span>
<span id="cb5-15">    system_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> system_prompt_template.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(</span>
<span id="cb5-16">        response_format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>response_format.model_json_schema()</span>
<span id="cb5-17">    )</span>
<span id="cb5-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> semaphore:</span>
<span id="cb5-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb5-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb5-21">                response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> client.chat.completions.create(</span>
<span id="cb5-22">                    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4o"</span>, </span>
<span id="cb5-23">                    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb5-24">                        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: system_prompt},</span>
<span id="cb5-25">                        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Question:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>turns_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>}</span>
<span id="cb5-26">                    ],</span>
<span id="cb5-27">                    response_format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"json_object"</span>}</span>
<span id="cb5-28">                )</span>
<span id="cb5-29">                response_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content</span>
<span id="cb5-30">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> validate_response(response_json, response_format)</span>
<span id="cb5-31">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>:</span>
<span id="cb5-32">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb5-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to generate a valid response"</span>)</span>
<span id="cb5-34"></span>
<span id="cb5-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@traceable</span></span>
<span id="cb5-36"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main(df, response_format, concurrency: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>):</span>
<span id="cb5-37">    semaphore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Semaphore(concurrency)</span>
<span id="cb5-38">    tasks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [process_row(row, response_format, semaphore) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.iterrows()]</span>
<span id="cb5-39">    responses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> asyncio.gather(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tasks)</span>
<span id="cb5-40"></span>
<span id="cb5-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> responses</span>
<span id="cb5-42"></span>
<span id="cb5-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> extract_answer(answer):</span>
<span id="cb5-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(answer).replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>).strip()</span></code></pre></div>
</div>
<p>In this code, <code>validate_response</code> is used to check if the response is valid (i.e.&nbsp;it matches the JSON schema in the same order). If it is, it returns the response. Otherwise, it raises an exception.</p>
<p><code>extract_answer</code> is used to remove ** from the answer if it exists in the response. Some of the questions in the LiveBench dataset included instructions to put the answer in bold, which is why we need to remove it.</p>
<p><code>process_row</code> is used to process a single row of the DataFrame. It sends the system prompt to the LLM and validates the response. It includes a simple retry mechanism in case the validation fails. Each run is tracked in LangSmith.</p>
<p>Finally, <code>main</code> is used to run the experiment. It runs the <code>process_row</code> function concurrently for each row in the DataFrame.</p>
</section>
<section id="running-the-experiment" class="level2">
<h2 class="anchored" data-anchor-id="running-the-experiment">Running the experiment</h2>
<p>Now, you can run the experiment using the two response formats:</p>
<div id="cell-14" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">n_runs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb6-2">df_runs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> run <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_runs):</span>
<span id="cb6-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Run </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-6">    df_copy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.copy()</span>
<span id="cb6-7">    </span>
<span id="cb6-8">    responses_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> asyncio.run(main(df_copy, ResponseFormatA))</span>
<span id="cb6-9">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_answer_A"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [r.answer <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> responses_A]</span>
<span id="cb6-10">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response_A"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_answer_A"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(extract_answer)</span>
<span id="cb6-11">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_correct_A"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response_A"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ground_truth"</span>]).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb6-12">    </span>
<span id="cb6-13">    responses_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> asyncio.run(main(df_copy, ResponseFormatB))</span>
<span id="cb6-14">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_answer_B"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [r.answer <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> responses_B]</span>
<span id="cb6-15">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response_B"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw_answer_B"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(extract_answer)</span>
<span id="cb6-16">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_correct_B"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response_B"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ground_truth"</span>]).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb6-17">    </span>
<span id="cb6-18">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"run"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run</span>
<span id="cb6-19">    df_run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data_point_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ground_truth"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_correct_A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_correct_B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"run"</span>]]</span>
<span id="cb6-20">    </span>
<span id="cb6-21">    df_runs.append(df_run)</span></code></pre></div>
</div>
<p>We run the experiment multiple times with the same inputs to account for the randomness in the LLM’s responses. Ideally, we should run it more than three times, but I’m poor. So, we’ll just do it 3 times.</p>
<div id="cell-16" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">df_all_runs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(df_runs, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3">n_bootstraps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb7-4">bootstrap_accuracies_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-5">bootstrap_accuracies_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-6"></span>
<span id="cb7-7">data_point_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_all_runs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data_point_id'</span>].unique()</span>
<span id="cb7-8">n_data_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_point_ids)</span>
<span id="cb7-9"></span>
<span id="cb7-10">grouped_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_all_runs.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data_point_id'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_correct_A'</span>]</span>
<span id="cb7-11">grouped_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_all_runs.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data_point_id'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_correct_B'</span>]</span>
<span id="cb7-12"></span>
<span id="cb7-13">df_correct_counts_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grouped_A.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-14">df_total_counts_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grouped_A.count()</span>
<span id="cb7-15">df_correct_counts_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grouped_B.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-16">df_total_counts_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grouped_B.count()</span>
<span id="cb7-17"></span>
<span id="cb7-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_bootstraps):</span>
<span id="cb7-19">    sampled_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(data_point_ids, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_data_points, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-20">    sampled_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(sampled_ids).value_counts()</span>
<span id="cb7-21">    counts_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sampled_counts.index</span>
<span id="cb7-22">    </span>
<span id="cb7-23">    total_correct_counts_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_correct_counts_A.loc[counts_index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sampled_counts).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-24">    total_observations_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_total_counts_A.loc[counts_index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sampled_counts).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-25">    mean_accuracy_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_correct_counts_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_observations_A</span>
<span id="cb7-26">    bootstrap_accuracies_A.append(mean_accuracy_A)</span>
<span id="cb7-27">    </span>
<span id="cb7-28">    total_correct_counts_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_correct_counts_B.loc[counts_index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sampled_counts).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-29">    total_observations_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_total_counts_B.loc[counts_index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sampled_counts).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-30">    mean_accuracy_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_correct_counts_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_observations_B</span>
<span id="cb7-31">    bootstrap_accuracies_B.append(mean_accuracy_B)</span>
<span id="cb7-32"></span>
<span id="cb7-33">ci_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.percentile(bootstrap_accuracies_A, [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">97.5</span>])</span>
<span id="cb7-34">ci_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.percentile(bootstrap_accuracies_B, [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">97.5</span>])</span>
<span id="cb7-35"></span>
<span id="cb7-36">mean_accuracy_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_all_runs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_correct_A'</span>].mean()</span>
<span id="cb7-37">mean_accuracy_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_all_runs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_correct_B'</span>].mean()</span>
<span id="cb7-38"></span>
<span id="cb7-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb7-40">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Response format A - Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_accuracy_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">% CI: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ci_A[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">% - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ci_A[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span>
<span id="cb7-41">)</span>
<span id="cb7-42"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb7-43">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Response format B - Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_accuracy_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">% CI: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ci_B[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">% - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ci_B[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span>
<span id="cb7-44">)</span></code></pre></div>
</div>
<p>Then, you can build bootstrap confidence intervals for the accuracies of the two response formats. Given that I’m asking the LLM the same question multiple times, I went with an approach called <a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC5965657/">cluster bootstrapping</a>, which accounts for the fact that the data points are not independent.</p>
<p>It should take a few seconds to run. Once it’s done, you should see output like the following:</p>
<table class="table">
<thead>
<tr class="header">
<th>Response Format</th>
<th>Accuracy (95% CI)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A</td>
<td>46.67% (35.33% – 58.00%)</td>
</tr>
<tr class="even">
<td>B</td>
<td>33.33% (22.67% – 44.67%)</td>
</tr>
</tbody>
</table>
<p>These results suggest that the order of the fields in the JSON schema does matter.</p>
<p>But if you’re still unsure, you can perform a t-test to see if the two response formats are statistically different:</p>
<div id="cell-18" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">accuracies_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_all_runs.pivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data_point_id'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'run'</span>, values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_correct_A'</span>)</span>
<span id="cb8-2">accuracies_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_all_runs.pivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data_point_id'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'run'</span>, values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_correct_B'</span>)</span>
<span id="cb8-3"></span>
<span id="cb8-4">mean_accuracies_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracies_A.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-5">mean_accuracies_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracies_B.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-6"></span>
<span id="cb8-7">t_stat, p_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.ttest_rel(mean_accuracies_A, mean_accuracies_B, alternative<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'greater'</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"t-statistic: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t_stat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, p-value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p_value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<p>I got a p-value &lt;0.01, meaning I can reject the null hypothesis that the two response formats are the same.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Based on the results of the experiment, we can safely say that <code>ResponseFormatA</code> is better than <code>ResponseFormatB</code>.</p>
<p>But why?</p>
<p>In this case, it’s simple.</p>
<p>These response formats are meant to help the LLM reason step by step to arrive at the answer. This is known as <a href="https://en.wikipedia.org/wiki/Chain_of_thought_reasoning">chain of thought reasoning</a>. However, for it to work, we need the LLM to first provide us with the reasoning of how it arrived at the answer and then the answer.</p>
<p>In <code>ResponseFormatA</code>, we defined our Pydantic model with the reasoning first and the answer second. This means that the LLM will give us the reasoning first, and then provide the answer. Which is exactly what we want.</p>
<p><code>ResponseFormatB</code> works in the opposite way. This means that the LLM will give us the answer first, and then provide the reasoning. So our chain of thought reasoning becomes a <a href="https://www.promptingguide.ai/techniques/zeroshot">zero-shot prompt</a>. In this case, the reasoning is a byproduct of the answer.</p>
<p>So, to summarize, when using structured outputs, don’t put the cart before the horse.</p>
<p>That’s all! Let me know if you have any questions in the comments.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I’m referring to OpenAI models here. Open weight models allowed this using <a href="https://github.com/ggerganov/llama.cpp/blob/master/grammars/README.md">grammars</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Structured Outputs: Don’t Put the Cart Before the Horse},
  date = {2024-11-09},
  url = {https://dylancastillo.co/posts/llm-pydantic-order-matters.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Structured Outputs: Don’t Put the Cart
Before the Horse.”</span> November 9, 2024. <a href="https://dylancastillo.co/posts/llm-pydantic-order-matters.html">https://dylancastillo.co/posts/llm-pydantic-order-matters.html</a>.
</div></div></section></div> ]]></description>
  <category>llm</category>
  <category>openai</category>
  <category>pydantic</category>
  <category>python</category>
  <guid>https://dylancastillo.co/posts/llm-pydantic-order-matters.html</guid>
  <pubDate>Sat, 09 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Deploying a FastAPI app with Kamal, AWS ECR, and Github Actions</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/deploy-a-fastapi-app-with-kamal-aws-ecr-and-github-actions.html</link>
  <description><![CDATA[ 




<p>These days I use Kamal to deploy my FastAPI (or Django) projects. Kamal is a simpler alternative to <a href="https://kubernetes.io/">Kubernetes</a> that you can use to deploy containerized apps to a <a href="https://en.wikipedia.org/wiki/Virtual_private_server">VPS</a>.</p>
<p>Once you get the hang of it, it’ll only take you a few minutes to set up a CI/CD pipeline that automatically deploys your app to production with each push to the <em>main</em> branch.</p>
<p>In this tutorial, I’ll walk you through the process of deploying a FastAPI app with Kamal, AWS ECR, and Github Actions.</p>
<p>You can find the code for this tutorial in <a href="https://github.com/dylanjcastillo/fastapi-kamal-aws-gha-example">this repository</a>.</p>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>To make the most of this tutorial, you should:</p>
<ul>
<li>Have a <a href="https://fastapi.tiangolo.com/">FastAPI</a> app ready to deploy.</li>
<li>Have an <a href="https://aws.amazon.com/">AWS</a> account and its <a href="https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html">CLI</a> installed.</li>
<li>Be comfortable with <a href="https://www.docker.com/">Docker</a>.</li>
<li>Have a basic understanding of <a href="https://kamal-deploy.org/">Kamal</a>. You’ll need to install version <code>1.9.0</code> for this tutorial.</li>
<li>Have a basic understanding of <a href="https://docs.github.com/en/actions">Github Actions</a>.</li>
<li>Have a VPS with Ubuntu ready to host your app.</li>
</ul>
</section>
<section id="prepare-your-vps" class="level2">
<h2 class="anchored" data-anchor-id="prepare-your-vps">Prepare your VPS</h2>
<p>You’ll need to install docker, curl, git, and snapd on your VPS, and create a non-root user called <code>kamal</code> that can sudo. You should also set the <code>UID</code> and <code>GID</code> of the user to 1000.</p>
<p>If you’re using Hetzner, you can use my <a href="https://dylancastillo.co/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.html">terraform script</a> to prepare the VPS.</p>
<p>Otherwise, you can run these commands on your VPS’s terminal:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install docker, curl, and git, and snapd</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> update</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> docker.io curl git snapd</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start and enable the docker service</span></span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> start docker</span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> enable docker</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a non-root user called kamal</span></span>
<span id="cb1-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">useradd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /bin/bash <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> 1000 kamal</span>
<span id="cb1-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">usermod</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-aG</span> sudo kamal</span>
<span id="cb1-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kamal ALL=(ALL) NOPASSWD:ALL"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> /etc/sudoers.d/kamal</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add SSH key to login as kamal user</span></span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /home/kamal/.ssh</span>
<span id="cb1-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;YOUR_PUBLIC_SSH_KEY&gt;"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> /home/kamal/.ssh/authorized_keys <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># you need a public key to login as the kamal user</span></span>
<span id="cb1-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 700 /home/kamal/.ssh</span>
<span id="cb1-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /home/kamal/.ssh/authorized_keys</span>
<span id="cb1-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> kamal:kamal /home/kamal/.ssh</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Disable root login</span></span>
<span id="cb1-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sed</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/PermitRootLogin/d'</span> /etc/ssh/sshd_config</span>
<span id="cb1-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PermitRootLogin no"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> /etc/ssh/sshd_config</span>
<span id="cb1-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> restart sshd</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the kamal user to the docker group</span></span>
<span id="cb1-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">usermod</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-aG</span> docker kamal</span>
<span id="cb1-28"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> network create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--driver</span> bridge kamal_network</span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a folder for the Let's Encrypt ACME JSON</span></span>
<span id="cb1-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /letsencrypt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> /letsencrypt/acme.json <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /letsencrypt/acme.json</span>
<span id="cb1-32"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> kamal:kamal /letsencrypt</span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">reboot</span></span></code></pre></div>
<p>To run these commands, you need to login as root. This assumes that there isn’t already a non-root user with <code>UID</code> 1000. Otherwise, you’ll have to adjust the commands accordingly.</p>
<p>Also, if you don’t have a public SSH key for the “Add SSH key” step, you can generate one with the following command:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh-keygen</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> ed25519 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-C</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your-email@example.com"</span></span></code></pre></div>
<p>These commands will:</p>
<ol type="1">
<li>Install docker, curl, and git</li>
<li>Start and enable the docker service</li>
<li>Create a non-root user called kamal</li>
<li>Disable root login</li>
<li>Add the kamal user to the docker group (this allows the user to run docker without needing to use <code>sudo</code>)</li>
<li>Create a Docker bridge network for Traefik</li>
<li>Create a folder for the Let’s Encrypt ACME JSON file</li>
<li>Make the Let’s Encrypt ACME JSON folder writable by the kamal user</li>
<li>Restart the server</li>
</ol>
<p>Finally, configure the SSH key in your local <code>.ssh/config</code> file so you can login as the kamal user without using the root account.</p>
<pre><code>Host kamal
  HostName &lt;YOUR_VPS_IP&gt;
  User kamal
  IdentityFile ~/.ssh/&lt;YOUR_PRIVATE_SSH_KEY&gt;</code></pre>
</section>
<section id="create-a-dockerfile-for-your-fastapi-app" class="level2">
<h2 class="anchored" data-anchor-id="create-a-dockerfile-for-your-fastapi-app">Create a Dockerfile for your FastAPI app</h2>
<p>Kamal works with containerized apps, so you’ll need to have a Dockerfile. I also recommend using an <code>entrypoint.sh</code> script to run the application, because that also allows you to run commands in the container.</p>
<section id="dockerfile" class="level3">
<h3 class="anchored" data-anchor-id="dockerfile">Dockerfile</h3>
<p>Here’s the Dockerfile I’m using for my projects. You can use this as a template and adjust it to your needs.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Dockerfile</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="Dockerfile" style="background: #f1f3f5;"><pre class="sourceCode numberSource dockerfile number-lines code-with-copy"><code class="sourceCode dockerfile"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> python:3.10-slim <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> base</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> POETRY_HOME=/opt/poetry</span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> POETRY_VERSION=1.8.3</span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> PATH=${POETRY_HOME}/bin:${PATH}</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> update <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-install-recommends</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-9">    curl <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> clean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> /var/lib/apt/lists/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-sSL</span> https://install.python-poetry.org <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span></span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> builder</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> poetry.lock pyproject.toml ./</span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> config virtualenvs.in-project true <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-22">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--only</span> main <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-interaction</span></span>
<span id="cb4-23"></span>
<span id="cb4-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> runner</span>
<span id="cb4-25"></span>
<span id="cb4-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb4-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--from=builder</span> /app/.venv/ /app/.venv/</span>
<span id="cb4-28"></span>
<span id="cb4-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> . /app</span>
<span id="cb4-30"></span>
<span id="cb4-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> +x /app/entrypoint.sh</span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> runner <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> production</span>
<span id="cb4-34"></span>
<span id="cb4-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">EXPOSE</span> 8000</span>
<span id="cb4-36"></span>
<span id="cb4-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> user=kamal</span>
<span id="cb4-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> group=kamal</span>
<span id="cb4-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> uid=1000</span>
<span id="cb4-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> gid=1000</span>
<span id="cb4-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">groupadd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${gid}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${group}</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-42">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">useradd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${uid}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${group}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /bin/sh <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${user}</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-43">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${uid}</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${gid}</span> /app</span>
<span id="cb4-44"></span>
<span id="cb4-45"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">USER</span> ${uid}:${gid}</span>
<span id="cb4-46"></span>
<span id="cb4-47"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb4-48"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CMD</span> [ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/app/entrypoint.sh"</span> , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app"</span>]</span></code></pre></div>
</div>
<p>This multi-stage Dockerfile does the following:</p>
<ol type="1">
<li>Installs poetry and sets up the virtual environment</li>
<li>Creates the user <code>kamal</code> with the <code>UID</code> and <code>GID</code> 1000 and runs the application with that user.</li>
<li>Exposes port 8000 and runs the application by executing the <code>entrypoint.sh</code> script. Kamal automatically detects that is the port the app runs on and <a href="https://github.com/basecamp/kamal/issues/58">will use that to set up the reverse proxy</a>.</li>
</ol>
<p>Feel free to adjust this Dockerfile to your needs.</p>
</section>
<section id="entrypoint.sh-script" class="level3">
<h3 class="anchored" data-anchor-id="entrypoint.sh-script"><code>entrypoint.sh</code> script</h3>
<p>I use an <code>entrypoint.sh</code> script to run the application because that makes it easier to collect static files, run migrations when the container starts, and also running commands in the container.</p>
<p>Here’s an example of a simple <code>entrypoint.sh</code> script:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>entrypoint.sh</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="entrypoint.sh" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/sh</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb5-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Collecting static files"</span></span>
<span id="cb5-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> poetry run gunicorn <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> gunicorn.conf.py</span>
<span id="cb5-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb5-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$@</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
</div>
<p>This script starts the <code>gunicorn</code> server with <code>uvicorn</code> workers and some sensible defaults. It also allows you to pass other arguments to the script, which is useful if you want to run other commands in the container. You can add or remove commands to the script as needed.</p>
</section>
</section>
<section id="configure-an-ecr-registry-in-aws" class="level2">
<h2 class="anchored" data-anchor-id="configure-an-ecr-registry-in-aws">Configure an ECR registry in AWS</h2>
<p>Next, you’ll need a place to push and pull your Docker images. I use <a href="https://aws.amazon.com/ecr/">AWS ECR</a>, so that’s what I’ll show you how to do here. Kamal also supports <a href="https://kamal-deploy.org/docs/configuration/docker-registry/">other registries</a>.</p>
<p>Log in to the <a href="https://aws.amazon.com/console/">AWS Management Console</a> and go to Amazon ECR. Click on <code>Create repository</code> and set a name for your repository.</p>
<p>Then, create a new IAM user in your AWS account by going to Services &gt; IAM &gt; Users &gt; Add user.</p>
<p>During the process you’ll have to assign a permissions to the user. You can create a new policy with the following content and attach it to the user:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2012-10-17"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Statement"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-5">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Sid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ListImagesInRepository"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Effect"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Allow"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-7">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:ListImages"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-8">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Resource"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arn:aws:ecr:&lt;REGION&gt;:&lt;ACCOUNT_ID&gt;:repository/&lt;REPOSITORY_NAME&gt;"</span></span>
<span id="cb6-10">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-13">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Sid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GetAuthorizationToken"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-14">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Effect"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Allow"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-15">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:GetAuthorizationToken"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-16">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Resource"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span></span>
<span id="cb6-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-19">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Sid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ManageRepositoryContents"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-20">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Effect"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Allow"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-21">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-22">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:BatchCheckLayerAvailability"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-23">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:GetDownloadUrlForLayer"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-24">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:GetRepositoryPolicy"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-25">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:DescribeRepositories"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:ListImages"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-27">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:DescribeImages"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-28">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:BatchGetImage"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-29">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:InitiateLayerUpload"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-30">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:UploadLayerPart"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-31">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:CompleteLayerUpload"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-32">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:PutImage"</span></span>
<span id="cb6-33">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-34">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Resource"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-35">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arn:aws:ecr:&lt;REGION&gt;:&lt;ACCOUNT_ID&gt;:repository/&lt;REPOSITORY_NAME&gt;"</span></span>
<span id="cb6-36">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-37">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-38">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-39"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This policy enables users to list, access, and manage the ECR repository they have previously created, as well as obtain an authorization token necessary for pushing and pulling images. You must replace <code>&lt;REGION&gt;</code>, <code>&lt;ACCOUNT_ID&gt;</code>, and <code>&lt;REPOSITORY_NAME&gt;</code> with the specific details of your own repository.</p>
<p>Then, select the user you created and navigate to Security credentials &gt; Access keys &gt; Create access key. Download the generated CSV file and store it in a secure location.</p>
<p>The GitHub Actions workflow will use these credentials for pushing and pulling images from the ECR registry.</p>
</section>
<section id="set-up-kamal-in-your-project" class="level2">
<h2 class="anchored" data-anchor-id="set-up-kamal-in-your-project">Set up Kamal in your project</h2>
<p>Open your FastAPI project in your favorite code editor. Create a folder called <code>deploy</code> in the root directory. Then go into the folder and initialize Kamal:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kamal</span> init</span></code></pre></div>
<p>This will create two folders (<code>.kamal/</code> and <code>config/</code>) and an <code>.env</code> file. Inside <code>config/</code>, you’ll find a <code>deploy.yml</code> file. This is where you’ll provide the instructions for Kamal to build and deploy your app.</p>
<p>You can use the following <code>deploy.yml</code> file as a template for your FastAPI app:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deploy.yml</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename="deploy.yml" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> example</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> example</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">user</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kamal</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">secret</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> FASTAPI_ENV</span></span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traefik</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">publish</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"443:443"</span></span>
<span id="cb8-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volume</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/letsencrypt/:/letsencrypt/"</span></span>
<span id="cb8-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">memory</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 500m</span></span>
<span id="cb8-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">network</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> private_network</span></span>
<span id="cb8-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">entryPoints.web.address</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":80"</span></span>
<span id="cb8-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">entryPoints.websecure.address</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":443"</span></span>
<span id="cb8-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">entryPoints.web.http.redirections.entryPoint.to</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> websecure</span></span>
<span id="cb8-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">entryPoints.web.http.redirections.entryPoint.scheme</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https</span></span>
<span id="cb8-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">entryPoints.web.http.redirections.entrypoint.permanent</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">certificatesResolvers.letsencrypt.acme.email</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;YOUR_EMAIL&gt;"</span></span>
<span id="cb8-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">certificatesResolvers.letsencrypt.acme.storage</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/letsencrypt/acme.json"</span></span>
<span id="cb8-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">certificatesResolvers.letsencrypt.acme.httpchallenge</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> web</span></span>
<span id="cb8-30"></span>
<span id="cb8-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">servers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">web</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hosts</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">128.140.0.209</span></span>
<span id="cb8-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">healthcheck</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">port</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8000</span></span>
<span id="cb8-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interval</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 5s</span></span>
<span id="cb8-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">network</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> private_network</span></span>
<span id="cb8-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traefik.http.routers.app.tls</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traefik.http.routers.app.entrypoints</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> websecure</span></span>
<span id="cb8-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traefik.http.routers.app.rule</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Host(`&lt;YOUR_DOMAIN&gt;`)</span></span>
<span id="cb8-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traefik.http.routers.app.tls.certresolver</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> letsencrypt</span></span>
<span id="cb8-45"></span>
<span id="cb8-46"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registry</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com</span></span>
<span id="cb8-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">username</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> AWS</span></span>
<span id="cb8-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">password</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> KAMAL_REGISTRY_PASSWORD</span></span>
<span id="cb8-51"></span>
<span id="cb8-52"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">builder</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-53"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dockerfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../Dockerfile"</span></span>
<span id="cb8-54"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../"</span></span>
<span id="cb8-55"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">multiarch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb8-56"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cache</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-57"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gha</span></span></code></pre></div>
</div>
<p>This will set up your app and a reverse proxy using Traefik (with automatic SSL certificates using Let’s Encrypt). Remember to replace the placeholders with your own values. It will also do a healthcheck on <code>/up</code> on port 8000.</p>
<section id="test-the-configuration-locally" class="level3">
<h3 class="anchored" data-anchor-id="test-the-configuration-locally">Test the configuration locally</h3>
<p>To test it locally, first, you must define the required environment variables in <code>.env</code>, such as keys for AI services, email providers, etc.</p>
<p>You’ll also need to get a temporary password to authenticate into the ECR registry. You can get this password by running the following command from your terminal:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">aws</span> ecr get-login-password <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--region</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>YOUR_REGION<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>You should copy the output of this command and paste it in the <code>KAMAL_REGISTRY_PASSWORD</code> field in the <code>.env</code> file.</p>
<p>Then, run the following command to deploy your application to your VPS:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kamal</span> env push</span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kamal</span> deploy</span></code></pre></div>
<p>The first command will push the environment variables to the VPS. The second command will build the Docker image, push it to the ECR registry, and deploy it to your VPS.</p>
<p>After a few minutes, your app should be live at <code>https://&lt;YOUR_DOMAIN&gt;</code>.</p>
<p>If you see any errors, you can:</p>
<ol type="1">
<li>Run <code>kamal app logs</code> to see the logs of the app.</li>
<li>Open a terminal in the container by running <code>kamal app exec -it bash</code>.</li>
</ol>
<p>This is how I usually debug the app.</p>
</section>
</section>
<section id="automate-the-deployment-with-github-actions" class="level2">
<h2 class="anchored" data-anchor-id="automate-the-deployment-with-github-actions">Automate the deployment with Github Actions</h2>
<p>Now that you have a working deployment process in your local environment, you can set up your CI/CD pipeline using GitHub Actions.</p>
<p>Create a new file in the <code>.github/workflows</code> folder called <code>deploy.yml</code> and add the following code:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deploy FastAPI app to VPS</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">concurrency</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ github.workflow }}-${{ github.ref }}</span></span>
<span id="cb11-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cancel-in-progress</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb11-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">workflow_dispatch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-10"></span>
<span id="cb11-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deploy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Checkout</span></span>
<span id="cb11-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> webfactory/ssh-agent@v0.7.0</span></span>
<span id="cb11-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh-private-key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.VPS_SSH_PRIVATE_KEY }}</span></span>
<span id="cb11-22"></span>
<span id="cb11-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Set up Ruby and install kamal</span></span>
<span id="cb11-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ruby/setup-ruby@v1</span></span>
<span id="cb11-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ruby-version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2.2</span></span>
<span id="cb11-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gem install kamal -v 1.9.0</span></span>
<span id="cb11-28"></span>
<span id="cb11-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Configure AWS credentials</span></span>
<span id="cb11-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> aws-actions/configure-aws-credentials@v4</span></span>
<span id="cb11-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-access-key-id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_ACCESS_KEY_ID_ECR }}</span></span>
<span id="cb11-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-secret-access-key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_SECRET_ACCESS_KEY_ECR }}</span></span>
<span id="cb11-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-region</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> us-east-1</span></span>
<span id="cb11-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mask-aws-account-id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # otherwise the mask will hide your account ID and cause errors in the deployment</span></span>
<span id="cb11-36"></span>
<span id="cb11-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Login to AWS ECR</span></span>
<span id="cb11-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> login-ecr</span></span>
<span id="cb11-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> aws-actions/amazon-ecr-login@v2</span></span>
<span id="cb11-40"></span>
<span id="cb11-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Set up Docker Buildx for cache</span></span>
<span id="cb11-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker/setup-buildx-action@v3</span></span>
<span id="cb11-43"></span>
<span id="cb11-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Expose GitHub Runtime for cache</span></span>
<span id="cb11-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> crazy-max/ghaction-github-runtime@v3</span></span>
<span id="cb11-46"></span>
<span id="cb11-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create .env file</span></span>
<span id="cb11-48"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb11-49">          cd &lt;YOUR_PROJECT_ROOT&gt;/deploy</span>
<span id="cb11-50">          touch .env</span>
<span id="cb11-51">          echo KAMAL_REGISTRY_PASSWORD="${{ steps.login-ecr.outputs.docker_password_&lt;YOUR_ACCOUNT_ID&gt;_dkr_ecr_&lt;YOUR_REGION&gt;_amazonaws_com }}" &gt;&gt; .env</span>
<span id="cb11-52">          # if you have other secrets, add them here</span>
<span id="cb11-53">          cat .env</span>
<span id="cb11-54"></span>
<span id="cb11-55"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Kamal Deploy</span></span>
<span id="cb11-56"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kamal-deploy</span></span>
<span id="cb11-57"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb11-58">          cd &lt;YOUR_PROJECT_ROOT&gt;/deploy</span>
<span id="cb11-59">          kamal lock release</span>
<span id="cb11-60">          kamal env push</span>
<span id="cb11-61">          kamal deploy</span></code></pre></div>
<p>This workflow will:</p>
<ol type="1">
<li>Checkout the code</li>
<li>Set up the Ruby environment and install Kamal</li>
<li>Configure the AWS credentials</li>
<li>Login to the AWS ECR registry</li>
<li>Set up Docker Buildx for cache</li>
<li>Expose GitHub Runtime for cache</li>
<li>Create the <code>.env</code> file</li>
<li>Run Kamal deploy</li>
</ol>
<p>It will run everytime you make a push to the main branch or by manually triggering the workflow. It’ll cancel any in-progress runs to avoid conflicts.</p>
<p>Also, before you push your code to the repository, you’ll need to add the following secrets to the repository:</p>
<ul>
<li><code>VPS_SSH_PRIVATE_KEY</code>: The private key to connect to your VPS</li>
<li><code>AWS_ACCESS_KEY_ID_ECR</code>: The access key ID for the AWS ECR registry</li>
<li><code>AWS_SECRET_ACCESS_KEY_ECR</code>: The secret access key for the AWS ECR registry</li>
</ul>
<p>Finally, to speed up the deployment, add these options to the <code>builder</code> section of the <code>deploy.yml</code> file:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">builder</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb12-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dockerfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../Dockerfile"</span></span>
<span id="cb12-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../"</span></span>
<span id="cb12-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">multiarch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # new</span></span>
<span id="cb12-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cache</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # new</span></span>
<span id="cb12-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gha</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # new</span></span></code></pre></div>
<p>This will enable the Docker Buildx cache for the build process in Github Actions. You can set <code>multiarch</code> to <code>false</code> if your CI pipeline shares the same architecture as your VPS, which was the case for me.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>You now have a fully automated deployment pipeline for your FastAPI app. A push to the <code>main</code> branch will trigger the workflow, that will build the Docker image, push it to the ECR registry, and deploy it to your VPS.</p>
<p>Break free from the tyranny of manual deployments and expensive cloud services. Sleep like a baby and let Kamal handle your deployments.</p>
<p>If you have any questions or feedback, please feel free to leave a comment below.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Deploying a {FastAPI} App with {Kamal,} {AWS} {ECR,} and
    {Github} {Actions}},
  date = {2024-09-21},
  url = {https://dylancastillo.co/posts/deploy-a-fastapi-app-with-kamal-aws-ecr-and-github-actions.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Deploying a FastAPI App with Kamal, AWS
ECR, and Github Actions.”</span> September 21, 2024. <a href="https://dylancastillo.co/posts/deploy-a-fastapi-app-with-kamal-aws-ecr-and-github-actions.html">https://dylancastillo.co/posts/deploy-a-fastapi-app-with-kamal-aws-ecr-and-github-actions.html</a>.
</div></div></section></div> ]]></description>
  <category>fastapi</category>
  <category>kamal</category>
  <category>aws</category>
  <guid>https://dylancastillo.co/posts/deploy-a-fastapi-app-with-kamal-aws-ecr-and-github-actions.html</guid>
  <pubDate>Sat, 21 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Deploying a Django app with Kamal 2, AWS ECR, and Github Actions</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/deploy-a-django-app-with-kamal-aws-ecr-and-github-actions.html</link>
  <description><![CDATA[ 




<p>Every other night, my wife wakes me up to tell me I’m muttering unintelligible phrases in my sleep: “restart nginx,” “the SSL certificate failed to validate,” or “how do I exit vim?”</p>
<p>I still suffer from PTSD from the days of manually deploying web apps. But since switching to Kamal, I’ve been sleeping like a baby<sup>1</sup>.</p>
<p>Kamal is sort of a lightweight version of <a href="https://kubernetes.io/">Kubernetes</a> that you can use to deploy containerized apps to a <a href="https://en.wikipedia.org/wiki/Virtual_private_server">VPS</a>. It has a bit of a learning curve, but once you get the hang of it, it’ll take you less than 5 minutes to get an app in production with a CI/CD pipeline.</p>
<p>A single push to main, and that green GitHub Actions checkmark confirms that your 2-pixel padding change is live for the world to admire.</p>
<p>In this tutorial, I’ll walk you through the process of deploying a Django app with Kamal, AWS ECR, and Github Actions.</p>
<p>You can find the code for this tutorial in <a href="https://github.com/dylanjcastillo/django-kamal-aws-gha-example">this repository</a>.</p>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>To make the most of this tutorial, you should:</p>
<ul>
<li>Have an <a href="https://aws.amazon.com/">AWS</a> account and its <a href="https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html">CLI</a> installed.</li>
<li>Be comfortable with <a href="https://www.docker.com/">Docker</a>.</li>
<li>Have a basic understanding of <a href="https://kamal-deploy.org/">Kamal</a>. You’ll need to install version <code>1.9.0</code> for this tutorial.</li>
<li>Have a basic understanding of <a href="https://docs.github.com/en/actions">Github Actions</a>.</li>
<li>Have a VPS with Ubuntu ready to host your app.</li>
</ul>
<p>Ideally, you should also have a Django project ready to deploy. But if you don’t have one, you can use this sample <a href="https://github.com/dylanjcastillo/django-kamal-aws-gha-example">Django project</a> for the tutorial.</p>
</section>
<section id="prepare-the-vps-for-kamal" class="level2">
<h2 class="anchored" data-anchor-id="prepare-the-vps-for-kamal">Prepare the VPS for Kamal</h2>
<p>At a minimum, you’ll need to install docker, curl, git, and snapd on your VPS, and create a non-root user called <code>kamal</code> that can sudo. That user should have a 1000 <code>UID</code> and <code>GID</code>.</p>
<p>I have a <a href="https://dylancastillo.co/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.html">terraform script</a> that will take care of this for you if you’re using Hetzner.</p>
<p>But if you’d like to do it manually, you can run these commands on your VPS’s terminal:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install docker, curl, and git, and snapd</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> update</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> docker.io curl git snapd</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start and enable the docker service</span></span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> start docker</span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> enable docker</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a non-root user called kamal</span></span>
<span id="cb1-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">useradd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /bin/bash <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> 1000 kamal</span>
<span id="cb1-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">usermod</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-aG</span> sudo kamal</span>
<span id="cb1-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kamal ALL=(ALL) NOPASSWD:ALL"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> /etc/sudoers.d/kamal</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SSH key to login as kamal user</span></span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /home/kamal/.ssh</span>
<span id="cb1-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;YOUR_PUBLIC_SSH_KEY&gt;"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> /home/kamal/.ssh/authorized_keys</span>
<span id="cb1-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 700 /home/kamal/.ssh</span>
<span id="cb1-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /home/kamal/.ssh/authorized_keys</span>
<span id="cb1-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> kamal:kamal /home/kamal/.ssh</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Disable root login</span></span>
<span id="cb1-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sed</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/PermitRootLogin/d'</span> /etc/ssh/sshd_config</span>
<span id="cb1-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PermitRootLogin no"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> /etc/ssh/sshd_config</span>
<span id="cb1-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> restart sshd</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the kamal user to the docker group</span></span>
<span id="cb1-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">usermod</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-aG</span> docker kamal</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a folder for the Let's Encrypt ACME JSON</span></span>
<span id="cb1-30"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /letsencrypt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> /letsencrypt/acme.json <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /letsencrypt/acme.json</span>
<span id="cb1-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> kamal:kamal /letsencrypt</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a folder for the SQLite database (skip this if you're using a different database)</span></span>
<span id="cb1-34"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /db</span>
<span id="cb1-35"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> 1000:1000 /db</span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a folder for the redis data (skip this if you're not using redis)</span></span>
<span id="cb1-38"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /data</span>
<span id="cb1-39"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> 1000:1000 /data</span>
<span id="cb1-40"></span>
<span id="cb1-41"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">reboot</span></span></code></pre></div>
<p>This assumes that you’re using a root user to connect to your server and that there isn’t a non-root user with <code>UID</code> 1000 already. Otherwise, adjust the commands accordingly.</p>
<p>Also, if you don’t have a public SSH key for the “Add SSH key” step, you can generate one with the following command:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh-keygen</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> ed25519 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-C</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your-email@example.com"</span></span></code></pre></div>
<p>These commands will:</p>
<ol type="1">
<li>Install docker, curl, git, and snapd</li>
<li>Start and enable the docker service</li>
<li>Create a non-root user called kamal</li>
<li>Remove the root login</li>
<li>Add the kamal user to the docker group</li>
<li>Create a bridge network for Traefik, SQLite, and redis</li>
<li>Create a folder for the Let’s Encrypt ACME JSON</li>
<li>Make the Let’s Encrypt ACME JSON folder writable by the kamal user</li>
<li>Create a folder for the SQLite database and redis data</li>
<li>Make the SQLite database and redis data folders writable by the kamal user</li>
<li>Restart the server</li>
</ol>
<p>If you’re not using SQLite or redis, you can skip the database and redis data folder steps.</p>
<p>Finally, configure the SSH key in your local <code>.ssh/config</code> file so you can login as the kamal user without using the root account.</p>
<pre><code>Host kamal
  HostName &lt;YOUR_VPS_IP&gt;
  User kamal
  IdentityFile ~/.ssh/&lt;YOUR_PRIVATE_SSH_KEY&gt;</code></pre>
</section>
<section id="create-a-dockerfile-for-your-app" class="level2">
<h2 class="anchored" data-anchor-id="create-a-dockerfile-for-your-app">Create a Dockerfile for your app</h2>
<p>Kamal is meant to deploy containerized apps, so you’ll need to have a Dockerfile for your app. I also recommend using an <code>entrypoint.sh</code> script to run the application.</p>
<section id="dockerfile" class="level3">
<h3 class="anchored" data-anchor-id="dockerfile">Dockerfile</h3>
<p>Here’s the Dockerfile I’m using for my projects. You can use this as a template and adjust it to your needs.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Dockerfile</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="Dockerfile" style="background: #f1f3f5;"><pre class="sourceCode numberSource dockerfile number-lines code-with-copy"><code class="sourceCode dockerfile"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> python:3.10-slim <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> base</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> POETRY_HOME=/opt/poetry</span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> POETRY_VERSION=1.8.3</span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> PATH=${POETRY_HOME}/bin:${PATH}</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> update <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-install-recommends</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-9">    curl <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> clean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> /var/lib/apt/lists/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-sSL</span> https://install.python-poetry.org <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span></span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> builder</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> poetry.lock pyproject.toml ./</span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> config virtualenvs.in-project true <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-22">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--only</span> main <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-interaction</span></span>
<span id="cb4-23"></span>
<span id="cb4-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> runner</span>
<span id="cb4-25"></span>
<span id="cb4-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb4-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--from=builder</span> /app/.venv/ /app/.venv/</span>
<span id="cb4-28"></span>
<span id="cb4-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> . /app</span>
<span id="cb4-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /data /db</span>
<span id="cb4-31"></span>
<span id="cb4-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> +x /app/src/entrypoint.sh</span>
<span id="cb4-33"></span>
<span id="cb4-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> runner <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> production</span>
<span id="cb4-35"></span>
<span id="cb4-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">EXPOSE</span> 8000</span>
<span id="cb4-37"></span>
<span id="cb4-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> user=django</span>
<span id="cb4-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> group=django</span>
<span id="cb4-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> uid=1000</span>
<span id="cb4-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> gid=1000</span>
<span id="cb4-42"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">groupadd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${gid}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${group}</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-43">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">useradd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${uid}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${group}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /bin/sh <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${user}</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-44">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${uid}</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${gid}</span> /app /data /db</span>
<span id="cb4-45"></span>
<span id="cb4-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">USER</span> ${uid}:${gid}</span>
<span id="cb4-47"></span>
<span id="cb4-48"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app/src</span>
<span id="cb4-49"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CMD</span> [ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/app/src/entrypoint.sh"</span> , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app"</span>]</span></code></pre></div>
</div>
<p>This is a multi-stage Dockerfile that:</p>
<ol type="1">
<li>Installs poetry and sets up the virtual environment</li>
<li>Creates the user <code>django</code> with the <code>UID</code> and <code>GID</code> 1000 and runs the application with that user. It’s important that this user has the same <code>UID</code> and <code>GID</code> as the owner of the folders outside the container. Otherwise, you’ll have issues with <a href="https://medium.com/@nielssj/docker-volumes-and-file-system-permissions-772c1aee23ca">file permissions</a> and the app won’t persist data.</li>
<li>Exposes port 8000 and runs the application by executing the <code>entrypoint.sh</code> script. By exposing the port, Kamal will automatically detect that is the port the app runs on and <a href="https://github.com/basecamp/kamal/issues/58">will use that to set up the reverse proxy</a>.</li>
</ol>
<p>Feel free to adjust this Dockerfile to your needs. If you are not planning on using redis or a SQLite database in your same VPS, you can remove those parts from the Dockerfile.</p>
</section>
<section id="entrypoint.sh-script" class="level3">
<h3 class="anchored" data-anchor-id="entrypoint.sh-script"><code>entrypoint.sh</code> script</h3>
<p>I use an <code>entrypoint.sh</code> script to run the application because that makes it easier to collect static files, run migrations when the container starts, and also running commands in the container.</p>
<p>Here’s an example of a simple <code>entrypoint.sh</code> script:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>entrypoint.sh</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="entrypoint.sh" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/sh</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb5-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Collecting static files"</span></span>
<span id="cb5-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> run python manage.py collectstatic <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--clear</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--noinput</span></span>
<span id="cb5-8"></span>
<span id="cb5-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running migrations"</span></span>
<span id="cb5-10">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> run python manage.py migrate</span>
<span id="cb5-11"></span>
<span id="cb5-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running in production mode"</span></span>
<span id="cb5-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> poetry run gunicorn <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> gunicorn.conf.py</span>
<span id="cb5-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb5-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$@</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
</div>
<p>This script just collects static files, runs migrations, and starts the Gunicorn server with the configuration in the <code>gunicorn.conf.py</code> file. You can add or remove commands to the script as needed.</p>
</section>
</section>
<section id="configure-an-ecr-registry-in-aws" class="level2">
<h2 class="anchored" data-anchor-id="configure-an-ecr-registry-in-aws">Configure an ECR registry in AWS</h2>
<p>Next, you’ll need a place to push and pull your Docker images. I like using AWS, so that’s what I’ll show you how to do. If you prefer other services, take a look at the instructions for other registries in the <a href="https://kamal-deploy.org/docs/configuration/docker-registry/">Kamal documentation</a>.</p>
<p>Log in to the <a href="https://aws.amazon.com/console/">AWS Management Console</a> and go to Amazon ECR. Click on <code>Create repository</code> and set a name for your repository.</p>
<p>Then, create a new IAM user in your AWS account by going to Services &gt; IAM &gt; Users &gt; Add user.</p>
<p>Instead of using a predefined policy, create a new one with the following JSON and attach it to the user:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2012-10-17"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Statement"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-5">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Sid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ListImagesInRepository"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Effect"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Allow"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-7">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:ListImages"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-8">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Resource"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arn:aws:ecr:&lt;REGION&gt;:&lt;ACCOUNT_ID&gt;:repository/&lt;REPOSITORY_NAME&gt;"</span></span>
<span id="cb6-10">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-13">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Sid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GetAuthorizationToken"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-14">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Effect"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Allow"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-15">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:GetAuthorizationToken"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-16">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Resource"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span></span>
<span id="cb6-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-19">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Sid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ManageRepositoryContents"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-20">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Effect"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Allow"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-21">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-22">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:BatchCheckLayerAvailability"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-23">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:GetDownloadUrlForLayer"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-24">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:GetRepositoryPolicy"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-25">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:DescribeRepositories"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:ListImages"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-27">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:DescribeImages"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-28">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:BatchGetImage"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-29">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:InitiateLayerUpload"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-30">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:UploadLayerPart"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-31">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:CompleteLayerUpload"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-32">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:PutImage"</span></span>
<span id="cb6-33">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-34">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Resource"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb6-35">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arn:aws:ecr:&lt;REGION&gt;:&lt;ACCOUNT_ID&gt;:repository/&lt;REPOSITORY_NAME&gt;"</span></span>
<span id="cb6-36">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-37">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-38">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-39"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This policy allows the user to list, get, and manage the ECR repository you created earlier and get the authorization token to push and pull the image. You will need to replace the <code>&lt;REGION&gt;</code>, <code>&lt;ACCOUNT_ID&gt;</code>, and <code>&lt;REPOSITORY_NAME&gt;</code> with the values for your repository.</p>
<p>Next, select the user you created and go to Security credentials &gt; Access keys &gt; Create access key. Download the CSV file and keep it in a secure location.</p>
<p>You will use those credentials in your Github Actions pipeline to push and pull the image from the ECR registry.</p>
</section>
<section id="set-up-kamal-in-your-project" class="level2">
<h2 class="anchored" data-anchor-id="set-up-kamal-in-your-project">Set up Kamal in your project</h2>
<p>Open your Django project in your favorite code editor. Create a folder called <code>deploy</code> in the root directory. Then go into the folder and initialize Kamal:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kamal</span> init</span></code></pre></div>
<p>This will create two folders (<code>.kamal/</code> and <code>config/</code>), a <code>deploy.yml</code> file, and a <code>secrets</code> file, and a <code>.hooks/</code> folder that contains the hooks for the deployment. This is where you’ll provide the instructions for Kamal to build and deploy your app.</p>
<p>You can use the following <code>deploy.yml</code> file as a template for your Django app:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deploy.yml</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename="deploy.yml" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> example</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> example</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">user</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kamal</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">secret</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_SECRET_KEY</span></span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">proxy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssl</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">host</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> example.iwanalabs.com</span></span>
<span id="cb8-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">app_port</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8000</span></span>
<span id="cb8-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">healthcheck</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /kamal/up/</span></span>
<span id="cb8-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interval</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">timeout</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-20"></span>
<span id="cb8-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">servers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">web</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">128.140.0.209</span></span>
<span id="cb8-24"></span>
<span id="cb8-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accessories</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">redis</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> redis:7.0</span></span>
<span id="cb8-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">roles</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> web</span></span>
<span id="cb8-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> --maxmemory 200m --maxmemory-policy allkeys-lru</span></span>
<span id="cb8-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /var/redis/data:/data/redis</span></span>
<span id="cb8-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">memory</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 250m</span></span>
<span id="cb8-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">network</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> private_network</span></span>
<span id="cb8-36"></span>
<span id="cb8-37"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/db/:/app/db/"</span></span>
<span id="cb8-39"></span>
<span id="cb8-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registry</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com</span></span>
<span id="cb8-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">username</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> AWS</span></span>
<span id="cb8-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">password</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> KAMAL_REGISTRY_PASSWORD</span></span>
<span id="cb8-45"></span>
<span id="cb8-46"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">builder</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> amd64</span></span>
<span id="cb8-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dockerfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../Dockerfile"</span></span>
<span id="cb8-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../"</span></span>
<span id="cb8-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cache</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-51"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gha</span></span></code></pre></div>
</div>
<p>This will set up your app and a <a href="https://github.com/basecamp/kamal-proxy">Kamal’s proxy server</a> (with automatic SSL certificates using Let’s Encrypt), a Redis database, and a volume to persist the SQLite database. It will also do a healthcheck on <code>/kamal/up/</code> on port <code>8000</code>. Remember to replace the placeholders with your own values.</p>
<p>To pass the healthcheck, you will need to add a small middleware that bypasses Django’s built-in <a href="https://github.com/basecamp/kamal/issues/992">security middleware</a>.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>src/config/middleware.py</strong></pre>
</div>
<div class="sourceCode" id="cb9" data-filename="src/config/middleware.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.http <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HttpResponse</span>
<span id="cb9-2"></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> HealthCheckMiddleware:</span>
<span id="cb9-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, get_response):</span>
<span id="cb9-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_response</span>
<span id="cb9-7"></span>
<span id="cb9-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, request):</span>
<span id="cb9-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> request.path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/kamal/up/"</span>:</span>
<span id="cb9-10">            response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HttpResponse(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OK"</span>)</span>
<span id="cb9-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb9-12">            response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_response(request)</span>
<span id="cb9-13"></span>
<span id="cb9-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response</span></code></pre></div>
</div>
<p>And add it to the <code>MIDDLEWARE</code> list in the <code>settings.py</code> file.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>src/config/settings.py</strong></pre>
</div>
<div class="sourceCode" id="cb10" data-filename="src/config/settings.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">MIDDLEWARE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb10-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"config.middleware.HealthCheckMiddleware"</span>,</span>
<span id="cb10-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># other middlewares...</span></span>
<span id="cb10-4">]</span></code></pre></div>
</div>
<section id="test-the-configuration-locally" class="level3">
<h3 class="anchored" data-anchor-id="test-the-configuration-locally">Test the configuration locally</h3>
<p>To test it locally, first, you’ll have to define the required environment variables in the <code>.env</code> file, such as the Django secret key, OpenAI API key, and any other secrets you need.</p>
<p>You’ll also need to get a temporary password for the ECR registry. You can get this password by running the following command:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">aws</span> ecr get-login-password <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--region</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>YOUR_REGION<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>You should copy the output of this command and paste it in the <code>KAMAL_REGISTRY_PASSWORD</code> field in the <code>.env</code> file.</p>
<p>Then, you should define the required environment variables in <code>.kamal/secrets</code> as follows:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.kamal/secrets</strong></pre>
</div>
<div class="sourceCode" id="cb12" data-filename=".kamal/secrets" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">KAMAL_REGISTRY_PASSWORD</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$KAMAL_REGISTRY_PASSWORD</span></span>
<span id="cb12-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">DJANGO_SECRET_KEY</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$DJANGO_SECRET_KEY</span></span>
<span id="cb12-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">OPENAI_API_KEY</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$OPENAI_API_KEY</span></span></code></pre></div>
</div>
<p>Then, run the following command to deploy your application to your VPS:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kamal</span> deploy</span></code></pre></div>
<p>The first command will push the environment variables to the VPS. The second command will build the Docker image, push it to the ECR registry, and deploy it to your VPS.</p>
<p>After a few minutes, your app should be live at <code>https://&lt;YOUR_DOMAIN&gt;</code>.</p>
<p>If you see any errors, there are two things you can do:</p>
<ol type="1">
<li>Run <code>kamal app logs</code> to see the logs of the app.</li>
<li>Open a terminal in the container by running <code>kamal app exec -it bash</code>.</li>
</ol>
<p>This is how I usually debug the app.</p>
</section>
</section>
<section id="automate-the-deployment-with-github-actions" class="level2">
<h2 class="anchored" data-anchor-id="automate-the-deployment-with-github-actions">Automate the deployment with Github Actions</h2>
<p>Now that you have a working deployment process in your local environment, you can automate the deployment with Github Actions.</p>
<p>Create a new file in the <code>.github/workflows</code> folder called <code>deploy.yml</code> and add the following code:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deploy webapp to VPS</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">concurrency</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ github.workflow }}-${{ github.ref }}</span></span>
<span id="cb14-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cancel-in-progress</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb14-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">workflow_dispatch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-10"></span>
<span id="cb14-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deploy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb14-14"></span>
<span id="cb14-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Checkout</span></span>
<span id="cb14-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb14-18"></span>
<span id="cb14-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> webfactory/ssh-agent@v0.7.0</span></span>
<span id="cb14-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh-private-key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.VPS_SSH_PRIVATE_KEY }}</span></span>
<span id="cb14-22"></span>
<span id="cb14-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Set up Ruby and install kamal</span></span>
<span id="cb14-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ruby/setup-ruby@v1</span></span>
<span id="cb14-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ruby-version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2.2</span></span>
<span id="cb14-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gem install kamal -v 1.9.0</span></span>
<span id="cb14-28"></span>
<span id="cb14-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Configure AWS credentials</span></span>
<span id="cb14-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> aws-actions/configure-aws-credentials@v4</span></span>
<span id="cb14-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-access-key-id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_ACCESS_KEY_ID_ECR }}</span></span>
<span id="cb14-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-secret-access-key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_SECRET_ACCESS_KEY_ECR }}</span></span>
<span id="cb14-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-region</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> us-east-1</span></span>
<span id="cb14-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mask-aws-account-id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb14-36"></span>
<span id="cb14-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Login to AWS ECR</span></span>
<span id="cb14-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> login-ecr</span></span>
<span id="cb14-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> aws-actions/amazon-ecr-login@v2</span></span>
<span id="cb14-40"></span>
<span id="cb14-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Set up Docker Buildx for cache</span></span>
<span id="cb14-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker/setup-buildx-action@v3</span></span>
<span id="cb14-43"></span>
<span id="cb14-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Expose GitHub Runtime for cache</span></span>
<span id="cb14-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> crazy-max/ghaction-github-runtime@v3</span></span>
<span id="cb14-46"></span>
<span id="cb14-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Kamal Deploy</span></span>
<span id="cb14-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kamal-deploy</span></span>
<span id="cb14-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KAMAL_REGISTRY_PASSWORD</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ steps.login-ecr.outputs.docker_password_&lt;account_id&gt;_dkr_ecr_&lt;region&gt;_amazonaws_com }}</span></span>
<span id="cb14-51"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DJANGO_SECRET_KEY</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.DJANGO_SECRET_KEY }}</span></span>
<span id="cb14-52"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb14-53">          cd deploy</span>
<span id="cb14-54">          kamal lock release</span>
<span id="cb14-55">          kamal deploy</span></code></pre></div>
<p>This workflow will:</p>
<ol type="1">
<li>Checkout the code</li>
<li>Set up the Ruby environment and install Kamal</li>
<li>Configure the AWS credentials</li>
<li>Login to the AWS ECR registry</li>
<li>Set up Docker Buildx for cache</li>
<li>Expose GitHub Runtime for cache</li>
<li>Run Kamal deploy with the secrets defined in the environment</li>
</ol>
<p>It will run everytime you make a push to the main branch or by manually triggering the workflow. It’ll cancel any in-progress runs to avoid conflicts.</p>
<p>Also, before you push your code to the repository, you’ll need to add the following secrets to the repository:</p>
<ul>
<li><code>VPS_SSH_PRIVATE_KEY</code>: The private key to connect to your VPS</li>
<li><code>AWS_ACCESS_KEY_ID_ECR</code>: The access key ID for the AWS ECR registry</li>
<li><code>AWS_SECRET_ACCESS_KEY_ECR</code>: The secret access key for the AWS ECR registry</li>
<li><code>DJANGO_SECRET_KEY</code>: The Django secret key</li>
</ul>
<p>Finally, to speed up the deployment, add these options to the <code>builder</code> section of the <code>deploy.yml</code> file:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">builder</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb15-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dockerfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../Dockerfile"</span></span>
<span id="cb15-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../"</span></span>
<span id="cb15-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">multiarch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # new</span></span>
<span id="cb15-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cache</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # new</span></span>
<span id="cb15-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gha</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # new</span></span></code></pre></div>
<p>This will enable the Docker Buildx cache for the build process in Github Actions. You can set <code>multiarch</code> to <code>false</code> if your CI pipeline shares the same architecture as your VPS, which was the case for me.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>You now have a fully automated deployment pipeline for your Django app. A push to the <code>main</code> branch will trigger the workflow, which will build the Docker image, push it to the ECR registry, and deploy it to your VPS.</p>
<p>Break free from the tyranny of manual deployments and expensive cloud services. Sleep like a baby and let Kamal handle your deployments.</p>
<p>If you have any questions or feedback, please feel free to leave a comment below.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>crying and sh*tting my diapers?↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Deploying a {Django} App with {Kamal} 2, {AWS} {ECR,} and
    {Github} {Actions}},
  date = {2024-09-15},
  url = {https://dylancastillo.co/posts/deploy-a-django-app-with-kamal-aws-ecr-and-github-actions.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Deploying a Django App with Kamal 2, AWS
ECR, and Github Actions.”</span> September 15, 2024. <a href="https://dylancastillo.co/posts/deploy-a-django-app-with-kamal-aws-ecr-and-github-actions.html">https://dylancastillo.co/posts/deploy-a-django-app-with-kamal-aws-ecr-and-github-actions.html</a>.
</div></div></section></div> ]]></description>
  <category>django</category>
  <category>kamal</category>
  <category>aws</category>
  <guid>https://dylancastillo.co/posts/deploy-a-django-app-with-kamal-aws-ecr-and-github-actions.html</guid>
  <pubDate>Sun, 15 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Classifying images with Gemini Flash 1.5</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/classify-images-with-gemini-flash-1.5.html</link>
  <description><![CDATA[ 




<p>Most people think of <a href="https://arxiv.org/abs/2301.00234">In-Context Learning (ICL)</a> — the ability of LLMs to learn from examples provided in the context — only as a component of RAG applications.</p>
<p>I used to think of it that way too. Until I recently found out that Multimodal Large Language Models (MLLMs) with ICL can be used to perform more traditional ML tasks such as image classification.</p>
<p>I was skeptical at first, but was surprised to see that it worked pretty well both in the literature (see <a href="https://arxiv.org/abs/2405.09798">here</a> and <a href="https://arxiv.org/abs/2403.07407">here</a>) and in my own experiments.</p>
<p>You shouldn’t expect state-of-the-art results with it, but it can often give you pretty good results with very little effort and data.</p>
<p>In this tutorial, I’ll show you how to use ICL to classify images using Gemini Flash 1.5.</p>
<section id="why-gemini-flash-1.5" class="level2">
<h2 class="anchored" data-anchor-id="why-gemini-flash-1.5">Why Gemini Flash 1.5?</h2>
<p>You can use any MLLM for this task, but I chose Gemini Flash 1.5 because:</p>
<ol type="1">
<li>It’s cheaper than <a href="https://ai.google.dev/pricing">Gemini Pro 1.5</a>, <a href="https://platform.openai.com/pricing">GPT-4o</a>, and <a href="https://docs.anthropic.com/en/docs/build-with-claude/vision#calculate-image-costs">Sonnet 3.5</a>. For an image of <em>512x512</em> pixels, Gemini Flash 1.5 is 50x cheaper than Gemini Pro 1.5, 5x to 16x cheaper than GPT-4o, and 26x cheaper than Sonnet 3.5<sup>1</sup>.</li>
<li>It lets you use up to 3,000 images per request. By trial and error, I found that GPT-4o seems to have a hard limit at 250 images per request and Sonnet 3.5’s documentation mentions a limit of 20 images per request.</li>
<li>It works well. If you really want to squeeze the last bit of performance out of your model, you can use a bigger model, but for the purposes of this tutorial, Gemini Flash 1.5 will do just fine.</li>
</ol>
<p>Regardless of the model you choose, this tutorial will be a good starting point for you to classify images using ICL.</p>
</section>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>To follow this tutorial you’ll need to:</p>
<ol type="1">
<li>Sign up and generate an API key in <a href="https://aistudio.google.com/app/apikey">Google AI Studio</a>.</li>
<li>Set the API key as an environment variable called <code>GEMINI_API_KEY</code>.</li>
<li>Download <a href="https://www.kaggle.com/datasets/gpiosenka/butterfly-images40-species?resource=download">this dataset</a> and save it to <code>data/</code>.</li>
<li>Create a virtual environment and install the requirements:</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv venv</span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> venv/bin/activate</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install pandas numpy scikit-learn google-generativeai pillow</span></code></pre></div>
</section>
<section id="set-up" class="level2">
<h2 class="anchored" data-anchor-id="set-up">Set up</h2>
<p>As usual, you start by importing the necessary libraries:</p>
<div id="cell-7" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> google.generativeai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> genai</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, f1_score</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb2-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb2-11"></span>
<span id="cb2-12">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>)</span>
<span id="cb2-13"></span>
<span id="cb2-14">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</div>
<p>In addition to the usual popular libraries (e.g.&nbsp;<code>pandas</code>, <code>sklearn</code>), you’ll need:</p>
<ul>
<li><code>google.generativeai</code> for interacting with the Gemini API</li>
<li><code>PIL</code> for handling images</li>
<li><code>sklearn</code> for calculating performance metrics</li>
</ul>
<p>Then, you’ll need to configure the Gemini API client with your API key:</p>
<div id="cell-9" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">genai.configure(api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GEMINI_API_KEY"</span>])</span></code></pre></div>
</div>
<p>This will take the <code>GEMINI_API_KEY</code> environment variable and use it to authenticate your requests to the Gemini API.</p>
</section>
<section id="read-data" class="level2">
<h2 class="anchored" data-anchor-id="read-data">Read data</h2>
<p>To make a fair evaluation of the model’s performance, you should split the dataset into separate training and testing sets. The training set is used to provide context or examples to the model during inference. The testing set, comprised of unseen images, is then used to measure the model’s performance.</p>
<p>This process is different from the traditional “training” process, where you update the model’s weights or parameters. Here, you’re only providing the model with a set of images and asking it to learn from them at inference time.</p>
<p>This function will help you create the datasets:</p>
<div id="cell-13" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_datasets(train_dir, test_dir, selected_classes, n_images_icl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb4-2">    train_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-3">    test_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-4"></span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> class_id, class_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(selected_classes):</span>
<span id="cb4-6">        train_class_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> class_name</span>
<span id="cb4-7">        test_class_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> class_name</span>
<span id="cb4-8"></span>
<span id="cb4-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> train_class_dir.is_dir() <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> test_class_dir.is_dir():</span>
<span id="cb4-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb4-11"></span>
<span id="cb4-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train dataset</span></span>
<span id="cb4-13">        train_image_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(train_class_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.jpg"</span>))</span>
<span id="cb4-14">        selected_train_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(</span>
<span id="cb4-15">            train_image_files,</span>
<span id="cb4-16">            size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(n_images_icl, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_image_files)),</span>
<span id="cb4-17">            replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb4-18">        )</span>
<span id="cb4-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> img_path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> selected_train_images:</span>
<span id="cb4-20">            train_data.append(</span>
<span id="cb4-21">                {</span>
<span id="cb4-22">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_path"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(img_path),</span>
<span id="cb4-23">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class_id"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"class_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb4-24">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class_name"</span>: class_name,</span>
<span id="cb4-25">                }</span>
<span id="cb4-26">            )</span>
<span id="cb4-27"></span>
<span id="cb4-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test dataset</span></span>
<span id="cb4-29">        test_image_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(test_class_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.jpg"</span>))</span>
<span id="cb4-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> img_path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_image_files:</span>
<span id="cb4-31">            test_data.append(</span>
<span id="cb4-32">                {</span>
<span id="cb4-33">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_path"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(img_path),</span>
<span id="cb4-34">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class_id"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"class_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb4-35">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class_name"</span>: class_name,</span>
<span id="cb4-36">                }</span>
<span id="cb4-37">            )</span>
<span id="cb4-38"></span>
<span id="cb4-39">    df_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(train_data)</span>
<span id="cb4-40">    df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(test_data).sample(frac<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-41"></span>
<span id="cb4-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df_train, df_test</span></code></pre></div>
</div>
<p>This function will get a random selection of <code>n_images_icl</code> images per class from the <code>train</code> folder (that you’ll later use in the model’s context). For the testing set, which you’ll use to measure the model’s performance, you’ll use all the available images in the <code>test</code> folder from those classes.</p>
<p>To keep things simple, you’ll start by selecting 15 different classes and 1 image per class for the context (i.e., <code>n_images_icl=1</code>)</p>
<div id="cell-15" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">DATA_DIR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../data/"</span></span>
<span id="cb5-2">TRAIN_DIR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(DATA_DIR) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span></span>
<span id="cb5-3">TEST_DIR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(DATA_DIR) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">all_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(os.listdir(TRAIN_DIR))</span>
<span id="cb5-6">selected_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(all_classes, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8">df_train, df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_datasets(TRAIN_DIR, TEST_DIR, selected_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>selected_classes, n_images_icl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>There will be 15 classes with 1 image in the training set and 15 classes with 5 images in the testing set.</p>
</section>
<section id="gemini-flash-1.5" class="level2">
<h2 class="anchored" data-anchor-id="gemini-flash-1.5">Gemini Flash 1.5</h2>
<p>Next, you’ll need to define a system prompt and configure the model to use it.</p>
<section id="define-prompt" class="level3">
<h3 class="anchored" data-anchor-id="define-prompt">Define prompt</h3>
<p>You’ll use a system prompt that will tell the model how to classify the images and the format you want the output to be in:</p>
<div id="cell-21" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">CLASSIFIER_SYSTEM_PROMPT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are an expert lepidopterist.</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Your task is to classify images of butterflies into one of the provided labels.</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Provide your output as a JSON object using this format:</span></span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "number_of_labeled_images": &lt;integer&gt;,</span></span>
<span id="cb6-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "output": [</span></span>
<span id="cb6-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        {</span></span>
<span id="cb6-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "image_id": &lt;image id, integer, starts at 0&gt;,</span></span>
<span id="cb6-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "confidence": &lt;number between 0 and 10, the higher the more confident, integer&gt;,</span></span>
<span id="cb6-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            "label": &lt;label of the correct butterfly species, string&gt;</span></span>
<span id="cb6-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        }, </span></span>
<span id="cb6-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ...</span></span>
<span id="cb6-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ]</span></span>
<span id="cb6-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-18"></span>
<span id="cb6-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">## Guidelines</span></span>
<span id="cb6-20"></span>
<span id="cb6-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- ALWAYS produce valid JSON.</span></span>
<span id="cb6-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Generate ONLY a single prediction per input image.</span></span>
<span id="cb6-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- The `number_of_labeled_images` MUST be the same as the number of input images.</span></span>
<span id="cb6-24"></span>
<span id="cb6-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">This is an example of a valid output:</span></span>
<span id="cb6-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">```</span></span>
<span id="cb6-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "number_of_labeled_images": 5,</span></span>
<span id="cb6-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "output": [</span></span>
<span id="cb6-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      {</span></span>
<span id="cb6-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "image_id": 0,</span></span>
<span id="cb6-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "confidence": 10,</span></span>
<span id="cb6-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "correct_label": "class_B"</span></span>
<span id="cb6-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      },</span></span>
<span id="cb6-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      {</span></span>
<span id="cb6-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "image_id": 1,</span></span>
<span id="cb6-37"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "confidence": 9,</span></span>
<span id="cb6-38"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "correct_label": "class_C"</span></span>
<span id="cb6-39"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      },</span></span>
<span id="cb6-40"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      {</span></span>
<span id="cb6-41"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "image_id": 2,</span></span>
<span id="cb6-42"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "confidence": 4,</span></span>
<span id="cb6-43"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "correct_label": "class_A"</span></span>
<span id="cb6-44"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      },</span></span>
<span id="cb6-45"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      {</span></span>
<span id="cb6-46"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "image_id": 3,</span></span>
<span id="cb6-47"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "confidence": 2,</span></span>
<span id="cb6-48"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "correct_label": "class_B"</span></span>
<span id="cb6-49"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      },</span></span>
<span id="cb6-50"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      {</span></span>
<span id="cb6-51"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "image_id": 4,</span></span>
<span id="cb6-52"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "confidence": 10,</span></span>
<span id="cb6-53"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        "correct_label": "class_C"</span></span>
<span id="cb6-54"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      }</span></span>
<span id="cb6-55"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ]</span></span>
<span id="cb6-56"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-57"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">```</span></span>
<span id="cb6-58"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>.strip()</span></code></pre></div>
</div>
<p>This prompt explains the task to the model. You’re providing it with a set of labels with corresponding images, and a set of images that should be classified into one of those labels. The model needs to output a single label for each image.</p>
<p>I included an additional field called <code>number_of_labeled_images</code> because I noticed that the model would often “forget” to include all the labels in the output, and this was a simple way to ensure that it did so.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Fun fact: I didn’t know that <em>lepidopterist</em> was a word until I wrote this prompt.</p>
</div>
</div>
</section>
<section id="configure-model" class="level3">
<h3 class="anchored" data-anchor-id="configure-model">Configure model</h3>
<p>Then, you can define and configure the model:</p>
<div id="cell-25" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">generation_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb7-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temperature"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb7-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_output_tokens"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8192</span>,</span>
<span id="cb7-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response_mime_type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"application/json"</span>,</span>
<span id="cb7-5">}</span>
<span id="cb7-6">classification_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> genai.GenerativeModel(</span>
<span id="cb7-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gemini-1.5-flash"</span>, </span>
<span id="cb7-8">    system_instruction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CLASSIFIER_SYSTEM_PROMPT, </span>
<span id="cb7-9">    generation_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generation_config</span>
<span id="cb7-10">)</span></code></pre></div>
</div>
<p>This sets up the model with the following configuration:</p>
<ul>
<li><code>temperature=1</code>: Controls the randomness of the model’s output.</li>
<li><code>max_output_tokens=8192</code>: The maximum number of tokens the model can generate.</li>
<li><code>response_mime_type="application/json"</code>: Tells the model to produce JSON.</li>
</ul>
<p>It also sets the <code>system_instruction</code> using the prompt you defined earlier and uses <code>gemini-1.5-flash</code> as the model.</p>
</section>
<section id="building-the-context" class="level3">
<h3 class="anchored" data-anchor-id="building-the-context">Building the context</h3>
<p>Gemini has a slightly different way of building the messages (context) used by the model.</p>
<p>Most providers have adjusted their API to match OpenAI’s <code>messages</code> format. Gemini, however, uses a list of strings and media files (if you’re including images).</p>
<p>You can use these functions for that:</p>
<div id="cell-29" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_context_images_message(df):</span>
<span id="cb8-2">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Possible labels:"</span>]</span>
<span id="cb8-3">    grouped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class_id'</span>)</span>
<span id="cb8-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> class_id, group <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> grouped:</span>
<span id="cb8-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> group.iterrows():</span>
<span id="cb8-6">            base64_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_path"</span>])</span>
<span id="cb8-7">            messages.append(base64_img)</span>
<span id="cb8-8">        messages.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"label: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> messages</span>
<span id="cb8-10">    </span>
<span id="cb8-11">context_images_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_context_images_message(df_train)</span></code></pre></div>
</div>
<p>First, you’ll create a message with the context images and their corresponding labels. This is the “training” part of ICL.</p>
<p>In <code>create_context_images_message</code>, you’re iterating over the training dataset, grouping the images by class and appending the images and labels to the messages list.</p>
<p>The resulting message will look something like this:</p>
<div id="cell-31" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">context_images_message[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>['Possible labels:',
 &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=224x224&gt;,
 'label: class_0',
 &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=224x224&gt;,
 'label: class_1']</code></pre>
</div>
</div>
<p>You might have noticed that instead of the actual names of the classes, you’re using <code>class_0</code>, <code>class_1</code>, etc. This is because I want to make the model prediction as “fair” as possible, see the baseline performance section for more details.</p>
<p>Then, you’ll create a message with the input images. This are the images for which the model will generate predictions.</p>
<p>Simlar to the context images message, you’re iterating over the test dataset and appending the images to the messages list.</p>
<div id="cell-33" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_input_images_message(df):</span>
<span id="cb11-2">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input images:"</span>]</span>
<span id="cb11-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, image_path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(df.image_path):</span>
<span id="cb11-4">        base64_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(image_path)</span>
<span id="cb11-5">        image_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb11-6">            base64_img,</span>
<span id="cb11-7">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"input_image_id: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb11-8">        ]</span>
<span id="cb11-9">        messages.extend(image_message)</span>
<span id="cb11-10">    messages.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Please correctly classify all </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> images."</span>)</span>
<span id="cb11-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> messages</span>
<span id="cb11-12"></span>
<span id="cb11-13">input_images_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_input_images_message(df_test)</span></code></pre></div>
</div>
<p>The resulting message will look something like this:</p>
<div id="cell-35" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">input_images_message[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>['Input images:',
 &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=224x224&gt;,
 'input_image_id: 0',
 &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=224x224&gt;,
 'input_image_id: 1']</code></pre>
</div>
</div>
</section>
<section id="results" class="level3">
<h3 class="anchored" data-anchor-id="results">Results</h3>
<p>Now, you can combine the context images message and the input images message to create the contents you’ll pass to the model:</p>
<div id="cell-38" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">contents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context_images_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> input_images_message</span>
<span id="cb14-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classification_model.generate_content(</span>
<span id="cb14-3">    contents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>contents</span>
<span id="cb14-4">)</span>
<span id="cb14-5">response_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response.text)</span></code></pre></div>
</div>
<p>It’ll take a few seconds to run. But after that you’ll have a JSON response with the model’s predictions:</p>
<div id="cell-40" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">response_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>[{'image_id': 0, 'confidence': 10, 'label': 'class_7'},
 {'image_id': 1, 'confidence': 10, 'label': 'class_2'},
 {'image_id': 2, 'confidence': 10, 'label': 'class_4'}]</code></pre>
</div>
</div>
<p>Then, you can calculate the accuracy and F1-score to evaluate the model’s performance:</p>
<div id="cell-42" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_metrics(df_test, response_json):</span>
<span id="cb17-2">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> response_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output'</span>]]</span>
<span id="cb17-3">    accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(df_test.class_id, predictions)</span>
<span id="cb17-4">    f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f1_score(df_test.class_id, predictions, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weighted'</span>)</span>
<span id="cb17-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> accuracy, f1</span>
<span id="cb17-6"></span>
<span id="cb17-7">accuracy, f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_metrics(df_test, response_json)</span>
<span id="cb17-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"F1-score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy: 0.7333
F1-score: 0.7229</code></pre>
</div>
</div>
<p>Using a single image in the context per class, you should get an accuracy around 73% and F1-score around 72%.</p>
<p>Not bad, but you can probably do better.</p>
<section id="using-5-images-per-class-in-the-context" class="level4">
<h4 class="anchored" data-anchor-id="using-5-images-per-class-in-the-context">Using 5 images per class in the context</h4>
<p>One quick way to improve the performance of the model is to use more images per class in the context. Try with 5 images per class:</p>
<div id="cell-46" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">df_train, df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_datasets(TRAIN_DIR, TEST_DIR, selected_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>selected_classes, n_images_icl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the context and input messages</span></span>
<span id="cb19-4">context_images_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_context_images_message(df_train)</span>
<span id="cb19-5">input_images_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_input_images_message(df_test)</span>
<span id="cb19-6">contents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context_images_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> input_images_message</span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate the response</span></span>
<span id="cb19-9">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classification_model.generate_content(</span>
<span id="cb19-10">    contents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>contents</span>
<span id="cb19-11">)</span>
<span id="cb19-12">response_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response.text)</span>
<span id="cb19-13"></span>
<span id="cb19-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the metrics</span></span>
<span id="cb19-15">accuracy, f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_metrics(df_test, response_json)</span>
<span id="cb19-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"F1-score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy: 0.9067
F1-score: 0.9013</code></pre>
</div>
</div>
<p>With this change, you should get an accuracy and F1-score around 90%.</p>
<p>Nice gains in performance for such a small change!</p>
</section>
</section>
<section id="data-leakage-and-baseline-performance" class="level3">
<h3 class="anchored" data-anchor-id="data-leakage-and-baseline-performance">Data leakage and baseline performance</h3>
<p>You might be thinking, “MLLMs have been trained on a lot of data, so they already know a lot of the images in the dataset, which means that these results are inflated”.</p>
<p>Which is a good point, and for that purpose I’ve done two things:</p>
<ol type="1">
<li>Anonymize the names of the classes (e.g., <code>class_0</code> instead of <code>Sleepy Orange</code>), so that the model doesn’t have any information about the actual labels.</li>
<li>Run a quick experiment using a zero-shot<sup>2</sup> model without anonymizing the labels to see the model’s performance.</li>
</ol>
<p>Here’s the code for the zero-shot baseline and the results:</p>
<div id="cell-49" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">possible_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Possible labels: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>.join(df_train.class_name.unique().tolist())</span>
<span id="cb21-2">class_name_to_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(df_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class_name'</span>], df_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class_id'</span>]))</span>
<span id="cb21-3"></span>
<span id="cb21-4">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classification_model.generate_content(</span>
<span id="cb21-5">    contents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[possible_labels] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> input_images_message</span>
<span id="cb21-6">)</span>
<span id="cb21-7">response_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response.text)</span>
<span id="cb21-8"></span>
<span id="cb21-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> response_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>]:</span>
<span id="cb21-10">    item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_name_to_id.get(item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>], item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>])</span>
<span id="cb21-11"></span>
<span id="cb21-12">accuracy, f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_metrics(df_test, response_json)</span>
<span id="cb21-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"F1-score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy: 0.4800
F1-score: 0.4619</code></pre>
</div>
</div>
<p>You should get a 48% accuracy and a 46% F1-score. Both significantly higher than the ~7% you’d expect from random guessing, but still far from the 90%+ accuracy you obtained earlier.</p>
<p>This demonstrates that ICL can indeed enhance the model’s performance.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>That’s all!</p>
<p>I still find it amazing that without any “real” training and just a few minutes of work, you can achieve pretty good results in a non-trivial image classification task using ICL with Gemini Flash 1.5 (or most other MLLMs).</p>
<p>This is a mostly unexplored area. There’s a lot of room for trying out different ideas and seeing what works best. This tutorial is just a starting point.</p>
<p>Hope you found it useful! Let me know if you have any questions in the comments below.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Estimated costs as of September 8, 2024:</p>
<table class="table">
<thead>
<tr class="header">
<th>Model</th>
<th>Cost (512x512 image)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Gemini Flash 1.5</td>
<td>$0.000039</td>
</tr>
<tr class="even">
<td>Gemini Pro 1.5</td>
<td>$0.0018</td>
</tr>
<tr class="odd">
<td>GPT-4o</td>
<td>$0.000213 - $0.000638</td>
</tr>
<tr class="even">
<td>Sonnet 3.5</td>
<td>$0.001047</td>
</tr>
</tbody>
</table>
↩︎</li>
<li id="fn2"><p>That is, without providing any context images.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan and Castillo, Dylan},
  title = {Classifying Images with {Gemini} {Flash} 1.5},
  date = {2024-09-08},
  url = {https://dylancastillo.co/posts/classify-images-with-gemini-flash-1.5.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan, and Dylan Castillo. 2024. <span>“Classifying Images
with Gemini Flash 1.5.”</span> September 8, 2024. <a href="https://dylancastillo.co/posts/classify-images-with-gemini-flash-1.5.html">https://dylancastillo.co/posts/classify-images-with-gemini-flash-1.5.html</a>.
</div></div></section></div> ]]></description>
  <category>llm</category>
  <category>gemini</category>
  <guid>https://dylancastillo.co/posts/classify-images-with-gemini-flash-1.5.html</guid>
  <pubDate>Sun, 08 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Fixing missing ‘python’ error in macOS</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/til/fixing-python-not-found-error-in-macos.html</link>
  <description><![CDATA[ 




<p>After the last macOS update, I started getting the following error when trying to run <code>poetry install</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">[Errno 2] No such file or directory: 'python'</span></code></pre></div>
<p>I went through GitHub issues, StackOverflow questions, and blog posts, but none of the suggested solutions worked.</p>
<p>Finally, I found the solution somewhat hidden in this <a href="https://mac.install.guide/python/brew">blog post</a>.</p>
<p>So, what’s the fix?</p>
<p>🥁 🥁 🥁</p>
<p>Just add the following line to your <code>.zshrc</code> file:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PATH</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--prefix</span> python<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/libexec/bin:</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PATH</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>This gets the installation prefix for <code>python</code> installed via Homebrew (e.g.&nbsp;<code>/opt/homebrew/opt/python@3.12</code>), gets the <code>libexec/bin</code> directory, and adds it to the PATH.</p>
<p>In that <code>libexec/bin</code>, there’s a <code>python</code> executable that gets called when you run <code>python</code> in the terminal.</p>
<p>That’s all. Hope that helps!</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Fixing Missing “Python” Error in {macOS}},
  date = {2024-08-12},
  url = {https://dylancastillo.co/til/fixing-python-not-found-error-in-macos.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Fixing Missing <span>‘Python’</span> Error
in macOS.”</span> August 12, 2024. <a href="https://dylancastillo.co/til/fixing-python-not-found-error-in-macos.html">https://dylancastillo.co/til/fixing-python-not-found-error-in-macos.html</a>.
</div></div></section></div> ]]></description>
  <category>til</category>
  <category>python</category>
  <category>poetry</category>
  <guid>https://dylancastillo.co/til/fixing-python-not-found-error-in-macos.html</guid>
  <pubDate>Mon, 12 Aug 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Create a Kamal-ready VPS on Hetzner using Terraform</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.html</link>
  <description><![CDATA[ 




<p>These days, I deploy all my side projects using Kamal and GitHub Actions on Hetzner. Once you get the hang of it, it’s easy to maintain, fast, and cheap.</p>
<p>You can run your app with a database (SQLite), caching (Redis), background jobs (Celery), and SSL certificates (Let’s Encrypt) for roughly €5/month. Plus, if you feel the need, you can easily scale up to a more powerful Virtual Private Server (VPS).</p>
<p>But setting up a VPS with the right configuration takes a bit of time. You have to:</p>
<ol type="1">
<li>Manually create the VPS using the UI.</li>
<li>Create the necessary SSH keys.</li>
<li>Create and apply the firewall rules.</li>
<li>Create a new non-root user.</li>
<li>Install Docker and other necessary software.</li>
<li>Configure unattended-upgrades.</li>
<li>Create a directory and set permissions for Let’s Encrypt SSL certificates.</li>
<li>Reboot the system to apply all changes.</li>
</ol>
<p>I already had a small script to do most of these steps, but I wanted to automate it to a single command. So I created a Terraform script to do it for me.</p>
<p>I took <a href="https://github.com/luizkowalski/terraform-hetzner">terraform-hetzner</a> and modified it to work with a single VPS instance. My updated version is available <a href="https://github.com/dylanjcastillo/terraform-kamal-single-vps">here</a>.</p>
<section id="set-up" class="level2">
<h2 class="anchored" data-anchor-id="set-up">Set up</h2>
<p>First, set up an <a href="https://docs.hetzner.com/cloud/api/getting-started/generating-api-token/">API key</a> with <strong>read and write</strong> permissions in Hetzner Cloud.</p>
<p>Second, install <a href="https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli">terraform</a>.</p>
<p>Third, clone the repo:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/dylanjcastillo/terraform-kamal-single-vps</span></code></pre></div>
<p>Fourth, create a <code>terraform.tfvars</code> file with the following variables:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource hcl number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">hetzner_api_key = "your-api-key"</span>
<span id="cb2-2">ssh_vps_root_key = "&lt;your-ssh-root-public-key&gt;"</span>
<span id="cb2-3">ssh_vps_kamal_key = "&lt;your-ssh-kamal-public-key&gt;"</span></code></pre></div>
<p>The <code>ssh_vps_root_key</code> and <code>ssh_vps_kamal_key</code> are the public keys for the root and kamal users, respectively. You can generate them with the <code>make generate-ssh-key USER_NAME=root</code> or <code>make generate-ssh-key USER_NAME=kamal</code> commands I added to the repo.</p>
<p>Store your SSH keys in a secure location. You’ll need them to access the VPS.</p>
</section>
<section id="run-the-script" class="level2">
<h2 class="anchored" data-anchor-id="run-the-script">Run the script</h2>
<p>Once the <code>terraform.tfvars</code> file is set up, you can see what changes will be applied with the following command:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">terraform</span> plan</span></code></pre></div>
<p>This will show in detail what changes will be applied to create a Kamal-ready VPS. If you’re happy with it, you can apply the changes with the following command:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">terraform</span> apply</span></code></pre></div>
<p>This will create a VPS with the following configuration:</p>
<ul>
<li>Ubuntu 22.04 LTS</li>
<li>2 VCPU</li>
<li>2 GB RAM</li>
<li>40 GB SSD</li>
</ul>
<p>It’ll cost you roughly €5/month and will be located in Nuremberg (Germany).</p>
<p>In addition, after the VPS is created, it will automatically:</p>
<ul>
<li>Create a non-root user (kamal) with sudo privileges.</li>
<li>Install the required software (Git, Docker, curl, etc.)</li>
<li>Create a directory for Let’s Encrypt SSL certificates.</li>
<li>Create a firewall rule to allow HTTP, HTTPS, and SSH traffic.</li>
<li>Create a directory for the database (SQLite) and the cache (Redis) (<code>db/</code> and <code>data/</code>)</li>
</ul>
</section>
<section id="customizing-the-script" class="level2">
<h2 class="anchored" data-anchor-id="customizing-the-script">Customizing the script</h2>
<p>You can customize the script to fit your needs. Here are a couple of things you can change:</p>
<section id="change-the-software-to-install" class="level3">
<h3 class="anchored" data-anchor-id="change-the-software-to-install">Change the software to install</h3>
<p>If you want to change the software to install, you can modify the <code>packages</code> section in <code>cloudinit/vps.yml</code>.</p>
</section>
<section id="run-other-commands-after-the-vps-is-created" class="level3">
<h3 class="anchored" data-anchor-id="run-other-commands-after-the-vps-is-created">Run other commands after the VPS is created</h3>
<p>If you want to run other commands after the VPS is created, you can add them to the <code>runcmd</code> section in the <code>cloudinit/vps.yml</code> file.</p>
</section>
<section id="use-already-existing-firewall-rules" class="level3">
<h3 class="anchored" data-anchor-id="use-already-existing-firewall-rules">Use already existing firewall rules</h3>
<p>If you want to use already existing firewall rules, you can modify how the firewalls are attached in <code>cloud.tf</code>. Take a look at <a href="https://github.com/dylanjcastillo/terraform-kamal-single-vps/blob/4a1a6edafc1c9e927f20906298ccd083718bc97e/cloud.tf#L72C1-L91C4">this section</a> of <code>cloud.tf</code>.</p>
</section>
<section id="use-a-different-server-type-operating-system-or-region" class="level3">
<h3 class="anchored" data-anchor-id="use-a-different-server-type-operating-system-or-region">Use a different server type, operating system, or region</h3>
<p>If you want to use a different server type, operating system, or region, you can modify the <code>server_type</code>, <code>region</code>, <code>operating_system</code> variables in <code>variables.tf</code>.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This script is a great way to create a Kamal-ready VPS on Hetzner using Terraform. It’s easy to maintain, fast, and cheap.</p>
<p>All the code is available in the <a href="https://github.com/dylanjcastillo/terraform-kamal-single-vps">repo</a>.</p>
<p>Hope you find this useful!</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan and Castillo, Dylan},
  title = {Create a {Kamal-ready} {VPS} on {Hetzner} Using {Terraform}},
  date = {2024-08-11},
  url = {https://dylancastillo.co/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan, and Dylan Castillo. 2024. <span>“Create a Kamal-Ready
VPS on Hetzner Using Terraform.”</span> August 11, 2024. <a href="https://dylancastillo.co/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.html">https://dylancastillo.co/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.html</a>.
</div></div></section></div> ]]></description>
  <category>kamal</category>
  <category>hetzner</category>
  <category>terraform</category>
  <guid>https://dylancastillo.co/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.html</guid>
  <pubDate>Sun, 11 Aug 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>A Dockerfile for a Django app using Poetry</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/til/django-poetry-dockerfile.html</link>
  <description><![CDATA[ 




<p><a href="https://levels.io/">Pieter Levels</a> makes over $100k/month with a single VPS using PHP and jQuery. And until very recently, his deployment process was simply <a href="https://news.ycombinator.com/item?id=28838537">uploading files via FTP</a>.</p>
<p>If you focus on what your users want and know how to market your product, you can make a lot of money.</p>
<p>Which is why I decided to stay poor and spent an inordinate amount of time improving my deployment process.</p>
<p>Who needs money when you can get the satisfaction of that beautiful green check mark after you’ve run your CI/CD pipeline?</p>
<p>Anyways…</p>
<p>These days, I’m using <a href="https://kamal-deploy.org/">kamal</a> to deploy most of my projects.</p>
<p>I used to hate Docker. But, like with Gollum, I’ve come to realize that it’s not that bad after all.</p>
<p>I wanted to create a simple Dockerfile to run a Django app using Poetry, with a SQLite database, and hot reload. Additionally, I wanted to switch between the development and production versions of the container.</p>
<p>So here’s a simple Dockerfile that does just that.</p>
<section id="project-structure" class="level2">
<h2 class="anchored" data-anchor-id="project-structure">Project structure</h2>
<p>This is my project structure:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> db/</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> src/</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> entrypoint.sh</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> Dockerfile</span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> docker-compose.yml</span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> poetry.lock</span>
<span id="cb1-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> pyproject.toml</span></code></pre></div>
<p>The <code>src/</code> directory contains the Django project. The <code>db/</code> directory contains the SQLite database. The <code>entrypoint.sh</code> file is the entrypoint for the Docker container.</p>
<p>If your project is not structured in a similar way, you might need to adapt the files below to your needs.</p>
</section>
<section id="dockerfile" class="level2">
<h2 class="anchored" data-anchor-id="dockerfile">Dockerfile</h2>
<p>I created a <code>Dockerfile</code> that fulfilled this:</p>
<ol type="1">
<li>A base stage with Python 3.10 and Poetry installed.</li>
<li>A builder stage that installs the dependencies.</li>
<li>A runner stage that copies the virtual environment from the builder stage.</li>
<li>A development stage that runs the entrypoint as a root user.</li>
<li>A production stage that runs the entrypoint as a non-root user.</li>
</ol>
<p>Here’s the full <code>Dockerfile</code>:</p>
<details>
<summary>
Dockerfile
</summary>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource dockerfile number-lines code-with-copy"><code class="sourceCode dockerfile"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> python:3.10-slim <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> base</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> POETRY_HOME=/opt/poetry</span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> PATH=${POETRY_HOME}/bin:${PATH}</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> update <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-install-recommends</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-8">    curl <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> clean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> /var/lib/apt/lists/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-sSL</span> https://install.python-poetry.org <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> builder</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb2-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> poetry.lock pyproject.toml ./</span>
<span id="cb2-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> config virtualenvs.in-project true</span>
<span id="cb2-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--only</span> main <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-interaction</span></span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> runner</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb2-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--from=builder</span> /app/.venv/ /app/.venv/</span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> . /app</span>
<span id="cb2-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> /db</span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">EXPOSE</span> 8000</span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> +x /app/src/entrypoint.sh</span>
<span id="cb2-32"></span>
<span id="cb2-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> runner <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> development</span>
<span id="cb2-34"></span>
<span id="cb2-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app/src</span>
<span id="cb2-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENTRYPOINT</span> [ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/app/src/entrypoint.sh"</span> ]</span>
<span id="cb2-37"></span>
<span id="cb2-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> runner <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> production</span>
<span id="cb2-39"></span>
<span id="cb2-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set user and group</span></span>
<span id="cb2-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> user=django</span>
<span id="cb2-42"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> group=django</span>
<span id="cb2-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> uid=1000</span>
<span id="cb2-44"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ARG</span> gid=1000</span>
<span id="cb2-45"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">groupadd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${gid}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${group}</span></span>
<span id="cb2-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">useradd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${uid}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${group}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /bin/sh <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${user}</span></span>
<span id="cb2-47"></span>
<span id="cb2-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Switch to user</span></span>
<span id="cb2-49"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${uid}</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${gid}</span> /app</span>
<span id="cb2-50"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${uid}</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${gid}</span> /db</span>
<span id="cb2-51"></span>
<span id="cb2-52"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">USER</span> ${uid}:${gid}</span>
<span id="cb2-53"></span>
<span id="cb2-54"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app/src</span>
<span id="cb2-55"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENTRYPOINT</span> [ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/app/src/entrypoint.sh"</span> ]</span></code></pre></div>
</details>
</section>
<section id="entrypoint" class="level2">
<h2 class="anchored" data-anchor-id="entrypoint">Entrypoint</h2>
<p>For <code>entrypoint.sh</code> I use this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/sh</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ENVIRONMENT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"production"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb3-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running in production mode"</span></span>
<span id="cb3-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> poetry run gunicorn <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> gunicorn.conf.py</span>
<span id="cb3-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ENVIRONMENT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"development"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb3-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running in development mode"</span></span>
<span id="cb3-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> poetry run python manage.py runserver 0.0.0.0:8000</span>
<span id="cb3-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb3-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENVIRONMENT variable is not set"</span></span>
<span id="cb3-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
<p>If <code>ENVIRONMENT</code> is set to <code>production</code>, the container will run the production server using gunicorn. If it is <code>development</code>, the container will run Django’s development server.</p>
</section>
<section id="docker-compose" class="level2">
<h2 class="anchored" data-anchor-id="docker-compose">Docker-compose</h2>
<p>Then, I have a docker-compose that lets you run the development and production containers:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">app</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> .</span></span>
<span id="cb4-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">target</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${ENVIRONMENT}</span></span>
<span id="cb4-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">platform</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> linux/amd64</span></span>
<span id="cb4-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}</span></span>
<span id="cb4-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_DEBUG=${DJANGO_DEBUG}</span></span>
<span id="cb4-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_SECURE_SSL_REDIRECT=${DJANGO_SECURE_SSL_REDIRECT}</span></span>
<span id="cb4-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_SECURE_HSTS_SECONDS=${DJANGO_SECURE_HSTS_SECONDS}</span></span>
<span id="cb4-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=${DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS}</span></span>
<span id="cb4-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_SECURE_HSTS_PRELOAD=${DJANGO_SECURE_HSTS_PRELOAD}</span></span>
<span id="cb4-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_SESSION_COOKIE_SECURE=${DJANGO_SESSION_COOKIE_SECURE}</span></span>
<span id="cb4-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> DJANGO_CSRF_COOKIE_SECURE=${DJANGO_CSRF_COOKIE_SECURE}</span></span>
<span id="cb4-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> CACHE_REDIS_URL=${CACHE_REDIS_URL}</span></span>
<span id="cb4-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ENVIRONMENT=${ENVIRONMENT}</span></span>
<span id="cb4-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> .env</span></span>
<span id="cb4-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"8000:8000"</span></span>
<span id="cb4-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./db/:/app/db/"</span></span>
<span id="cb4-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">develop</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">watch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">action</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> sync</span></span>
<span id="cb4-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ./src/</span></span>
<span id="cb4-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">target</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /app/src</span></span>
<span id="cb4-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">action</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> rebuild</span></span>
<span id="cb4-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pyproject.toml</span></span></code></pre></div>
<p>In this <code>docker-compose</code>, I use <code>ENVIRONMENT</code> to switch between the development and production containers.</p>
<p>I also use the <a href="https://docs.docker.com/compose/file-watch/">Compose Watch</a> to reload the container when I make changes to the code and to rebuild the container when I make changes to the <code>pyproject.toml</code> file.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>That’s it. I hope you find this useful.</p>
<p>And remember, while Pieter is busy counting his cash, here you are counting the number of successful builds.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {A {Dockerfile} for a {Django} App Using {Poetry}},
  date = {2024-06-22},
  url = {https://dylancastillo.co/til/django-poetry-dockerfile.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“A Dockerfile for a Django App Using
Poetry.”</span> June 22, 2024. <a href="https://dylancastillo.co/til/django-poetry-dockerfile.html">https://dylancastillo.co/til/django-poetry-dockerfile.html</a>.
</div></div></section></div> ]]></description>
  <category>til</category>
  <category>python</category>
  <category>django</category>
  <guid>https://dylancastillo.co/til/django-poetry-dockerfile.html</guid>
  <pubDate>Sat, 22 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Migrate a blog from Ghost to Quarto</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/til/migrate-blog-from-ghost-to-quarto.html</link>
  <description><![CDATA[ 




<p>When I started blogging five years ago, I read all reddit posts comparing blogging platforms and concluded that <a href="https://ghost.org/">Ghost</a> was the best choice because I needed a powerful tool for all those millions of visitors my blog would get.</p>
<p>I saw myself as the <a href="https://es.wikipedia.org/wiki/Gabriel_Garc%C3%ADa_M%C3%A1rquez">García Márquez</a> of technical writing.</p>
<p>Fast forward five years, and I’ve paid $2,000 for hosting a blog that barely gets 8k visits per month. Plus, I’m forced to write it in an interface that I hate.</p>
<p>With that kind of money, I could have funded a moderately extravagant hamster-only summer party.</p>
<p>Not that I should, but I could.</p>
<p>Yes, I’m not proud of that decision<sup>1</sup>. So I’m migrating my blog from Ghost to Quarto.</p>
<p>Here’s a short guide on how to migrate your blog from Ghost to Quarto.</p>
<section id="migrate-blog-from-ghost-to-quarto" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="migrate-blog-from-ghost-to-quarto">Migrate blog from Ghost to Quarto</h2>
<section id="setting-up-your-blog" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-your-blog">Setting up your blog</h3>
<p>First, install <a href="https://quarto.org/">Quarto</a> and create a blog in an empty repository:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> create project blog myblog</span></code></pre></div>
<p>The resulting <code>myblog</code> folder will contain the barebones configuration for a Quarto blog and a <code>posts</code> folder with some example posts. You can remove those posts. Later on, you’ll add your own.</p>
</section>
<section id="exporting-your-ghosts-blog-content" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="exporting-your-ghosts-blog-content">Exporting your Ghost’s blog content</h3>
<p>Then, you need to download a copy of your Ghost’s blog content.</p>
<p>Go to <code>&lt;YOUR_BLOG_URL&gt;/ghost/#/settings/migration</code> and click on <code>Export</code>, then <code>Export JSON</code>.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/ghost-export.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Exporting my blog"><img src="https://dylancastillo.co/til/images/ghost-export.png" class="img-fluid figure-img" alt="Exporting my blog"></a></p>
<figcaption class="margin-caption">Exporting my blog</figcaption>
</figure>
</div>
<p>This is pretty obvious, but remember to replace <code>&lt;YOUR_BLOG_URL&gt;</code> with your blog’s URL.</p>
<p>You’ll get a JSON file with all the posts and pages in your blog. You’ll need to process it to convert your posts to Quarto posts.</p>
<p>This small Python script did the heavy lifting for me:</p>
<details>
<summary>
Show the code
</summary>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> markdownify <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> markdownify <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> md</span>
<span id="cb2-8"></span>
<span id="cb2-9"></span>
<span id="cb2-10">BLOG_URL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://dylancastillo.co"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace with your blog's URL</span></span>
<span id="cb2-11">BLOG_JSON_DUMP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./dylan-castillo.ghost.2024-05-28-10-39-09.json"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace with the path to the JSON file you downloaded</span></span>
<span id="cb2-12">BLOG_AUTHOR_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dylan Castillo"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace with your name</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> download_images(markdown_content, post_slug):</span>
<span id="cb2-16">    soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(markdown_content, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html.parser"</span>)</span>
<span id="cb2-17">    images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"img"</span>)</span>
<span id="cb2-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> images:</span>
<span id="cb2-19">        os.makedirs(post_slug, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> img <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> images:</span>
<span id="cb2-21">            img_url_raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src"</span>]</span>
<span id="cb2-22">            img_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_url_raw.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__GHOST_URL__"</span>, BLOG_URL)</span>
<span id="cb2-23">            img_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.basename(img_url)</span>
<span id="cb2-24">            response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(img_url, stream<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> response.status_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>:</span>
<span id="cb2-26">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Downloading image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>post_slug<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-27">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(os.path.join(post_slug, img_name), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-28">                    f.write(response.content)</span>
<span id="cb2-29">                markdown_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> markdown_content.replace(</span>
<span id="cb2-30">                    img_url_raw, os.path.join(post_slug, img_name)</span>
<span id="cb2-31">                )</span>
<span id="cb2-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-33">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Failed to download image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> markdown_content</span>
<span id="cb2-35"></span>
<span id="cb2-36"></span>
<span id="cb2-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> process_posts(data):</span>
<span id="cb2-38">    posts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posts"</span>]</span>
<span id="cb2-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> post <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> posts:</span>
<span id="cb2-40">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processing post:"</span>, post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>])</span>
<span id="cb2-41">        title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>]</span>
<span id="cb2-42">        description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"custom_excerpt"</span>]</span>
<span id="cb2-43">        author <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BLOG_AUTHOR_NAME</span>
<span id="cb2-44">        date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb2-45">            datetime.strptime(post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"published_at"</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T%H:%M:%S.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z"</span>).strftime(</span>
<span id="cb2-46">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%m/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/%Y"</span></span>
<span id="cb2-47">            )</span>
<span id="cb2-48">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"published_at"</span>]</span>
<span id="cb2-49">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb2-50">        )</span>
<span id="cb2-51">        date_modified <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb2-52">            datetime.strptime(post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"updated_at"</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T%H:%M:%S.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z"</span>).strftime(</span>
<span id="cb2-53">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%m/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/%Y"</span></span>
<span id="cb2-54">            )</span>
<span id="cb2-55">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"updated_at"</span>]</span>
<span id="cb2-56">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb2-57">        )</span>
<span id="cb2-58"></span>
<span id="cb2-59">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert HTML content to Markdown</span></span>
<span id="cb2-60">        markdown_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> download_images(</span>
<span id="cb2-61">            post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slug"</span>]</span>
<span id="cb2-62">        )</span>
<span id="cb2-63">        markdown_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> md(markdown_content, code_language<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"python"</span>)</span>
<span id="cb2-64">        markdown_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> markdown_content.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__GHOST_URL__"</span>, BLOG_URL)</span>
<span id="cb2-65">        markdown_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""---</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">title: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">description: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>description<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">author: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>author<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">date: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">date-modified: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>date_modified<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">---</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>markdown_content<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-66"></span>
<span id="cb2-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the markdown content to a file</span></span>
<span id="cb2-68">        filename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>post[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'slug'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.md"</span></span>
<span id="cb2-69">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filename, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-70">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.write(markdown_content)</span>
<span id="cb2-71"></span>
<span id="cb2-72"></span>
<span id="cb2-73"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb2-74">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(BLOG_JSON_DUMP) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-75">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb2-76">    process_posts(data)</span></code></pre></div>
</details>
<p>When you run the script, it will create a folder with all the posts in .md format and their images. Feel free to adapt it to your needs.</p>
</section>
<section id="customizing-your-blog" class="level3">
<h3 class="anchored" data-anchor-id="customizing-your-blog">Customizing your blog</h3>
<p>Through trial and error, I found some settings that helped me customize the look and feel of my blog.</p>
<p>Here are some of the things I modified:</p>
<ol type="1">
<li>Added RSS, favicon, and customized the navbar:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_quarto.yml</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="_quarto.yml" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">website</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # The title of your blog</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">site-url</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # For the RSS feed that no one will read</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">favicon</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Add a favicon to the blog</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navbar</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Customize the navbar if you want</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page-footer</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Add a page footer like "Copyright 2024, Saul Goodman" to sound legit</span></span></code></pre></div>
</div>
<ol start="2" type="1">
<li>Added custom CSS and JS and a custom theme:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_quarto.yml</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="_quarto.yml" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include-in-header</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">      - </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb4-5">          &lt;link href="&lt;YOUR_CUSTOM_FONT_URL&gt;" rel="stylesheet"&gt;</span>
<span id="cb4-6">          &lt;script src="&lt;YOUR_CUSTOM_JS_URL&gt;" defer&gt;&lt;/script&gt;</span>
<span id="cb4-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page-layout</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"article"</span></span>
<span id="cb4-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Pick a theme and customize it in `custom.scss`</span></span>
<span id="cb4-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;YOUR_THEME&gt;</span></span>
<span id="cb4-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> custom.scss</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Add your custom CSS here</span></span>
<span id="cb4-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code-line-numbers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Add line numbers to code blocks</span></span></code></pre></div>
</div>
<ol start="3" type="1">
<li>For each post, I used this front matter:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>&lt;POST_SLUG&gt;.md</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="<POST_SLUG>.md" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;POST_TITLE&gt;"</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aliases</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /&lt;POST_SLUG&gt;/</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Add an alias to the previous post's URL</span></span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">description-meta</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;POST_DESCRIPTION&gt;"</span></span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;POST_DATE&gt;"</span></span>
<span id="cb5-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date-modified</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> last-modified</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Automatically set to the last modified date</span></span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb5-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc-depth</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb5-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lightbox</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # For images</span></span>
<span id="cb5-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fig-cap-location</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> margin</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Captions for images</span></span>
<span id="cb5-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">categories</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;CATEGORY&gt;</span></span>
<span id="cb5-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">author</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;AUTHOR_NAME&gt;</span></span>
<span id="cb5-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">url</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;AUTHOR_URL&gt;</span></span>
<span id="cb5-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">affiliation</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;AUTHOR_AFFILIATION&gt;</span></span>
<span id="cb5-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">affiliation-url</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;AUTHOR_AFFILIATION_URL&gt;</span></span>
<span id="cb5-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">citation</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb5-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">comments</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">utterances</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # For comments</span></span>
<span id="cb5-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;YOUR_GITHUB_USERNAME&gt;/&lt;YOUR_GITHUB_REPO&gt;</span></span>
<span id="cb5-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">issue-term</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pathname</span></span>
<span id="cb5-24"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
</div>
<p>See my <a href="https://github.com/dylanjcastillo/blog/blob/main/_quarto.yml">settings</a> for an example and a recent post <a href="https://github.com/dylanjcastillo/blog/blob/main/posts/create-a-kamal-ready-vps-on-hetzner-using-terraform.qmd">source</a> for reference.</p>
<p>For the CSS, I copied <a href="https://github.com/quarto-dev/quarto-cli/blob/main/src/resources/formats/html/bootstrap/themes/darkly.scss">darkly</a> and created a custom <code>custom.scss</code> file to modify some Bootstrap styles. I just changed some colors and a couple of styles to make the blog look closer to my Ghost theme. It was super easy.</p>
</section>
<section id="deployment-using-github-pages-github-actions" class="level3">
<h3 class="anchored" data-anchor-id="deployment-using-github-pages-github-actions">Deployment using GitHub Pages + GitHub Actions</h3>
<p>Quarto offers multiple <a href="https://quarto.org/docs/publishing/">deployment options</a>. I wanted one where I could push changes to a GitHub repository, and have the blog automatically deployed. I went with GitHub Pages combined with GitHub Actions.</p>
<p>To deploy the blog, I created a <a href="https://github.com/dylanjcastillo/blog">GitHub repository</a>, added the blog’s content, updated <code>.gitignore</code> to ignore the <code>/.quarto/</code> and <code>/_site/</code> and updated <code>_quarto.yml</code> to only compute code locally (otherwise you’d need a Python kernel running on your GitHub Actions runner):</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_quarto.yml</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="_quarto.yml" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">execute</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">freeze</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> auto</span></span></code></pre></div>
</div>
<p>Then I ran this command to automatically generate the workflow <code>.github/workflows/publish.yml</code> for me:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> publish gh-pages</span></code></pre></div>
<p>Since then, every time I push changes to the <code>main</code> branch, GitHub Actions automatically renders the website and updates the <code>gh-pages</code> branch.</p>
</section>
<section id="using-a-custom-domain" class="level3">
<h3 class="anchored" data-anchor-id="using-a-custom-domain">Using a custom domain</h3>
<p>That seemed to work at first, but very quickly I noticed that whenever I pushed changes to the <code>main</code> branch, the site would no longer be served from my custom domain <a href="https://dylancastillo.co">dylancastillo.co</a>.</p>
<p>When you render your website, Quarto recreates the CNAME file in the <code>gh-pages</code> branch, which seems to break the custom domain setup in GitHub Pages.</p>
<p>I found a solution in this <a href="https://github.com/quarto-dev/quarto-cli/discussions/5341">discussion</a> and added a CNAME file to the root of the repository with my custom domain:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>CNAME</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename="CNAME" style="background: #f1f3f5;"><pre class="sourceCode numberSource txt number-lines code-with-copy"><code class="sourceCode default"><span id="cb8-1">dylancastillo.co</span></code></pre></div>
</div>
<p>Then, I added this to <code>_quarto.yml</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_quarto.yml</strong></pre>
</div>
<div class="sourceCode" id="cb9" data-filename="_quarto.yml" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">project</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> website</span></span>
<span id="cb9-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resources</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # New</span></span>
<span id="cb9-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> CNAME</span></span></code></pre></div>
</div>
<p>And that worked!</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>There you go, my friend.</p>
<p>Now you can also break free from Ghost.</p>
<p>See you in the next post.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Choosing Ghost. No regrets about the hypothetical hamster party.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Migrate a Blog from {Ghost} to {Quarto}},
  date = {2024-06-16},
  url = {https://dylancastillo.co/til/migrate-blog-from-ghost-to-quarto.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Migrate a Blog from Ghost to
Quarto.”</span> June 16, 2024. <a href="https://dylancastillo.co/til/migrate-blog-from-ghost-to-quarto.html">https://dylancastillo.co/til/migrate-blog-from-ghost-to-quarto.html</a>.
</div></div></section></div> ]]></description>
  <category>til</category>
  <category>quarto</category>
  <guid>https://dylancastillo.co/til/migrate-blog-from-ghost-to-quarto.html</guid>
  <pubDate>Sun, 16 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Installing Alacritty, Zellij, and Neovim in macOS</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/til/install-alacritty-and-zellij-in-macos.html</link>
  <description><![CDATA[ 




<p>Ever since I saw <a href="https://www.youtube.com/watch?v=8wU8k2kDaTo">The Matrix</a>, I’ve wanted to be a hacker.</p>
<p>When I say hacker, I mean having a cool-looking terminal. The kind that makes people think I’m a stealing millions from banks when, in reality, I’m just struggling to exit vim.</p>
<p>I use macOS. The closest I’ve been to being a hacker is using <a href="https://github.com/VSCodeVim/Vim">vim hotkeys</a> in VSCode.</p>
<p>It’s not that I haven’t tried to look the part. I was a just one audio driver away from saying <a href="https://www.reddit.com/r/linuxmemes/comments/9xgfxq/why_i_use_arch_btw/">“I use Arch btw”</a>. I did succeed with Ubuntu, but honestly, using Linux as my main OS always felt like too much work<sup>1</sup>. So that didn’t last long.</p>
<p>But, today, after reading about <a href="https://world.hey.com/dhh/introducing-omakub-354db366">DHH’s Omakub</a>, I though it was time to give my hacker dreams a second shot.</p>
<p>Installing Ubuntu felt like a bit too much work<sup>2</sup>, so I decided to settle on just upgrading my terminal.</p>
<p>I decided to set up Alacritty, Zellij, and Neovim on my M3 MacBook Pro.</p>
<p>Sure, I have client projects to deliver. But how could I let go of one-in-a-lifetime opportunity to procrastinate and imagine I’m a genius hacker for an afternoon?</p>
<section id="installing-alacritty" class="level2">
<h2 class="anchored" data-anchor-id="installing-alacritty">Installing Alacritty</h2>
<p>Alacritty is a terminal emulator, similar to <a href="https://iterm2.com/">Iterm2</a> and others. It’s selling point is that it’s very fast due to GPU-acceleration. Plus, you also get 256 colors support by default.</p>
<p>The best way to install it is using Homebrew:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cask</span> alacritty</span></code></pre></div>
<p>Then, you you can customize it to your liking by creating a <code>~/.config/alacritty/alacritty.toml</code> file.</p>
<p>I ended up modifying just a couple of things:</p>
<ol type="1">
<li>Increase padding.</li>
<li>Change the font.</li>
<li>Change the color scheme. I used One Dark from <a href="https://gist.github.com/r-darwish/f8bb21a6c89a02c4bef76cc38bddad39">this gist</a>.</li>
</ol>
<details>
<summary>
Show the code
</summary>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">window</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">padding.x = 16</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">padding.y = 14</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">decorations = "none"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Removes the window decoration (title bar, etc.)</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">font</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size = 13</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FiraCode Nerd Font</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">normal = { family = "FiraCode Nerd Font", style = "Regular" }</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bold = { family = "FiraCode Nerd Font", style = "Bold" }</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">italic = { family = "FiraCode Nerd Font", style = "Italic" }</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One Dark theme</span></span>
<span id="cb2-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colors.primary</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">background = '0x1e2127'</span></span>
<span id="cb2-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">foreground = '0xabb2bf'</span></span>
<span id="cb2-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bright_foreground = '0xe6efff'</span></span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normal colors</span></span>
<span id="cb2-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colors.normal</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">black = '0x1e2127'</span></span>
<span id="cb2-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">red = '0xe06c75'</span></span>
<span id="cb2-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">green = '0x98c379'</span></span>
<span id="cb2-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yellow = '0xd19a66'</span></span>
<span id="cb2-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">blue = '0x61afef'</span></span>
<span id="cb2-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">magenta = '0xc678dd'</span></span>
<span id="cb2-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cyan = '0x56b6c2'</span></span>
<span id="cb2-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">white = '0x828791'</span></span>
<span id="cb2-31"></span>
<span id="cb2-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bright colors</span></span>
<span id="cb2-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colors.bright</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">black = '0x5c6370'</span></span>
<span id="cb2-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">red = '0xe06c75'</span></span>
<span id="cb2-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">green = '0x98c379'</span></span>
<span id="cb2-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yellow = '0xd19a66'</span></span>
<span id="cb2-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">blue = '0x61afef'</span></span>
<span id="cb2-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">magenta = '0xc678dd'</span></span>
<span id="cb2-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cyan = '0x56b6c2'</span></span>
<span id="cb2-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">white = '0xe6efff'</span></span>
<span id="cb2-42"></span>
<span id="cb2-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dim colors</span></span>
<span id="cb2-44"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colors.dim</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">black = '0x1e2127'</span></span>
<span id="cb2-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">red = '0xe06c75'</span></span>
<span id="cb2-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">green = '0x98c379'</span></span>
<span id="cb2-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yellow = '0xd19a66'</span></span>
<span id="cb2-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">blue = '0x61afef'</span></span>
<span id="cb2-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">magenta = '0xc678dd'</span></span>
<span id="cb2-51"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cyan = '0x56b6c2'</span></span>
<span id="cb2-52"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">white = '0x828791'</span></span></code></pre></div>
</details>
<p>I use <a href="https://github.com/tonsky/FiraCode">FiraCode</a> Nerd Font. <a href="https://www.nerdfonts.com/">Nerd Fonts</a> are a collection of fonts that include glyphs such as icons that represent folders, file types, <a href="https://github.com/ryanoasis/powerline-extra-symbols/blob/master/img/fontforge.png?raw=true">weird arrows</a>, etc.</p>
<p>You can install them using Homebrew:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install font-<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>name-of-the-font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>-nerd-font <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For example, font-fira-code-nerd-font</span></span></code></pre></div>
</section>
<section id="installing-zellij" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="installing-zellij">Installing Zellij</h2>
<p>Zellij is an improved version of <a href="https://en.wikipedia.org/wiki/Tmux"><code>tmux</code></a>. Whenever I used tmux, I spent half my time figuring out the key bindings. Zellij shows the key bindings on screen (unless you disable it), which greatly improves the user experience.</p>
<p>This is what it looks like:</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/zellij-screenshot.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Zellij"><img src="https://dylancastillo.co/til/images/zellij-screenshot.png" class="img-fluid figure-img" alt="Zellij"></a></p>
<figcaption class="margin-caption">Zellij</figcaption>
</figure>
</div>
<p>Same as before, the best way to install it is using Homebrew.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install zellij</span></code></pre></div>
<p>You can customize it by creating a <code>~/.config/zellij/config.kdl</code> file.</p>
<p>I just copied the <a href="https://github.com/zellij-org/zellij/blob/main/zellij-utils/assets/themes/one-half-dark.kdl">One Half Dark</a> theme they provide.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource kdl number-lines code-with-copy"><code class="sourceCode"><span id="cb5-1">theme "one-half-dark"</span>
<span id="cb5-2"></span>
<span id="cb5-3">themes {</span>
<span id="cb5-4">    one-half-dark {</span>
<span id="cb5-5">        fg 169 177 214</span>
<span id="cb5-6">        bg 26 27 38</span>
<span id="cb5-7">        black 56 62 90</span>
<span id="cb5-8">        red 249 51 87</span>
<span id="cb5-9">        green 158 206 106</span>
<span id="cb5-10">        yellow 224 175 104</span>
<span id="cb5-11">        blue 122 162 247</span>
<span id="cb5-12">        magenta 187 154 247</span>
<span id="cb5-13">        cyan 42 195 222</span>
<span id="cb5-14">        white 192 202 245</span>
<span id="cb5-15">        orange 255 158 100</span>
<span id="cb5-16">    }</span>
<span id="cb5-17">}</span></code></pre></div>
<p>Is One Half Dark the same as One Dark? I don’t really know. I like to live dangerously.</p>
<section id="making-zellij-play-nice-with-alacritty" class="level3">
<h3 class="anchored" data-anchor-id="making-zellij-play-nice-with-alacritty">Making Zellij play nice with Alacritty</h3>
<p>Getting Alacritty to work with Zellij took me a while to figure out. But luckily it’s as simple as adding the full path to the <code>zellij</code> binary in the <code>~/.config/alacritty/alacritty.toml</code> file.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">terminal.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb6-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">     program = "/opt/homebrew/bin/zellij"</span></span></code></pre></div>
</section>
</section>
<section id="installing-neovim-and-lazyvim" class="level2">
<h2 class="anchored" data-anchor-id="installing-neovim-and-lazyvim">Installing Neovim and LazyVim</h2>
<p><a href="https://neovim.io/">Neovim</a> is a fork from <a href="https://www.vim.org/">Vim</a>, that solves some of Vim’s issues<sup>3</sup>. I didn’t really know if it was better or worse than Vim, but given that DHH recommended it, I thought it was a good idea to give it a shot.</p>
<p><a href="https://github.com/LazyVim/starter">LazyVim</a> is a premade configuration for Neovim. The purists will probably hate it, but it’s a good start.</p>
<p>I had my own <code>.vimrc</code>, and after trying LazyVim for 30 minutes or so, I realized my config sucked.</p>
<p>First, install Neovim using Homebrew.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install neovim</span></code></pre></div>
<p>Then, install LazyVim.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/LazyVim/starter ~/.config/nvim</span></code></pre></div>
<p>So far, I’ve only made a few changes:</p>
<ul>
<li>Installed <a href="https://github.com/github/copilot.vim">Copilot</a>, <a href="https://github.com/CopilotC-Nvim/CopilotChat.nvim">CopilotChat</a>, and <a href="https://github.com/echasnovski/mini.surround">mini-surround</a>.</li>
<li>Installed <a href="https://github.com/navarasu/onedark.nvim">One Dark</a> color scheme.</li>
</ul>
<p>The plugins I mentioned are available in <code>:LazyExtras</code>, so it’s very easy to install them. Run <code>:LazyExtras</code>, select the plugins, and then install them with <span class="visually-hidden">I</span>.</p>
<p>To install <code>One Dark</code>, you must create a new file in <code>~/.config/nvim/lua/plugins/</code> containing the following code:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource lua number-lines code-with-copy"><code class="sourceCode lua"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-2">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"navarasu/onedark.nvim"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb9-3"></span>
<span id="cb9-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Configure LazyVim to load One Dark</span></span>
<span id="cb9-5">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LazyVim/LazyVim"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">opts</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-8">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">colorscheme</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"onedark"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb9-10">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb9-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="other-useful-tools" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="other-useful-tools">Other useful tools</h2>
<p>While exploring <a href="https://github.com/basecamp/omakub/">Omakub’s repository</a>, I also learned about other useful tools that I’ve now included in my daily workflow:</p>
<section id="lazydocker" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="lazydocker">lazydocker</h3>
<p><a href="https://github.com/jesseduffield/lazydocker">lazydocker</a>: A simple terminal UI to manage everything Docker. Much better than everything else I’ve used.</p>
<p>Docker is great. But, until now, the experience of managing Docker containers sucked.</p>
<p>Take a look at the main screen:</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/lazydocker-screenshot.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="lazydocker"><img src="https://dylancastillo.co/til/images/lazydocker-screenshot.png" class="img-fluid figure-img" alt="lazydocker"></a></p>
<figcaption class="margin-caption">lazydocker</figcaption>
</figure>
</div>
</section>
<section id="lazygit" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="lazygit">lazygit</h3>
<p><a href="https://github.com/jesseduffield/lazygit">lazygit</a> is a simple terminal UI for <code>git</code>.</p>
<p>I’ve found it better than GitHub Desktop when doing complex operations.</p>
<p>Here’s a screenshot of the main screen:</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/lazygit-screenshot.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="lazygit"><img src="https://dylancastillo.co/til/images/lazygit-screenshot.png" class="img-fluid figure-img" alt="lazygit"></a></p>
<figcaption class="margin-caption">lazygit</figcaption>
</figure>
</div>
</section>
<section id="eza" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="eza">eza</h3>
<p><a href="https://github.com/eza-community/eza">eza</a> is an improved version of <code>ls</code>.</p>
<p>I also added a couple of aliases from Omakub:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">alias</span> ls=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'eza -lh --group-directories-first --icons --hyperlink'</span></span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">alias</span> lsa=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ls -a'</span></span>
<span id="cb10-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">alias</span> lt=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'eza --tree --level=2 --long --icons --git'</span></span>
<span id="cb10-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">alias</span> lta=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lt -a'</span></span></code></pre></div>
<p>If you run <code>lta</code> you’ll get a nice view of the current directory.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/eza-screenshot.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="eza"><img src="https://dylancastillo.co/til/images/eza-screenshot.png" class="img-fluid figure-img" alt="eza"></a></p>
<figcaption class="margin-caption">eza</figcaption>
</figure>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>That’s all. I hope you learned something from this post or, at least, got a cool looking terminal.</p>
<p>There’s nothing else to say except that I’m never going to recover those 4 hours of my life.</p>
<p>I should get back to work.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I’m sure you’re itching to explain how I’m completely wrong about this, and how you haven’t had to fix anything in years. Please reach me at <a href="mailto:elon@x.com">elon@x.com</a>↩︎</p></li>
<li id="fn2"><p>Can you even install Ubuntu on a Mac?↩︎</p></li>
<li id="fn3"><p>Including its horrible website.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Installing {Alacritty,} {Zellij,} and {Neovim} in {macOS}},
  date = {2024-06-08},
  url = {https://dylancastillo.co/til/install-alacritty-and-zellij-in-macos.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Installing Alacritty, Zellij, and Neovim
in macOS.”</span> June 8, 2024. <a href="https://dylancastillo.co/til/install-alacritty-and-zellij-in-macos.html">https://dylancastillo.co/til/install-alacritty-and-zellij-in-macos.html</a>.
</div></div></section></div> ]]></description>
  <category>til</category>
  <category>alacritty</category>
  <category>zellij</category>
  <category>neovim</category>
  <guid>https://dylancastillo.co/til/install-alacritty-and-zellij-in-macos.html</guid>
  <pubDate>Sat, 08 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Live Components with Django and htmx</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/til/live-components-with-django-and-htmx.html</link>
  <description><![CDATA[ 




<p>I discovered <a href="https://github.com/EmilStenstrom/django-components/"><code>django-components</code></a> late last year and I quickly realized it was the missing piece in my Django + htmx workflow. It made my developer experience so much better, that I even started contributing to it.</p>
<p><code>django-components</code> lets you build components that combine HTML, JS, and CSS in a single place. Plus, it now lets you use components as views. This feature allows you to keep all the logic for a part of your application in one place, giving you great <a href="https://htmx.org/essays/locality-of-behaviour/">locality of behavior</a>.</p>
<p>A <a href="https://htmx.org/examples/click-to-load/">click-to-load</a> component would look something like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.core.paginator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Paginator</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django_components <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> component</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> src.app.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Contact</span>
<span id="cb1-5"></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@component.register</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"click_to_load"</span>)</span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ClickToLoadTableComponent(component.Component):</span>
<span id="cb1-9">    template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        {</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">or contact in page_obj %}</span></span>
<span id="cb1-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            &lt;tr&gt;</span></span>
<span id="cb1-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                &lt;td&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> contact.id </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span></span>
<span id="cb1-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                &lt;td&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> contact.first_name </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> contact.last_name </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span></span>
<span id="cb1-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                &lt;td&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> contact.email </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span></span>
<span id="cb1-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                &lt;td&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> contact.status </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span></span>
<span id="cb1-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            &lt;/tr&gt;</span></span>
<span id="cb1-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            {</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% i</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">f forloop.last and page_obj.has_next %}</span></span>
<span id="cb1-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                &lt;tr id="replaceMe"&gt;</span></span>
<span id="cb1-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                    &lt;td colspan="4"&gt;</span></span>
<span id="cb1-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                        &lt;button</span></span>
<span id="cb1-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                            class='primary'</span></span>
<span id="cb1-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                            hx-get="{</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% u</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">rl 'contacts' page=page_obj.next_page_number %}"</span></span>
<span id="cb1-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                            hx-target="#replaceMe"</span></span>
<span id="cb1-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                            hx-swap="outerHTML"&gt;</span></span>
<span id="cb1-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                            Load more...</span></span>
<span id="cb1-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                        &lt;/button&gt;</span></span>
<span id="cb1-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                    &lt;/td&gt;</span></span>
<span id="cb1-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                &lt;/tr&gt;</span></span>
<span id="cb1-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            {</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ndif %}</span></span>
<span id="cb1-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        {</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ndfor %}</span></span>
<span id="cb1-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-32"></span>
<span id="cb1-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_context_data(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, page_obj, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb1-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"page_obj"</span>: page_obj}</span>
<span id="cb1-35"></span>
<span id="cb1-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, request, page, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb1-37">        paginator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Paginator(Contact.objects.order_by(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-38">        page_obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> paginator.get_page(page)</span>
<span id="cb1-39">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"page_obj"</span>: page_obj}</span>
<span id="cb1-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.render_to_response(context)</span></code></pre></div>
<p>You can use this component in any view using <code>{% component 'click_to_load' page_obj=page_obj %}</code> or render it outside of a view by adding it to <code>urls.py</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.urls <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> path</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> src.components.click_to_load.table <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ClickToLoadTableComponent</span>
<span id="cb2-4"></span>
<span id="cb2-5">urlpatterns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb2-6">    path(</span>
<span id="cb2-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contacts/&lt;int:page&gt;"</span>,</span>
<span id="cb2-8">        ClickToLoadTableComponent.as_view(),</span>
<span id="cb2-9">        name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contacts"</span>,</span>
<span id="cb2-10">    ),</span>
<span id="cb2-11">]</span></code></pre></div>
<p>Short and sweet, just like the best things in life.</p>
<section id="django-live-components" class="level2">
<h2 class="anchored" data-anchor-id="django-live-components">Django Live Components</h2>
<p>I thought it’d be fun to use the library for something it wasn’t designed for: streaming component changes through server-sent events (SSE).</p>
<p>It took me a few hours and several reads of <a href="https://valberg.dk/">Víðir’s tutorial</a> to figure it out, but it worked. It’s a bit hacky but all the pieces were there. I just had to find a way to put them together.</p>
<p>The code is available <a href="https://github.com/dylanjcastillo/django-live-components">here</a>.</p>
<p>I had a simple idea: set up a <a href="https://redis.io/docs/interact/pubsub/">Redis</a> <a href="https://redis.io/docs/interact/pubsub/">pub/sub channel</a> for server notifications. When the client loads the page, it subscribes to this notification channel. Each time the server publishes a new notification, the system reads it from the channel. Then, it renders the HTML and sends it to the client using Server-Sent Events (SSE).</p>
<p>First, you need a notification component, with a streaming view that updates the client whenever a new notification occurs, and a way to subscribe to new notifications sent from the server.</p>
<p>Here’s what I came up with:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AsyncGenerator</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> redis.asyncio <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> redis</span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.http <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StreamingHttpResponse</span>
<span id="cb3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.utils.decorators <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classonlymethod</span>
<span id="cb3-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django_components <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> component</span>
<span id="cb3-9"></span>
<span id="cb3-10">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> redis.from_url(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"redis://localhost"</span>)</span>
<span id="cb3-11"></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sse_message(event_id: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, event: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, data: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb3-14">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb3-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"id: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>event_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"event: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>event<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"data: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strip()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> NotificationComponent(component.Component):</span>
<span id="cb3-19"></span>
<span id="cb3-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@classonlymethod</span></span>
<span id="cb3-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> as_live_view(cls, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>initkwargs):</span>
<span id="cb3-22">        view <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().as_view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>initkwargs)</span>
<span id="cb3-23">        view._is_coroutine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> asyncio.coroutines._is_coroutine</span>
<span id="cb3-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> view</span>
<span id="cb3-25"></span>
<span id="cb3-26">    template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;div style="color: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">color</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">;" role="alert"&gt;</span></span>
<span id="cb3-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        &lt;span style="font-weight: bold;"&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> title </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/span&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> message </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span></span>
<span id="cb3-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;/div&gt;</span></span>
<span id="cb3-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-31"></span>
<span id="cb3-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> streaming_response(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> AsyncGenerator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb3-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> r.pubsub() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pubsub:</span>
<span id="cb3-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> pubsub.subscribe(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"notifications_channel"</span>)</span>
<span id="cb3-35">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb3-36">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb3-37">                    message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> pubsub.get_message(</span>
<span id="cb3-38">                        ignore_subscribe_messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-39">                    )</span>
<span id="cb3-40">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> message <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb3-41">                        notification_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(message[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>].decode())</span>
<span id="cb3-42">                        sse_message_rendered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sse_message(</span>
<span id="cb3-43">                            notification_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>],</span>
<span id="cb3-44">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"notification"</span>,</span>
<span id="cb3-45">                            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.render(</span>
<span id="cb3-46">                                {</span>
<span id="cb3-47">                                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>: notification_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>],</span>
<span id="cb3-48">                                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>: notification_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>],</span>
<span id="cb3-49">                                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>: notification_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>],</span>
<span id="cb3-50">                                }</span>
<span id="cb3-51">                            ),</span>
<span id="cb3-52">                        )</span>
<span id="cb3-53">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> sse_message_rendered</span>
<span id="cb3-54">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> asyncio.sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb3-55">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">finally</span>:</span>
<span id="cb3-56">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> r.aclose()</span>
<span id="cb3-57"></span>
<span id="cb3-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, request, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb3-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> StreamingHttpResponse(</span>
<span id="cb3-60">            streaming_content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.streaming_response(),</span>
<span id="cb3-61">            content_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text/event-stream"</span>,</span>
<span id="cb3-62">        )</span></code></pre></div>
<p>And you should include this in your <code>urls.py</code>:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.urls <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> path</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> components.notification <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> NotificationComponent</span>
<span id="cb4-3"></span>
<span id="cb4-4">urlpatterns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-5">    path(</span>
<span id="cb4-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"notification/"</span>,</span>
<span id="cb4-7">        NotificationComponent.as_live_view(),</span>
<span id="cb4-8">        name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stream_notification"</span>,</span>
<span id="cb4-9">    ),</span>
<span id="cb4-10">]</span></code></pre></div>
<p>Then, you need a simple HTML template to show these notifications. I used the <a href="https://htmx.org/extensions/server-sent-events/">htmx SSE extension</a> to handle the SSE connection on the client. This was my template:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource html number-lines code-with-copy"><code class="sourceCode html"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;!-- src/templates/index.html --&gt;</span></span>
<span id="cb5-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;!DOCTYPE</span> html<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">html</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> lang</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">head</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> charset</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTF-8"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">/&gt;</span></span>
<span id="cb5-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"viewport"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> content</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width=device-width, initial-scale=1.0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">/&gt;</span></span>
<span id="cb5-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">title</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Django Live Components<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">title</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-8">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">head</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">body</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span></span>
<span id="cb5-11"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      hx-ext</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sse"</span></span>
<span id="cb5-12"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      sse-connect</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{% url 'stream_notification' %}"</span></span>
<span id="cb5-13"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      sse-swap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"notification"</span></span>
<span id="cb5-14"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">    </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span></span>
<span id="cb5-16"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://unpkg.com/htmx.org@1.9.10"</span></span>
<span id="cb5-17"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      integrity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC"</span></span>
<span id="cb5-18"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      crossorigin</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"anonymous"</span></span>
<span id="cb5-19"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">    </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-20">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://unpkg.com/htmx.org/dist/ext/sse.js"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-21">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">body</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">html</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Finally, you need a script to simulate these server notifications:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random_notifications.py</span></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> redis</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb6-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb6-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb6-6"></span>
<span id="cb6-7">REDIS_HOST <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"localhost"</span></span>
<span id="cb6-8">REDIS_PORT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6379</span></span>
<span id="cb6-9">REDIS_CHANNEL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"notifications_channel"</span></span>
<span id="cb6-10"></span>
<span id="cb6-11">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> redis.StrictRedis(host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>REDIS_HOST, port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>REDIS_PORT, decode_responses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-12"></span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_random_notification():</span>
<span id="cb6-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Create a random notification message"""</span></span>
<span id="cb6-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb6-17">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>: random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>),</span>
<span id="cb6-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Notification "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)),</span>
<span id="cb6-19">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a random message "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)),</span>
<span id="cb6-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>: random.choice([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>]),</span>
<span id="cb6-21">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span>: time.ctime(),</span>
<span id="cb6-22">    }</span>
<span id="cb6-23"></span>
<span id="cb6-24"></span>
<span id="cb6-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> publish_notification():</span>
<span id="cb6-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Publish a random notification to the Redis channel"""</span></span>
<span id="cb6-27">    notification <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_random_notification()</span>
<span id="cb6-28">    r.publish(REDIS_CHANNEL, json.dumps(notification))</span>
<span id="cb6-29">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Published: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>notification<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-30"></span>
<span id="cb6-31"></span>
<span id="cb6-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb6-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb6-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb6-35">            publish_notification()</span>
<span id="cb6-36">            time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb6-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">KeyboardInterrupt</span>:</span>
<span id="cb6-38">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stopped notification publisher"</span>)</span></code></pre></div>
<p>You can run Redis on Docker to run this script. It’ll start adding notifications to the Redis channel, that you’ll see flash on the page.</p>
<p>This was fun. I ended up using a similar pattern in <a href="https://aitheneum.iwanalabs.com/">AItheneum</a>.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {Live {Components} with {Django} and Htmx},
  date = {2024-01-28},
  url = {https://dylancastillo.co/til/live-components-with-django-and-htmx.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“Live Components with Django and
Htmx.”</span> January 28, 2024. <a href="https://dylancastillo.co/til/live-components-with-django-and-htmx.html">https://dylancastillo.co/til/live-components-with-django-and-htmx.html</a>.
</div></div></section></div> ]]></description>
  <category>til</category>
  <category>django</category>
  <category>htmx</category>
  <guid>https://dylancastillo.co/til/live-components-with-django-and-htmx.html</guid>
  <pubDate>Sun, 28 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>2023: Personal Snapshot</title>
  <dc:creator>Dylan Castillo</dc:creator>
  <link>https://dylancastillo.co/posts/2023-personal-snapshot.html</link>
  <description><![CDATA[ 




<p>This is my annual review. It serves two purposes: a deep analysis of the past year and a record of my thoughts at the time of writing.</p>
<p>I hope it’s fun to read or, at the very least, provides some interesting insights.</p>
<p>If it’s me rereading this, welcome back. This is Dylan from 2023.</p>
<section id="what-went-well" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-went-well">What went well?</h2>
<p>According to my <a href="https://github.com/dylanjcastillo/">GitHub account</a>, I committed code 276 out of 365 days in 2023. I likely coded even more since there were days when I didn’t commit my code. Also, sometimes I used a different account for projects due to company policy.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2023-personal-snapshot/image-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Squint to see the secret message"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/image-1.png" class="img-fluid figure-img" alt="Squint to see the secret message"></a></p>
<figcaption class="margin-caption">Squint to see the secret message</figcaption>
</figure>
</div>
<p>The more I code the more I learn. So, as long as I stay honest and avoid committing useless code, coding serves as a good proxy of how much I’ve learned about technical topics throughout the year. This year, I felt I learned a lot, so I’m happy.</p>
<p>Despite reaching an all-time high compared to previous years, I think I could have achieved more. Sometimes, especially between projects or during periods when I felt burned out, I procrastinated quite a bit. Next year, I want to improve this.</p>
<p>I shipped five AI apps (not including client work). I developed four on my own and created one with a friend. Two of them made it to the front page of <a href="https://news.ycombinator.com/item?id=34547015">Hacker</a> News and got featured in <a href="https://www.economist.com/business/2023/02/28/investors-are-going-nuts-for-chatgpt-ish-artificial-intelligence">The Economist</a>. Another one won brownie points in an <a href="https://www.youtube.com/watch?v=0Sz-Nmi_5xg&amp;t=1432s">AI Shark Tank</a>.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2023-personal-snapshot/image-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="AI apps I built in 2023"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/image-2.png" class="img-fluid figure-img" alt="AI apps I built in 2023"></a></p>
<figcaption class="margin-caption">AI apps I built in 2023</figcaption>
</figure>
</div>
<p>I also wrote 9 blog posts. I was very motivated at first and worked with a good friend, <a href="https://www.linkedin.com/in/hujingjing/">Jing</a>, as an accountability partner. We ended up prioritizing other projects and stopped the accountability challenge, but it was fun and effective while it lasted. I’m very grateful to Jing for joining me in this challenge.</p>
<p>I focused on writing tutorials about AI topics, but I got tired after a while. Writing high-quality tutorials demands a lot of effort. Plus, AI evolves so fast that my tutorials often become outdated within months. That sucked!</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2023-personal-snapshot/image-7.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="My stats looking like 💩"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/image-7.png" class="img-fluid figure-img" alt="My stats looking like 💩"></a></p>
<figcaption class="margin-caption">My stats looking like 💩</figcaption>
</figure>
</div>
<p>When I stopped writing regularly, my site’s traffic started to drop. I also believe ChatGPT was a major factor. My basic-level tutorials, which ChatGPT can easily replace, have stopped growing.</p>
<p>I’m making a change this year in my content creation strategy. I’ll focus on creating videos for technical topics and write about <em>evergreen</em> subjects on my blog. I’ve realized that making videos for technical content is a time-saver compared to writing tutorials. Showing users directly through videos is simpler than writing detailed descriptions or taking screenshots and explaining them.</p>
<p>My original plan for my blog was to share my thoughts. I ended up writing technical tutorials because it was a more effective way to drive traffic, but in all honesty, I didn’t enjoy it very much. So I’m going back to my original plan.</p>
<p>I posted more or less consistently on LinkedIn throughout the year. I got roughly 420k views on my posts. A third of those views came from a single <a href="https://www.linkedin.com/posts/dylanjcastillo_a-hackers-guide-to-language-models-activity-7117426046404063233-_T51?utm_source=share&amp;utm_medium=member_desktop">post</a>, and I gained ~2.3k followers.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2023-personal-snapshot/image.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="The outcome of spamming LinkedIn"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/image.png" class="img-fluid figure-img" alt="The outcome of spamming LinkedIn"></a></p>
<figcaption class="margin-caption">The outcome of spamming LinkedIn</figcaption>
</figure>
</div>
<p>I met lots of great people and had tons of catch-ups this year. I am grateful for all the people I met this year. Special thanks go to <a href="https://www.linkedin.com/in/dr-maximilian-brunner/">Max</a>, <a href="https://www.linkedin.com/in/emanuel-schamp/">Emanuel</a>, <a href="https://www.linkedin.com/in/jscastanoc/">Sebastián</a>, <a href="https://www.linkedin.com/in/eduardo-gonzalo-almorox-phd-5b8b4955">Edu</a>, and <a href="https://www.linkedin.com/in/rhys-donoghue/">Rhys</a> for the collaborations we did. Not all things went as planned, but we had fun.</p>
<p>Posting random things online helps me chat, befriend, learn from, and even do business with people I wouldn’t have met otherwise. It feels great!</p>
<p>I did more sales this year. I took part in two 6-figure proposals that didn’t pan out, and landed two 5-figure contracts, each setting a new record for my hourly rate. I also sold quite a few small projects. Selling is fun but I’m not great at it. This is one of the focuses for next year.</p>
<p>Financially, things went well. Despite being more focused on learning than on making money this year, I made ~2.5x my annual burn rate (I’m frugal!). All my income was made through freelancing, and 68% of my income came from a single project. This situation is better than the past two years because I’m a bit less dependent on one client. But I’m still not where I want to be. To lower my risk, I want to spread my income more evenly across different clients.</p>
<p>Healthwise, this year went well. I completed 169 strength training sessions, averaging 3 gym visits per week. I’m pretty happy with that. I faced some minor injuries but dealt with them effectively.</p>
<p>Also, I completed 4,711 minutes of <a href="https://www.howardluksmd.com/zone-2-hr-training-live-longer-less-injury/">Z2 training</a> (roughly 90 minutes per week). For Z2, I experimented with running, cycling, and stair-climbing. Running is my favorite, but stair-climbing lets me multitask. So, I mostly split my time between these two activities.</p>
<p>This year, I gave stand-up comedy a shot, all thanks to my wife. I’ve wanted to try it for a long time but kept coming up with excuses. For our fifth anniversary, she surprised me by signing me up for a <a href="https://estudioteatromadrid.com/cursos/intensivo-curso-de-stand-up-iniciacion/">course</a>. It’s my favorite gift since getting a Game Boy Advance twenty years ago.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2023-personal-snapshot/image-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="Me, holding a fart on stage"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/image-4.png" class="img-fluid figure-img" alt="Me, holding a fart on stage"></a></p>
<figcaption class="margin-caption">Me, holding a fart on stage</figcaption>
</figure>
</div>
<p>For those who know me in real life, you’ll know that I don’t enjoy speaking in public. So this was a real challenge for me. I did a presentation with family and friends and went to four <a href="https://en.wikipedia.org/wiki/Open_mic">open mics</a>.</p>
<p>IT WAS GREAT! Even though I felt terrified before stepping onto the stage, I ended up having a lot of fun. Most of my jokes made people laugh, which felt comforting.</p>
<p>I do need to work on my stage presence. I often stood in awkward places, struggled to make eye contact with the audience during punchlines, and frequently said “Ehhh… Uhhh…”</p>
<p>I’ve opened an <a href="https://www.instagram.com/dylanporque/">IG account</a> for my comedy stuff. I haven’t posted anything yet, but I’m planning to start in the next few weeks. For now, I will post in Spanish. Follow me there if you want to stay updated!</p>
<p>Finally, this year has been good for my relationships with my wife, family, and friends. My wife and I continue to work as a team, each of us progressing in our respective areas and supporting one another. And I made time to enjoy with family and friends.</p>
<p>In my last snapshot, I didn’t include any photos. When I revised it a few days ago, I realized I missed having them. So, this time, I’ve included a few.</p>
<details>
<summary>
Click to see photos
</summary>
<div class="quarto-layout-panel" data-layout-nrow="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/IMG_6052-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/IMG_6052-2.png" class="img-fluid"></a></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/PHOTO-2024-01-01-00-16-52-2.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/PHOTO-2024-01-01-00-16-52-2.jpg" class="img-fluid"></a></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/81334753-8d4f-44aa-b6df-42c56a1605de-1.JPG" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/81334753-8d4f-44aa-b6df-42c56a1605de-1.JPG" class="img-fluid"></a></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/PHOTO-2023-08-02-21-32-13-2.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/PHOTO-2023-08-02-21-32-13-2.jpg" class="img-fluid"></a></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/PHOTO-2023-11-05-09-57-49-5.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/PHOTO-2023-11-05-09-57-49-5.jpg" class="img-fluid"></a></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/ca4e866d-278d-4513-8973-5b0025166e78-1.JPG" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/ca4e866d-278d-4513-8973-5b0025166e78-1.JPG" class="img-fluid"></a></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/d31e56f6-9f97-43ab-bbe4-7971fee4053c.JPG" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/d31e56f6-9f97-43ab-bbe4-7971fee4053c.JPG" class="img-fluid"></a></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/RUTA-IVA-N-619.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/RUTA-IVA-N-619.jpg" class="img-fluid"></a></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><a href="images/2023-personal-snapshot/9b0233e0-465c-4215-9644-ff127f0d0c91-1.JPG" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/9b0233e0-465c-4215-9644-ff127f0d0c91-1.JPG" class="img-fluid"></a></p>
</div>
</div>
</div>
</details>
<p>This year, a family highlight was my in-laws’ visit to Madrid for a few months. We found out that our family loves karaoke, especially my dad and my father-in-law. It was tough to get them off the microphone!</p>
<p>More importantly, my loved ones remain healthy and happy, and so am I.</p>
</section>
<section id="what-didnt-go-well" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-didnt-go-well">What didn’t go well?</h2>
<p>I didn’t write a 2022 personal snapshot. That wasn’t a great way to start 2023.</p>
<p>After <a href="https://dylancastillo.co/my-entrepreneur-first-experience/">Entrepreneur First</a>, I felt burned out and lacked the motivation to write a detailed review of the past year. I kept putting it off until it was way too late. And nobody wants to read your annual review in August!</p>
<p>I failed to get funding twice this year. First from <a href="https://www.joinef.com/">Entrepreneur First</a>, and second, from <a href="https://www.speedinvest.com/">Speedinvest</a>. Pitching, preparing the materials, and all the discussions involved were a cool experience, but the outcome was frustrating both times.</p>
<p>I’m not sure it would have worked out. In both cases, I wasn’t too excited about the idea, but I thought it was worth a try. My main concern with raising venture capital money too early often leads to poor financial outcomes for founders. That’s a no-no for me.</p>
<p>Though, bootstrapping isn’t easy either. My most successful AI product made 60€. Just enough for a decent dinner for two in Madrid.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2023-personal-snapshot/image-5-1-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15" title="My “best” AI product"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/image-5-1-1.png" height="300" alt="My “best” AI product" class="figure-img"></a></p>
<figcaption class="margin-caption">My “best” AI product</figcaption>
</figure>
</div>
<p>The AI apps I built this year landed me several freelancing projects. But they made little money by themselves. To be fair, I only launched two products you could pay for. I didn’t intend the others to make money, at least not initially.</p>
<p>This year, I finally grasped something you might find obvious: to have products that generate revenue, you must be intentional about it. You must create opportunities for people to pay.</p>
<p>I used to believe that if I built something cool enough, people would discover it and somehow find a way to pay for it. I was wrong. I realized that I must actively set up a payment system for my products or deliberately plan how to monetize the attention they receive. Without that, after the initial burst of attention fades, you might end up with nothing. Many of my projects this year suffered this fate.</p>
<p>I’ve always dreamed of creating a product, so I ignored the market’s pull towards a consulting company. Instead of doubling down on the demand, I often said no, aiming to focus on my product ideas. After spending much of this year like a person with a hammer in search of a nail, I’ve decided to reverse my approach.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><a href="images/2023-personal-snapshot/image-6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16" title="Me running away from the demand"><img src="https://dylancastillo.co/posts/images/2023-personal-snapshot/image-6.png" class="img-fluid figure-img" alt="Me running away from the demand"></a></p>
<figcaption class="margin-caption">Me running away from the demand</figcaption>
</figure>
</div>
<p>Now, I’ll start with the demand and then figure out how to offer services to meet it. My focus will be on establishing a consulting practice. From there, I might develop a product. But then again, maybe I don’t need to. I’m content with the idea of getting rich through a services-only company 😉</p>
<p>Although I’m satisfied with my physical fitness, I’ve noticed that I often don’t rest enough. This happens either because I don’t sleep enough or because I overtrain. I’ve started feeling some symptoms of this, so improving my rest is a goal for next year.</p>
</section>
<section id="what-are-the-plans-for-next-year" class="level2">
<h2 class="anchored" data-anchor-id="what-are-the-plans-for-next-year">What are the plans for next year?</h2>
<p>First, focus on building a successful consulting practice. I’ll be doing a lot more sales this year and plan to share updates frequently. I have some exciting news about this that I’ll be sharing soon.</p>
<p>Next, establishing a sustainable content engine. I believe shifting to video for technical content might yield a higher ROI than text. So, this year, I plan to explore this approach and reserve the blog for more personal articles.</p>
<p>Keep doing stand-up comedy. I haven’t found such an enjoyable hobby in a long time. I want to do more of it. It also brings extra benefits, like improving my sales skills.</p>
<p>Finally, make time for rest. I often struggle with guilt over taking breaks, leading to very few days off throughout the year. But this isn’t good for my mental and physical well-being. I aim to create more space for rest, and I’m sure my wife and family will appreciate that too 😁</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{castillo2024,
  author = {Castillo, Dylan},
  title = {2023: {Personal} {Snapshot}},
  date = {2024-01-05},
  url = {https://dylancastillo.co/posts/2023-personal-snapshot.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-castillo2024" class="csl-entry quarto-appendix-citeas">
Castillo, Dylan. 2024. <span>“2023: Personal Snapshot.”</span> January
5, 2024. <a href="https://dylancastillo.co/posts/2023-personal-snapshot.html">https://dylancastillo.co/posts/2023-personal-snapshot.html</a>.
</div></div></section></div> ]]></description>
  <category>personal-snapshot</category>
  <guid>https://dylancastillo.co/posts/2023-personal-snapshot.html</guid>
  <pubDate>Fri, 05 Jan 2024 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
