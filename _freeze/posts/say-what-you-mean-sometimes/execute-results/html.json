{
  "hash": "9fbdeb5dbd75939fda0b127bb678fcd6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Say What You Mean... Sometimes\"\ndate: \"12/08/2024\"\ndescription-meta: \"A look at the impact of structured outputs on the performance of LLMs.\"\ncategories:\n  - llm\n  - openai\n  - pydantic\n  - python\n---\n\n\nWhen I read [Let Me Speak Freely?](https://arxiv.org/abs/2408.02442) by Tam et al. I thought they raised an interesting question: does constraining LLM outputs to structured formats impact the quality of their responses?\n\nIn both the original study and their recent update, Tam et al. concluded that is the case. They found that \"structured generation constraints significantly impact LLM performance across various tasks\".\n\nBut the study had major flaws. The [.txt](https://dottxt.co/) team wrote a very compelling [rebuttal](https://dottxt.co/blog/let-me-speak-freely) to the paper. For _Llama-3-8B-Instruct_, they demonstrate that Tam, et al. results were mostly due to poor prompting, unfair comparisons and the improper use of an \"AI parser\" rather than the use of structured outputs.\n\nI liked the rebuttal but it still left me wondering how well their results generalize. They focused on a single model[^1], which represents a small fraction of the LLMs powering applications in production today. Open-weight models offer more flexibility on how to _structure_ your output, such as letting users specify [regex expressions](https://dottxt-ai.github.io/outlines/latest/reference/generation/regex/) to constrain the output. Proprietary models lack this. Right now, JSON is the only structured output format guaranteed to work across most popular providers.\n\n[^1]: Although, they've also [shared results](https://blog.dottxt.co/performance-gsm8k.html) of other open-weight models using a different setup.\n\nGiven this constraint, would the .txt team’s results still hold?\n\nPlus, both the original study and the rebuttal focused on tasks that might not be a good proxy for the full range of tasks people use LLMs for. Would the rebuttal results be different in settings outside of simple reasoning tasks?\n\nSo I decided to:\n\n1.  Replicate the results from .txt's rebuttal using _LLaMA3-8B-Instruct_.\n2.  Replicate the same tasks using a proprietary model _GPT-4o-mini_.\n3.  Test results on a broader set of tasks such as [LiveBench](https://livebench.ai/).\n\nThis article presents the results of the first two steps. All the code is available on [Github](https://github.com/dylanjcastillo/blog/tree/main/_extras/say-what-you-mean-sometimes).\n\n## Results\n\nIf you're short on time, here are the key findings:\n\n1. Tam et al.’s conclusions about structured outputs might still hold, even if they did not properly test for it. There are cases where structured outputs perform worse than unstructured outputs.\n2. .txt's rebuttal is accurate. It shows that structured outputs are as good or better than unstructured outputs for _LLaMA3-8B-Instruct_. But the same approach does not hold for _GPT-4o-mini_ (and possibly other models).\n\nThe figure below shows the results for _GPT-4o-mini using .txt's prompt fixes, along with additional improvements I made.\n\n::: {#cell-fig-gpt-4o-mini-best .cell execution_count=1}\n\n::: {#fig-gpt-4o-mini-best .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"1b43bc16-2cf9-41fc-b91b-57507d5424c0\" class=\"plotly-graph-div\" style=\"height:400px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"1b43bc16-2cf9-41fc-b91b-57507d5424c0\")) {                    Plotly.newPlot(                        \"1b43bc16-2cf9-41fc-b91b-57507d5424c0\",                        [{\"hoverinfo\":\"skip\",\"name\":\"Structured\",\"text\":[\"93.86\",\"94.67\",\"89.84\"],\"textposition\":\"outside\",\"texttemplate\":\"%{text:.2f}%\",\"x\":[\"GSM8k\",\"Last Letter\",\"Shuffled Objects\"],\"y\":[93.86,94.67,89.84],\"type\":\"bar\"},{\"hoverinfo\":\"skip\",\"name\":\"Unstructured\",\"text\":[\"94.31\",\"92.0\",\"95.12\"],\"textposition\":\"outside\",\"texttemplate\":\"%{text:.2f}%\",\"x\":[\"GSM8k\",\"Last Letter\",\"Shuffled Objects\"],\"y\":[94.31,92.0,95.12],\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"lakecolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"#506784\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"dark\"},\"margin\":{\"b\":0,\"l\":0,\"r\":0,\"t\":30},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"bgcolor\":\"rgb(17,17,17)\",\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"gridwidth\":2,\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\"},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"gridwidth\":2,\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\"},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"gridwidth\":2,\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\"}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"bordercolor\":\"rgb(17,17,17)\",\"borderwidth\":1,\"tickwidth\":0},\"ternary\":{\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"bgcolor\":\"rgb(17,17,17)\",\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"zerolinewidth\":2}}},\"margin\":{\"l\":50,\"r\":50,\"t\":50,\"b\":50,\"pad\":10},\"yaxis\":{\"title\":{\"text\":\"Score (%)\"},\"range\":[0,105],\"fixedrange\":true},\"xaxis\":{\"title\":{\"text\":\"Task\"},\"fixedrange\":true},\"legend\":{\"orientation\":\"h\",\"yanchor\":\"bottom\",\"y\":1.05,\"xanchor\":\"center\",\"x\":0.5},\"modebar\":{\"remove\":[\"autoScale2d\",\"autoscale\",\"editInChartStudio\",\"editinchartstudio\",\"hoverCompareCartesian\",\"hovercompare\",\"lasso\",\"lasso2d\",\"orbitRotation\",\"orbitrotation\",\"pan\",\"pan2d\",\"pan3d\",\"reset\",\"resetCameraDefault3d\",\"resetCameraLastSave3d\",\"resetGeo\",\"resetSankeyGroup\",\"resetScale2d\",\"resetViewMap\",\"resetViewMapbox\",\"resetViews\",\"resetcameradefault\",\"resetcameralastsave\",\"resetsankeygroup\",\"resetscale\",\"resetview\",\"resetviews\",\"select\",\"select2d\",\"sendDataToCloud\",\"senddatatocloud\",\"tableRotation\",\"tablerotation\",\"toImage\",\"toggleHover\",\"toggleSpikelines\",\"togglehover\",\"togglespikelines\",\"toimage\",\"zoom\",\"zoom2d\",\"zoom3d\",\"zoomIn2d\",\"zoomInGeo\",\"zoomInMap\",\"zoomInMapbox\",\"zoomOut2d\",\"zoomOutGeo\",\"zoomOutMap\",\"zoomOutMapbox\",\"zoomin\",\"zoomout\"]},\"barmode\":\"group\",\"height\":400,\"showlegend\":true},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('1b43bc16-2cf9-41fc-b91b-57507d5424c0');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nOverall results for GPT-4o-mini.\n:::\n:::\n\n\nFor **GSM8K** and **Last Letter**, structured and unstructured methods scored similarly. But for **Shuffled Objects**, unstructured outputs clearly surpassed a structured format.\n\nThe rest of the article will explain the approach I took to get these results.\n\n## Study design\n\nTam et al. evaluated structured and unstructured outputs across three reasoning tasks and six classification tasks. They used exact match to evaluate the reasoning tasks and accuracy to evaluate the classification tasks. They ran the experiments using the following models:\n\n1.  **Proprietary models**: _gpt-3.5-turbo-0125_, _claude-3-haiku-20240307_, _gemini-1.5-flash_, and _gpt-4o-mini-2024-07-18_.\n2.  **Open-weight models**: _LLaMA3-8B-Instruct_, and _Gemma-2-9B-Instruct_.\n\n.txt used a similar setup, but only focused on the reasoning tasks using _LLaMA3-8B-Instruct_. They did not include classification tasks because Tam et al. observed that structured outputs resulted in better performance in these tasks, so there was no need to test for it.\n\nI also believe that structured outputs are better for classification tasks. So, I excluded them from my analysis as well.\n\nThe reasoning tasks were:\n\n1.  [GSM8K](https://huggingface.co/datasets/openai/gsm8k): A dataset from of grade school math word problems.\n2.  [Last Letter](https://huggingface.co/datasets/ChilleD/LastLetterConcat): A dataset of simple word puzzles that require concatening the last letters of a list of names.\n3.  [Shuffled Objects](https://github.com/google/BIG-bench/tree/main/bigbench/benchmark_tasks/tracking_shuffled_objects): A dataset that requires reasoning about the state of a system after a sequence of shuffling operations.\n\nThe rest of the article details the process of replicating .txt's rebuttal on these tasks and evaluating the same tasks using _GPT-4o-mini_.\n\n## Replicating .txt's rebuttal\n\n.txt made it very easy to reproduce their results by sharing their [code on Github](https://github.com/dottxt-ai/demos/tree/main/say-what-you-mean). I just set up a machine at [Modal](https://modal.com/) and ran the code.\n\nWhile going through the code, I noticed some small issues with the prompts. So I decided to tweak them a bit.\n\nBelow are .txt's original results compared to mine, after the prompt adjustments:\n\n::: {#tbl-llama-3-8b-instruct .cell tbl-cap='Results for LLaMA3-8B-Instruct.' execution_count=2}\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_f9d0f\">\n  <thead>\n    <tr>\n      <th id=\"T_f9d0f_level0_col0\" class=\"col_heading level0 col0\" >Task</th>\n      <th id=\"T_f9d0f_level0_col1\" class=\"col_heading level0 col1\" colspan=\"2\">.txt</th>\n      <th id=\"T_f9d0f_level0_col3\" class=\"col_heading level0 col3\" colspan=\"2\">me, 3-shot</th>\n    </tr>\n    <tr>\n      <th id=\"T_f9d0f_level1_col0\" class=\"col_heading level1 col0\" ></th>\n      <th id=\"T_f9d0f_level1_col1\" class=\"col_heading level1 col1\" >Unstructured</th>\n      <th id=\"T_f9d0f_level1_col2\" class=\"col_heading level1 col2\" >Structured</th>\n      <th id=\"T_f9d0f_level1_col3\" class=\"col_heading level1 col3\" >Unstructured</th>\n      <th id=\"T_f9d0f_level1_col4\" class=\"col_heading level1 col4\" >Structured</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_f9d0f_row0_col0\" class=\"data row0 col0\" >GSM8K</td>\n      <td id=\"T_f9d0f_row0_col1\" class=\"data row0 col1\" >77.18</td>\n      <td id=\"T_f9d0f_row0_col2\" class=\"data row0 col2\" >77.79</td>\n      <td id=\"T_f9d0f_row0_col3\" class=\"data row0 col3\" >79.98</td>\n      <td id=\"T_f9d0f_row0_col4\" class=\"data row0 col4\" >79.45</td>\n    </tr>\n    <tr>\n      <td id=\"T_f9d0f_row1_col0\" class=\"data row1 col0\" >Last Letter</td>\n      <td id=\"T_f9d0f_row1_col1\" class=\"data row1 col1\" >73.33</td>\n      <td id=\"T_f9d0f_row1_col2\" class=\"data row1 col2\" >77.33</td>\n      <td id=\"T_f9d0f_row1_col3\" class=\"data row1 col3\" >74.00</td>\n      <td id=\"T_f9d0f_row1_col4\" class=\"data row1 col4\" >78.00</td>\n    </tr>\n    <tr>\n      <td id=\"T_f9d0f_row2_col0\" class=\"data row2 col0\" >Shuffled Objects</td>\n      <td id=\"T_f9d0f_row2_col1\" class=\"data row2 col1\" >40.72</td>\n      <td id=\"T_f9d0f_row2_col2\" class=\"data row2 col2\" >44.35</td>\n      <td id=\"T_f9d0f_row2_col3\" class=\"data row2 col3\" >42.68</td>\n      <td id=\"T_f9d0f_row2_col4\" class=\"data row2 col4\" >43.90</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nExcept for **Structured** in the **Shuffled Objects** task, I was able to improve all the metrics. In **GSM8K's** case, even reversing .txt's result, with **Unstructured** outperforming **Structured** by a small margin.\n\nBut I don't think this matters much.\n\nTheir conclusion still holds: structured outputs are either as good as or better than unstructured outputs, in the tasks considered.\n\nI'll explain the prompt changes I made below, so that you can judge for yourself if they make sense.\n\n### Formatting few-shot examples\n\nIn the **GSM8K** and **Last Letter** tasks, the few-shot prompt for both unstructured and structured used examples formatted as JSON objects and asked the LLM to produce the output in the same format, from which the answer was extracted.\n\nThat felt unfair. Even though you're not formally constraining the LLM to produce a JSON object, you're still asking it to format its response in somewhat unnatural way.\n\nI adjusted the prompts to be as similar as possible for both unstructured and structured outputs while still trying to get the most out of each approach.\n\nFor example, in **GSM8K**, the unstructured prompt is:\n\n> You are an expert in solving grade school math tasks. You will be presented with a grade-school math word problem and be asked to solve it.\n> You will always respond in the following format:\n>\n> <str, reasoning about the answer>\n>\n> ANSWER: <int, final answer>\n>\n> First, provide your step by step reasoning. Then, in ANSWER, provide an integer that corresponds to the correct answer to the question. Don't include any other text in ANSWER.\n\nAnd the structured prompt is:\n\n> You are an expert in solving grade school math tasks. You will be presented with a grade-school math word problem and be asked to solve it.\n> You will always respond in the following format:\n>\n> {\"reasoning\": <str, reasoning about the answer>, \"answer\": <int, final answer>}\n>\n> First, provide your step by step reasoning in the \"reasoning\" field. Then, in the \"answer\" field, provide an integer that corresponds to the correct answer to the question. Don't include any other text in the \"answer\" field.\n\nFinally, for all the tasks, I used a 3-shot prompt.\n\n### Clarifying the task\n\nI also tried to make the prompts clearer. The description of the task in the original **Last Letter** prompt was:\n\n> You are an expert in solving simple word puzzles using reasoning steps. Your specific task is going to be to take a list of 4 names and reason about the last letter of each ., then you will concatenate those letters into a word.\n\nI changed it to:\n\n> You are an expert in solving word puzzles. Your specific task is going to be to take a list of 4 names, get the last letter of each and concatenate these letters into a word.\n\nThe original prompt was reasonable, but I thought the new version was clearer. Through trial and error, I've learned that when working with LLMs, it's best to be as clear and direct as possible.\n\n## Evaluating GPT-4o-mini\n\nUsing the same setup as before, I ran the same tasks with `gpt-4o-mini-2024-07-18`.\n\nIn the table below, you can see the results, including the original results from Tam et al. for comparison:\n\n::: {#tbl-gpt-4o-mini .cell tbl-cap='Results for GPT-4o-mini.' execution_count=3}\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_c43b6\">\n  <thead>\n    <tr>\n      <th class=\"blank\" >&nbsp;</th>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_c43b6_level0_col0\" class=\"col_heading level0 col0\" >NL</th>\n      <th id=\"T_c43b6_level0_col1\" class=\"col_heading level0 col1\" >FRI</th>\n      <th id=\"T_c43b6_level0_col2\" class=\"col_heading level0 col2\" >JSON-Mode</th>\n      <th id=\"T_c43b6_level0_col3\" class=\"col_heading level0 col3\" >JSON-Schema</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >Task</th>\n      <th class=\"index_name level1\" >Method</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n      <th class=\"blank col3\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_c43b6_level0_row0\" class=\"row_heading level0 row0\" rowspan=\"3\">GSM8K</th>\n      <th id=\"T_c43b6_level1_row0\" class=\"row_heading level1 row0\" >Tam et al.</th>\n      <td id=\"T_c43b6_row0_col0\" class=\"data row0 col0\" >94.57</td>\n      <td id=\"T_c43b6_row0_col1\" class=\"data row0 col1\" >87.17</td>\n      <td id=\"T_c43b6_row0_col2\" class=\"data row0 col2\" >86.95</td>\n      <td id=\"T_c43b6_row0_col3\" class=\"data row0 col3\" >91.71</td>\n    </tr>\n    <tr>\n      <th id=\"T_c43b6_level1_row1\" class=\"row_heading level1 row1\" >Me, 0-shot</th>\n      <td id=\"T_c43b6_row1_col0\" class=\"data row1 col0\" >94.31</td>\n      <td id=\"T_c43b6_row1_col1\" class=\"data row1 col1\" >92.12</td>\n      <td id=\"T_c43b6_row1_col2\" class=\"data row1 col2\" >93.33</td>\n      <td id=\"T_c43b6_row1_col3\" class=\"data row1 col3\" >93.48</td>\n    </tr>\n    <tr>\n      <th id=\"T_c43b6_level1_row2\" class=\"row_heading level1 row2\" >Me, 3-shot</th>\n      <td id=\"T_c43b6_row2_col0\" class=\"data row2 col0\" >93.86</td>\n      <td id=\"T_c43b6_row2_col1\" class=\"data row2 col1\" >92.72</td>\n      <td id=\"T_c43b6_row2_col2\" class=\"data row2 col2\" >93.25</td>\n      <td id=\"T_c43b6_row2_col3\" class=\"data row2 col3\" >92.95</td>\n    </tr>\n    <tr>\n      <th id=\"T_c43b6_level0_row3\" class=\"row_heading level0 row3\" rowspan=\"3\">Last Letter</th>\n      <th id=\"T_c43b6_level1_row3\" class=\"row_heading level1 row3\" >Tam et al.</th>\n      <td id=\"T_c43b6_row3_col0\" class=\"data row3 col0\" >83.11</td>\n      <td id=\"T_c43b6_row3_col1\" class=\"data row3 col1\" >84.73</td>\n      <td id=\"T_c43b6_row3_col2\" class=\"data row3 col2\" >76.00</td>\n      <td id=\"T_c43b6_row3_col3\" class=\"data row3 col3\" >86.07</td>\n    </tr>\n    <tr>\n      <th id=\"T_c43b6_level1_row4\" class=\"row_heading level1 row4\" >Me, 0-shot</th>\n      <td id=\"T_c43b6_row4_col0\" class=\"data row4 col0\" >87.33</td>\n      <td id=\"T_c43b6_row4_col1\" class=\"data row4 col1\" >88.00</td>\n      <td id=\"T_c43b6_row4_col2\" class=\"data row4 col2\" >90.00</td>\n      <td id=\"T_c43b6_row4_col3\" class=\"data row4 col3\" >87.33</td>\n    </tr>\n    <tr>\n      <th id=\"T_c43b6_level1_row5\" class=\"row_heading level1 row5\" >Me, 3-shot</th>\n      <td id=\"T_c43b6_row5_col0\" class=\"data row5 col0\" >92.00</td>\n      <td id=\"T_c43b6_row5_col1\" class=\"data row5 col1\" >94.67</td>\n      <td id=\"T_c43b6_row5_col2\" class=\"data row5 col2\" >90.00</td>\n      <td id=\"T_c43b6_row5_col3\" class=\"data row5 col3\" >93.33</td>\n    </tr>\n    <tr>\n      <th id=\"T_c43b6_level0_row6\" class=\"row_heading level0 row6\" rowspan=\"3\">Shuffled Obj.</th>\n      <th id=\"T_c43b6_level1_row6\" class=\"row_heading level1 row6\" >Tam et al.</th>\n      <td id=\"T_c43b6_row6_col0\" class=\"data row6 col0\" >82.85</td>\n      <td id=\"T_c43b6_row6_col1\" class=\"data row6 col1\" >81.46</td>\n      <td id=\"T_c43b6_row6_col2\" class=\"data row6 col2\" >76.43</td>\n      <td id=\"T_c43b6_row6_col3\" class=\"data row6 col3\" >81.77</td>\n    </tr>\n    <tr>\n      <th id=\"T_c43b6_level1_row7\" class=\"row_heading level1 row7\" >Me, 0-shot</th>\n      <td id=\"T_c43b6_row7_col0\" class=\"data row7 col0\" >95.12</td>\n      <td id=\"T_c43b6_row7_col1\" class=\"data row7 col1\" >79.67</td>\n      <td id=\"T_c43b6_row7_col2\" class=\"data row7 col2\" >81.71</td>\n      <td id=\"T_c43b6_row7_col3\" class=\"data row7 col3\" >89.84</td>\n    </tr>\n    <tr>\n      <th id=\"T_c43b6_level1_row8\" class=\"row_heading level1 row8\" >Me, 3-shot</th>\n      <td id=\"T_c43b6_row8_col0\" class=\"data row8 col0\" >92.68</td>\n      <td id=\"T_c43b6_row8_col1\" class=\"data row8 col1\" >69.51</td>\n      <td id=\"T_c43b6_row8_col2\" class=\"data row8 col2\" >62.60</td>\n      <td id=\"T_c43b6_row8_col3\" class=\"data row8 col3\" >65.85</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n_NL_ stands for \"Natural Language\", which would correspond to the _Unstructured_ method in the previous table.\n\n_FRI_ stands for \"Format Restricting Instructions\", which is a JSON generated through the OpenAI's [function calling](https://platform.openai.com/docs/guides/function-calling). _JSON-Mode_ is a JSON generated through the OpenAI's [JSON mode](https://platform.openai.com/docs/guides/structured-outputs#json-mode). _JSON-Schema_ is a JSON generated using [constrained decoding](https://openai.com/index/introducing-structured-outputs-in-the-api/).\n\n_JSON-Schema_ is the closest equivalent to **Structured** as referenced in the previous table. But, in real-life applications, you don't really care about how the output was generated. You just want to get the output in the format you want. So, for the sake of comparison, I will consider the three other methods equivalent to **Structured** as well.\n\n### Adjusting for proprietary models\n\nIn this case, I allowed for 3 retries in the case of parsing errors. I allowed for this because function calling had high error rates in the zero-shot prompting scenario.\n\nThese retries primarily affected **FRI** results. This might make the comparisons in **Last Letter** biased in favor of structured outputs (**FRI** was the best method in this case). But since **JSON-Schema** also outperformed **NL** in this case, this adjustment does not alter the overall conclusions. The other methods maintained error rates of \\<0.5% in **GSM8K** and 0% in **Last Letter** and **Shuffled Objects**.\n\nI used slightly different parsing functions for **Unstructured** and **Structured** outputs. The **Unstructured** parser was more lenient, removing commas and periods at the end of responses. But I believe this remains a fair comparison given that in the **Structured** cases you provide a JSON schema which is more informative.\n\n### Analyzing the results\n\nSimilar to what the .txt team found, after adjusting the prompts, the performance of structured outputs increases substantially compared to Tam et al.\n\nExcept for _NL_ in **GSM8k** and _FRI_ in **Last Letter**, I was able to improve all the metrics for both unstructured and structured outputs using a 0-shot prompt. For 3-shot prompts, I improved **GSM8k** and **Last Letter** across all methods, and _NL_ in **Shuffled Objects**.\n\nFor **GSM8k** and **Last Letter**, the results were very similar between unstructured and structured outputs. There was a slight edge for unstructured outputs in **GSM8k** and for structured outputs in **Last Letter**. In these cases, it’s not clear that one approach definitively outperforms the other.\n\nOn the other hand, **Shuffled Objects** shows a clear advantage for unstructured outputs over structured outputs. This was unexpected, and even after tweaking the prompts, I couldn’t fully close the gap.\n\nDespite the issues in Tam et al.’s study, their conclusion appears to hold. In this particular scenario, using a fairly popular model with reasonable prompts, there is a significant difference in performance between structured and unstructured outputs.\n\n::: callout-note\nIn **GSM8k** and **Last Letter**, few-shot prompting generally decreased performance. This is in line with [other analyses](https://python.useinstructor.com/blog/2024/09/26/bad-schemas-could-break-your-llm-structured-outputs/?h=bad+sc#modes-and-models).\n:::\n\n## Conclusion\n\nYou're here because you want to know whether to use structured or unstructured outputs. As a developer, I'm glad to say the answer is: [it depends](https://www.reddit.com/r/orlybooks/comments/50meb5/it_depends/).\n\nI love using structured outputs in my daily work, because it makes it much easier to work with the output of LLMs. I always encourage [clients](https://iwanalabs.com/) who aren't using them yet to give them a try.\n\nThat said, until there's strong evidence favoring one approach over the other, the best course of action is to test things for yourself. Run your own [evals](https://hamel.dev/blog/posts/evals/) and make a decision based on data.\n\nI expect that in most cases, structured outputs will have similar performance to unstructured outputs. But, if you blindly assume that structured outputs are always equal to or better than unstructured ones, you might be missing out on easy performance gains.\n\nTake the example of **Shuffled Objects** with _GPT-4o-mini_. You could potentially reduce the gap between the two methods by continuing improving the prompts or by switching to a more powerful model. But the costs, in terms of time and effort, might outweigh the benefits compared to simply using unstructured outputs.\n\nThis works both ways. Unstructured outputs aren’t inherently better or worse than structured ones. The right choice depends on your task, the model, and your prompt engineering skills. Test for yourself to determine if a difference exists, and if it does, decide which option works best for you.\n\n",
    "supporting": [
      "say-what-you-mean-sometimes_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.35.2.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}